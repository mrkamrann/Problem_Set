/*

Link: https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/description/

Jimmy was a young programmer, always eager to solve new challenges. One day, he came across a fascinating problem while working on a graph-based puzzle.

Jimmy was given a vector called edges of size len-1, where edges[i] = [node_u, node_v] represents a bidirectional edge between cities node_u and node_v. 
There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities 
from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.

For each d from 1 to len-1, Jimmy needed to find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.

Note : Jimmy knew that the distance between the two cities is the number of edges in the path between them.

Create a C++ function CountSubgraphsForEachDiameter that will return a vector of size len-1 where the dth element (1-indexed) is the number of subtrees in which 
the maximum distance between any two cities is equal to d.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type

An integer denoting len
A vector<vector<int>> denoting edges


Input Constraints:

1.The length of edges (denoted as len) should be between 2 and 15 inclusive.
2.The length of edges should be len-1.
3.Each edge[i] should have a length of 2.
4.Each node_u and node_v should be in the range [1, len] inclusive.
5.All pairs (node_u, node_v) are distinct.

*/

#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>


    void DfsCount(int index, int parent, int& count, int mask, std::vector<std::vector<int>>& adjacency_list) {
        count++;
        for(int i = 0; i < adjacency_list[index].size(); i++) {
            int neighbor = adjacency_list[index][i];
            if(parent != neighbor && ((mask >> neighbor) & 1)) {
                DfsCount(neighbor, index, count, mask, adjacency_list);
            }
        }
    }

    bool IsMaskValid(int mask, int& index, int num_nodes, std::vector<std::vector<int>>& adjacency_list) {
        index = 0;
        while(!(1 & (mask >> index))) {
            index++;
        }
        
        int expected_count = 0;
        for(int i = 0; i < num_nodes; i++) {
            expected_count += ((mask >> i) & 1);
        }
        
        int actual_count = 0;
        DfsCount(index, -1, actual_count, mask, adjacency_list);
        
        if(actual_count == expected_count && expected_count > 1) {
            return true;
        }
        return false;
    }

    int Dfs(int index, int parent, int& diameter, int mask, std::vector<std::vector<int>>& adjacency_list) {
        std::vector<int> distances;
        for(int i = 0; i < adjacency_list[index].size(); i++) {
            int neighbor = adjacency_list[index][i];
            if(parent != neighbor && ((mask >> neighbor) & 1)) {
                int height = Dfs(neighbor, index, diameter, mask, adjacency_list);
                distances.push_back(1 + height);
            }
        }
        
        int answer = 0;
        if(!distances.empty()) {
            if(distances.size() == 1) {
                diameter = std::max(diameter, distances[0]);
                answer = distances[0];
            } else {
                std::sort(distances.begin(), distances.end());
                int size = distances.size();
                int height = distances[size - 1] + distances[size - 2];
                diameter = std::max(height, diameter);
                answer = distances[size - 1];
            }
        }
        return answer;
    }

    std::vector<int> CountSubgraphsForEachDiameter(int num_nodes, std::vector<std::vector<int>>& edges) {
        if(num_nodes < 2 || num_nodes > 15) {
            throw std::invalid_argument("Invalid number of nodes");
        }
        if(edges.size() != num_nodes - 1) {
            throw std::invalid_argument("Invalid number of edges");
        }
       std::set<std::pair<int, int>> unique_edges;

        for(vector<int>& edge : edges) {

            if(edge.size() != 2) {
                throw std::invalid_argument("Each edge must connect exactly two nodes");
            }
            if(edge[0] < 1 || edge[0] > num_nodes || edge[1] < 1 || edge[1] > num_nodes) {
                throw std::invalid_argument("Edge node indices must be in the range [1, num_nodes]");
            }
            int node_u = std::min(edge[0], edge[1]);
            int node_v = std::max(edge[0], edge[1]);
            if(!unique_edges.insert({node_u, node_v}).second) {
                throw std::invalid_argument("Duplicate edges are not allowed");
            }
        }

        std::vector<std::vector<int>> adjacency_list(num_nodes, std::vector<int>());
        for(int i = 0; i < num_nodes - 1; i++) {
            int node_u = edges[i][0] - 1;
            int node_v = edges[i][1] - 1;
            adjacency_list[node_u].push_back(node_v);
            adjacency_list[node_v].push_back(node_u);
        }

        std::vector<int> result(num_nodes - 1, 0);
        
        for(int mask = 1; mask < (1 << num_nodes); mask++) {
            int index = 0;
            if(IsMaskValid(mask, index, num_nodes, adjacency_list)) {
                int diameter = 0;
                Dfs(index, -1, diameter, mask, adjacency_list);
                if(diameter > 0) {
                    result[diameter - 1]++;
                }
            }
        }
        return result;
    }


int main(){

//TEST
int num_nodes_1 = 3;
std::vector<std::vector<int>> edges_1 = {{1, 2}, {2, 3}};
std::vector<int> expected_1 = {2,1}; 
std::vector<int> result_1 = CountSubgraphsForEachDiameter(num_nodes_1, edges_1);
assert(result_1 == expected_1);
//TEST_END 


//TEST
int num_nodes_2 = 4;
std::vector<std::vector<int>> edges_2 = {{1, 2}, {2, 3}, {3, 4}};
std::vector<int> expected_2 = {3,2,1};
std::vector<int> result_2 = CountSubgraphsForEachDiameter(num_nodes_2, edges_2);
assert(result_2 == expected_2);
//TEST_END 

//TEST
int num_nodes_3 = 5;
std::vector<std::vector<int>> edges_3 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
std::vector<int>expected_3 = {4,3,2,1};
std::vector<int>result_3 = CountSubgraphsForEachDiameter(num_nodes_3, edges_3);
assert(result_3 == expected_3);
//TEST_END 

//TEST
int num_nodes_4 = 6;
std::vector<std::vector<int>> edges_4 = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}};
std::vector<int>expected_4 = {5,26,0,0,0};
std::vector<int>result_4 = CountSubgraphsForEachDiameter(num_nodes_4, edges_4);
assert(result_4 == expected_4);
//TEST_END 

//TEST
int num_nodes_5 = 6;
std::vector<std::vector<int>> edges_5 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}};
std::vector<int>expected_5 = {5,4,3,2,1};
std::vector<int>result_5 = CountSubgraphsForEachDiameter(num_nodes_5, edges_5);
assert(result_5 == expected_5);
//TEST_END 

//TEST
int num_nodes_6 = 7;
std::vector<std::vector<int>> edges_6 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}};
std::vector<int>expected_6 = {6,5,4,3,2,1};
std::vector<int>result_6 = CountSubgraphsForEachDiameter(num_nodes_6, edges_6);
assert(result_6 == expected_6);
//TEST_END 

//TEST
int num_nodes_7 = 8;
std::vector<std::vector<int>> edges_7 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}};
std::vector<int>expected_7 = {7,6,5,4,3,2,1};
std::vector<int>result_7 = CountSubgraphsForEachDiameter(num_nodes_7, edges_7);
assert(result_7 == expected_7);
//TEST_END 

//TEST
int num_nodes_8 = 9;
std::vector<std::vector<int>> edges_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}};
std::vector<int>expected_8 = {8,7,6,5,4,3,2,1};
std::vector<int>result_8 = CountSubgraphsForEachDiameter(num_nodes_8, edges_8);
assert(result_8 == expected_8);
//TEST_END 

//TEST
int num_nodes_9 = 10;
std::vector<std::vector<int>> edges_9 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
std::vector<int>expected_9 = {9,8,7,6,5,4,3,2,1};
std::vector<int>result_9 = CountSubgraphsForEachDiameter(num_nodes_9, edges_9);
assert(result_9 == expected_9);
//TEST_END 

  
//TEST
int num_nodes_10 = 3;
std::vector<std::vector<int>> edges_10 = {{1, 2, 3}};
try {
    CountSubgraphsForEachDiameter(num_nodes_10, edges_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END 

//TEST
int num_nodes_11 = 3;
std::vector<std::vector<int>> edges_11 = {{0, 2}, {2, 3}};
try {
    CountSubgraphsForEachDiameter(num_nodes_11, edges_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END 

//TEST
int num_nodes_12 = 3;
std::vector<std::vector<int>> edges_12 = {{1, 4}, {2, 3}};
try {
    CountSubgraphsForEachDiameter(num_nodes_12, edges_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END 

//TEST
int num_nodes_13 = 3;
std::vector<std::vector<int>> edges_13 = {{1, 2}, {1, 2}};
try {
    CountSubgraphsForEachDiameter(num_nodes_13, edges_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END 

//TEST
int num_nodes_14 = 4;
std::vector<std::vector<int>> edges_14 = {{1, 2}, {2, 3}};
try {
    CountSubgraphsForEachDiameter(num_nodes_14, edges_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END 

//TEST
int num_nodes_15 = 4;
std::vector<std::vector<int>> edges_15 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
try {
    CountSubgraphsForEachDiameter(num_nodes_15, edges_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END 
  


  return 0;
}


