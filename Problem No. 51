/*

Link: https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities/description/

Jimmy was a young programmer, always eager to solve new challenges. One day, he came across a fascinating problem while working on a graph-based puzzle.

Jimmy was given a vector called edges of size len-1, where edges[i] = [node_u, node_v] represents a bidirectional edge between cities node_u and node_v. 
There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities 
from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.

For each d from 1 to len-1, Jimmy needed to find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.

Note : Jimmy knew that the distance between the two cities is the number of edges in the path between them.

Create a C++ function CountSubgraphsForEachDiameter that will return a vector of size len-1 where the dth element (1-indexed) is the number of subtrees in which 
the maximum distance between any two cities is equal to d.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type

An integer denoting len
A vector<vector<int>> denoting edges


Input Constraints:

1.The length of edges (denoted as len) should be between 2 and 15 inclusive.
2.The length of edges should be len-1.
3.Each edge[i] should have a length of 2.
4.Each node_u and node_v should be in the range [1, len] inclusive.
5.All pairs (node_u, node_v) are distinct.

*/



