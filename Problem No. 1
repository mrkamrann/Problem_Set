/*
Once upon a time, there was a girl named Julie who loved playing with vectors. One day, she found herself with a vector filled with numbers ranging from 1 to a maximum value. Let's call this vector "nums" and the maximum value as max_value. Now, Julie had a peculiar desire. She wanted all the numbers in her vector to be the same. But there was a catch. Since Julie is not a very good problem solver she wants you to help her.

For that, you have to create a C++ function MinimumOperations that will help you to determine the minimum number of operations to make all elements in the vector equal, where each element of the vector is an integer from 1 to max_value.

You can perform the following operation any number of times:

Choose three integers start, end, and val such that 1 ≤ start ≤ end ≤ vector_length and 1 ≤ val ≤ max_value.
Ensure val is not present in the subsegment nums[start], nums[start+1], ..., nums[end].
Replace every element in the subsegment nums[start], nums[start+1], ..., nums[end] with val.

Your goal is to make all elements in the vector equal. Determine the minimum number of operations required to achieve this.


Input Types:

An integer representing the length of the vector (vector_length).
An integer representing the maximum value in the vector (max_value).
A vector<int> containing the elements of the vector (nums).

The Input Constraints are as follows:

The length of the vector (vector_length) should be at least 1 and at most 100.
The maximum value in the vector (max_value) should be at least 1 and at most vector_length.
Each element in the vector (nums_i) should be between 1 and max_value inclusive.

The function should return an integer denoting the minimum number of operations you have to perform.
*/


//CODE

#include <vector>
#include <stdexcept>
#include <cassert>
#include <algorithm>
#include <climits>


long long MinimumOperations(int vector_length, int max_value, std::vector<int>& nums) {
 
    if (vector_length < 1 || vector_length > 100 || max_value < 1 || max_value > vector_length) {
        throw std::invalid_argument("Invalid input parameters.");
    }
    for (int i = 0; i < vector_length; i++) {
        if (nums[i] < 1 || nums[i] > max_value) {
            throw std::invalid_argument("Array elements must be between 1 and max_value inclusive.");
        }
    }
   
    std::vector<std::vector<std::vector<long long>>> dp_arr_1(vector_length + 1, std::vector<std::vector<long long>>(vector_length + 1, std::vector<long long>(max_value + 1, LLONG_MAX / 2)));
    std::vector<std::vector<std::vector<long long>>> dp_arr_2(vector_length + 1, std::vector<std::vector<long long>>(vector_length + 1, std::vector<long long>(max_value + 1, LLONG_MAX / 2)));


    for (int i = 0; i < vector_length; i++) {
        for (int j = 1; j <= max_value; j++) {
            if (nums[i] == j) {
                dp_arr_2[i][i + 1][j] = 1;
                dp_arr_1[i][i + 1][j] = 0;
            } else {
                dp_arr_2[i][i + 1][j] = 0;
                dp_arr_1[i][i + 1][j] = 1;
            }
        }
    }


    for (int size = 2; size <= vector_length; size++) {
        for (int left = 0; left < vector_length; left++) {
            int right = left + size;
            if (right > vector_length) continue;
            for (int mid = left + 1; mid < right; ++mid) {
                for (int val = 1; val <= max_value; val++) {
                    dp_arr_2[left][right][val] = std::min(dp_arr_2[left][right][val], dp_arr_2[left][mid][val] + dp_arr_2[mid][right][val]);
                    dp_arr_1[left][right][val] = std::min(dp_arr_1[left][right][val], dp_arr_1[left][mid][val] + dp_arr_1[mid][right][val]);
                }
            }
            for (int val = 1; val <= max_value; val++) {
                dp_arr_1[left][right][val] = std::min(dp_arr_1[left][right][val], dp_arr_2[left][right][val] + 1);
                for (int j = 1; j <= max_value; j++) {
                    if (j != val) dp_arr_2[left][right][j] = std::min(dp_arr_2[left][right][j], dp_arr_1[left][right][val]);
                }
            }
        }
    }


    long long minimum_operations = LLONG_MAX;
    for (int i = 1; i <= max_value; i++) {
        minimum_operations = std::min(minimum_operations, dp_arr_1[0][vector_length][i]);
    }
    return minimum_operations;
}




int main() {
   
    //TEST
 
    int vector_length_1 = 12;
    int max_value_1 = 3;
    std::vector<int> nums_1 = {3, 1, 3, 1, 2, 1, 1, 2, 3, 1, 1, 3};
    long long expected_1 = 2;
    long long result_1 = MinimumOperations(vector_length_1, max_value_1, nums_1);
 
    assert(result_1 == expected_1);


    //TEST_END
 
    //TEST


int vector_length_2 = 14;
int max_value_2 = 3;
std::vector<int> nums_2 = {2, 1, 2, 3, 3, 1, 3, 3, 3, 3, 2, 3, 1, 1};
long long expected_2 = 3;
long long result_2 = MinimumOperations(vector_length_2, max_value_2, nums_2);
assert(result_2 == expected_2);


     //TEST_END
 
 
 //TEST

int vector_length_3 = 15;
int max_value_3 = 3;
std::vector<int> nums_3 = {2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 3, 3, 3, 3, 1};
long long expected_3 = 5;
long long result_3 = MinimumOperations(vector_length_3, max_value_3, nums_3);
assert(result_3 == expected_3);


   //TEST_END
 
  //TEST

int vector_length_4 = 16;
int max_value_4 = 3;
std::vector<int> nums_4 = {1, 3, 1, 1, 3, 2, 2, 3, 2, 2, 1, 2, 1, 1, 2, 2};
long long expected_4 = 4;
long long result_4 = MinimumOperations(vector_length_4, max_value_4, nums_4);
assert(result_4 == expected_4);


  //TEST_END
 
 //TEST

int vector_length_5 = 15;
int max_value_5 = 3;
std::vector<int> nums_5 = {3, 2, 1, 2, 2, 3, 3, 3, 1, 2, 2, 3, 2, 3, 1};
long long expected_5 = 5;
long long result_5 = MinimumOperations(vector_length_5, max_value_5, nums_5);
assert(result_5 == expected_5);
 
 //TEST_END
 
 
 
  //TEST
 
    int vector_length_6 = 5;
    int max_value_6 = -3;
    std::vector<int> nums_6 = {-6, -12, -3, -4, -5};
   
  try {
    MinimumOperations(vector_length_6, max_value_6, nums_6);
    assert(false);
}
  catch (const std::invalid_argument& e) {
    assert(true);
}
   //TEST_END
 
 
 
 
   //TEST
 
 
    int vector_length_7 = -5;
    int max_value_7 = 3;
    std::vector<int> nums_7 = {1, 2, 3, 4, 5};
   
  try {
    MinimumOperations(vector_length_7, max_value_7, nums_7);
    assert(false);
}
 
  catch (const std::invalid_argument& e) {
    assert(true);
}
  //TEST_END


 
 
   //TEST


    int vector_length_8 = 0;
    int max_value_8 = 3;
    std::vector<int> nums_8 = {1, 2, 3};
 
    try{
     
    MinimumOperations(vector_length_8, max_value_8, nums_8);
    assert(false);
}
 
  catch (const std::invalid_argument& e) {


    assert(true);
}
 
 
 //TEST_END
 
 
//TEST


    int vector_length_9 = 101;
    int max_value_9 = 3;
    std::vector<int> nums_9 = {1, 2, 3};
    try {
      MinimumOperations(vector_length_9, max_value_9, nums_9);
    assert(false);
}
  catch (const std::invalid_argument& e) {
    assert(true);
}


 
  //TEST_END
 
 
 //TEST
 


    int vector_length_10 = 5;
    int max_value_10 = 0;
    std::vector<int> nums_10 = {1, 2, 3, 4, 5};
    try {
      MinimumOperations(vector_length_10, max_value_10, nums_10);
    assert(false);
}
  catch (const std::invalid_argument& e) {
    assert(true);
}

 //TEST_END
 
   
 
 
//TEST
 


    int vector_length_11 = 5;
    int max_value_11 = 6;
    std::vector<int> nums_11 = {1, 2, 3, 4, 5};
    try {
    MinimumOperations(vector_length_11, max_value_11, nums_11);
    assert(false);
}
  catch (const std::invalid_argument& e) {
    assert(true);
}


 
  //TEST_END
 
 
//TEST


    int vector_length_12 = 5;
    int max_value_12 = 5;
    std::vector<int> nums_12 = {1, 2, 0, 4, 5};
    try {
    MinimumOperations(vector_length_12, max_value_12, nums_12);
    assert(false);
}
 
  catch (const std::invalid_argument& e) {
    assert(true);
}
 
 
 //TEST_END




 
   
    return 0;
}


