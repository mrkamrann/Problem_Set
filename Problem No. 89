/*
Link: https://leetcode.com/problems/abbreviating-the-product-of-a-range/description/

Julie is given two positive integers left and right with left <= right. Julie needs to calculate the product of all integers in the inclusive range [left, right].

Since the product may be very large, Julie will abbreviate it following these steps:

Julie will count all trailing zeros in the product and remove them. Let us denote this count as c.

For example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.
Julie will denote the remaining number of digits in the product as d. If d > 10, then she will express the product as <pre>...<suf> where <pre> denotes 
the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, she will keep it unchanged.

For example, Julie will express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.
Finally, Julie will represent the product as a string "<pre>...<suf>ec".

For example, 12345678987600000 will be represented as "12345...89876e5".

Julie needs to return a string denoting the abbreviated product of all integers in the inclusive range [left, right].

Create a C++ function FindAbbreviatedProduct that will return a string denoting the abbreviated product of all integers.

Use appropriate error handling using the stdexcept library for the invalid test cases.


Input Type

An Integer denoting left
An Integer denoting right

Input Constraints

The value of left and right should be in the range [1, 10000] both inclusive
The value of left should be less than equal to right


*/

#include <iostream>
#include <cmath>
#include <stdexcept>
#include <cassert>


    std::string FindAbbreviatedProduct(int left, int right) {
      
        if (left < 1 || right < 1 || left > 10000 || right > 10000 || left > right) {
            throw std::invalid_argument("Invalid input values.");
        }

        double upper_product = 1;
        long long lower_product = 1;
        long long offset = 1e12;
        long long cut_offset = 1e5;
        double log_product = 0.0;
        int trailing_zeros = 0;

        for (int i = left; i <= right; ++i) {
            log_product += std::log10(i);
            upper_product *= i;
            lower_product *= i;

            while (upper_product >= offset) {
                upper_product /= 10;
            }

            while (lower_product % 10 == 0) {
                lower_product /= 10;
                ++trailing_zeros;
            }

            lower_product %= offset;
        }

        int digit_length = static_cast<int>(log_product) + 1 - trailing_zeros;

        while (upper_product >= cut_offset) {
            upper_product /= 10;
        }

        lower_product %= cut_offset;
        int upper_int = static_cast<int>(upper_product);

        if (digit_length <= 10) {
            std::string result(digit_length, '0');
            std::string upper_str = std::to_string(upper_int);
            std::string lower_str = std::to_string(lower_product);

            for (std::size_t i = 0; i < upper_str.length() && digit_length > 0; ++i, --digit_length) {
                result[i] = upper_str[i];
            }

            for (int k = 1; !lower_str.empty() && digit_length > 0; --digit_length, ++k) {
                result[result.length() - k] = lower_str.back();
                lower_str.pop_back();
            }

            return result + "e" + std::to_string(trailing_zeros);
        } else {
            std::string result = std::to_string(lower_product);
            return std::to_string(upper_int) + "..." + std::string(5 - result.size(), '0') + result + "e" + std::to_string(trailing_zeros);
        }
    }

int main(){
    
  //TEST
  
  int left_1 = 1;
  int right_1 = 4;
  std::string expected_1 = "24e0";
  std::string result_1 = FindAbbreviatedProduct(left_1, right_1);
  assert(result_1 == expected_1);
  
  //TEST_END
  
  
//TEST

int left_2 = 1;
int right_2 = 2;
std::string expected_2 = "2e0";
std::string result_2 = FindAbbreviatedProduct(left_2, right_2);
assert(result_2 == expected_2);

//TEST_END

//TEST

int left_3 = 1;
int right_3 = 3;
std::string expected_3 = "6e0";
std::string result_3 = FindAbbreviatedProduct(left_3, right_3);
assert(result_3 == expected_3);

//TEST_END

//TEST

int left_4 = 1;
int right_4 = 4;
std::string expected_4 = "24e0";
std::string result_4 = FindAbbreviatedProduct(left_4, right_4);
assert(result_4 == expected_4);

//TEST_END

//TEST

int left_5 = 1;
int right_5 = 5;
std::string expected_5 = "12e1";
std::string result_5 = FindAbbreviatedProduct(left_5, right_5);
assert(result_5 == expected_5);

//TEST_END

//TEST

int left_6 = 1;
int right_6 = 6;
std::string expected_6 = "72e1";
std::string result_6 = FindAbbreviatedProduct(left_6, right_6);
assert(result_6 == expected_6);

//TEST_END

//TEST

int left_7 = 1;
int right_7 = 7;
std::string expected_7 = "504e1";
std::string result_7 = FindAbbreviatedProduct(left_7, right_7);
assert(result_7 == expected_7);

//TEST_END

//TEST

int left_8 = 1;
int right_8 = 8;
std::string expected_8 = "4032e1";
std::string result_8 = FindAbbreviatedProduct(left_8, right_8);
assert(result_8 == expected_8);

//TEST_END

//TEST

int left_9 = 1;
int right_9 = 9;
std::string expected_9 = "36288e1";
std::string result_9 = FindAbbreviatedProduct(left_9, right_9);
assert(result_9 == expected_9);

//TEST_END
  
//TEST

int left_10 = 56565;
int right_10 = 10;
try {
    FindAbbreviatedProduct(left_10, right_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

int left_11 = 1;
int right_11 = 999999999;
try {
    FindAbbreviatedProduct(left_11, right_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

int left_12 = 99999999;
int right_12 = 12;
try {
    FindAbbreviatedProduct(left_12, right_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

int left_13 = 1;
int right_13 = -5456413;
try {
    FindAbbreviatedProduct(left_13, right_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

int left_14 = -999999;
int right_14 = 23;
try {
    FindAbbreviatedProduct(left_14, right_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

int left_15 = 99;
int right_15 = 15;
try {
    FindAbbreviatedProduct(left_15, right_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
  
  return 0;
  
 
}




