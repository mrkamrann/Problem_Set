/*
Link : https://codeforces.com/problemset/problem/508/D

While Julie's dad was at work, little girl Julie decided to play with dad's password to his secret database. Dad's password is a string consisting of 
len + 2 characters. She has written all the possible len three-letter continuous substrings of the password on pieces of paper, one for each piece of paper, 
and threw the password out. Each three-letter substring was written the number of times it occurred in the password. Thus, Julie ended up with len pieces of paper.

Then Julie realized that dad will be upset to learn about her game and decided to restore the password or at least any string corresponding to the final set of 
three-letter strings. You have to help her in this difficult task. We know that dad's password consisted of lowercase and uppercase letters of the Latin alphabet
and digits. Uppercase and lowercase letters of the Latin alphabet are considered distinct.

Create a C++ Function JulieAndPassword that will return a boolean denoting if she can crack the password or not.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

A vector<string> denoting substrings containing len three-letter substrings of dad's password.

Input Constraints:

The value of len should be at least 1 and at most 2 * 10^5 inclusive.
Each value of substrings[i] should be a string of length 3 consisting of lowercase or uppercase Latin letters or digits.

*/

#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>
#include <stdexcept>
#include <cassert>

void DepthFirstSearch(int index, std::unordered_map<int, std::vector<int>>& adjacency_list, std::string& result) {
  
        while (!adjacency_list[index].empty()) {
            int next_index = adjacency_list[index].back();
            adjacency_list[index].pop_back();
            DepthFirstSearch(next_index, adjacency_list, result);
        }
        result += static_cast<char>(index % 256);
    }

    bool JulieAndPassword(std::vector<std::string>& substrings) {
      
        if (substrings.size() < 1 || substrings.size() > 200000) {
            throw std::invalid_argument("The value of len should be at least 1 and at most 2 * 10^5 inclusive.");
        }

        for (const std::string& substring : substrings) {
            if (substring.size() != 3) {
                throw std::invalid_argument("Each value of substrings[i] should be a string of length 3.");
            }
            for (char character : substring) {
                if (!std::isalnum(character)) {
                    throw std::invalid_argument("Substrings should only contain lowercase or uppercase Latin letters or digits.");
                }
            }
        }

        int len = substrings.size();
        std::unordered_map<int, std::vector<int>> adjacency_list;
        std::unordered_map<int, int> node_count;
        std::string result;

        for (const std::string& substring : substrings) {
            int start = static_cast<unsigned char>(substring[0]) * 256 + static_cast<unsigned char>(substring[1]);
            int end = static_cast<unsigned char>(substring[1]) * 256 + static_cast<unsigned char>(substring[2]);
            adjacency_list[start].push_back(end);
            node_count[start]++;
            node_count[end]--;
        }

        int positive_count = 0;
        int start_node = -1;
        for (const std::pair<const int, int>& node : node_count) {
            if (node.second >= 1) {
                positive_count++;
                start_node = node.first;
            }
        }

        if (start_node == -1) {
            for (const std::pair<const int, std::vector<int>>& node : adjacency_list) {
                if (!node.second.empty()) {
                    start_node = node.first;
                    break;
                }
            }
        }

        if (node_count[start_node] > 1 || positive_count > 1) {
            return false;
        }

        DepthFirstSearch(start_node, adjacency_list, result);
        result += static_cast<char>(start_node / 256);

        return result.size() == static_cast<size_t>(len + 2);
    }


int main() {
   
//TEST
std::vector<std::string> substrings_1 = {"aca", "aba", "aba", "cab", "bac"};
bool expected_1 = true;
bool result_1 = JulieAndPassword(substrings_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<std::string> substrings_2 = {"ABC", "XYZ", "123"};
bool expected_2 = false;
bool result_2 = JulieAndPassword(substrings_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<std::string> substrings_3 = {"aaa", "aaa", "aaa", "aaa", "aaa", "aaa", "aaa"};
bool expected_3 = true;
bool result_3 = JulieAndPassword(substrings_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<std::string> substrings_4 = {"abc"};
bool expected_4 = true;
bool result_4 = JulieAndPassword(substrings_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<std::string> substrings_5 = {"111", "222", "333"};
bool expected_5 = false;
bool result_5 = JulieAndPassword(substrings_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<std::string> substrings_6 = {"Ab1", "Cd2", "Ef3"};
bool expected_6 = false;
bool result_6 = JulieAndPassword(substrings_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<std::string> substrings_7 = {"aaa", "aaa", "aab"};
bool expected_7 = true;
bool result_7 = JulieAndPassword(substrings_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<std::string> substrings_8 = {"123", "456", "789"};
bool expected_8 = false;
bool result_8 = JulieAndPassword(substrings_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<std::string> substrings_9 = {"123", "234", "345", "456", "567"};
bool expected_9 = true;
bool result_9 = JulieAndPassword(substrings_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<std::string> substrings_10 = {};
try {
    JulieAndPassword(substrings_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_11 = {"ab"};
try {
    JulieAndPassword(substrings_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_12 = {"abcdefghijabcdefghijabcdefghijabcdefghijabcdefghij"};
try {
    JulieAndPassword(substrings_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_13 = {"ab#", "cd$", "ef%"};
try {
    JulieAndPassword(substrings_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_14 = {"12", "34", "56"};
try {
    JulieAndPassword(substrings_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_15 = {"abc", "defg", "hij"};
try {
    JulieAndPassword(substrings_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_16 = {"", "bcd", "efg"};
try {
    JulieAndPassword(substrings_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_17(1e6, "abc");
try {
    JulieAndPassword(substrings_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_18 = {"abc", "def", ""};
try {
    JulieAndPassword(substrings_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> substrings_19 = {"abc", "def*", "ghi"};
try {
    JulieAndPassword(substrings_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
