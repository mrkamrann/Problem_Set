/*
Link: https://leetcode.com/problems/number-of-pairs-satisfying-inequality/description/

Jimmy loves solving puzzles, especially those involving numbers. One day, he stumbled upon a challenging problem involving two 0-indexed integer vectors,
nums1 and nums2, each with a size of len. He also had an integer called diff.

Jimmy's mission was to find how many pairs of indices (i, j) satisfy the following conditions:

0 ≤ i < j ≤ len−1
nums1[i] - nums1[j] <= nums2[i] - nums2[j] + diff
Determined to solve the puzzle, Jimmy sat down with his favorite snack and a cup of hot chocolate, ready to dive into the world of numbers. 
Can you help Jimmy determine the number of pairs that meet these criteria?

Create a C++ function NumberOfPairs that will return an integer denoting the number of pairs.
Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type:

vector<int> denoting nums1 
vector<int> denoting nums2 
An integer denoting diff


Input Constraints:

1.The length(len) of nums1 and nums2 should be exactly equal and should be at least 2 and at most 10^5 inclusive.
2.Each value of nums1[i] and nums2[i] should be in the range [-10^4, 10^4] inclusive.
3.The value of diff should be in the range [-10^4, 10^4] inclusive.

*/


#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

class MinimumSpanningTree {
private:
    int len;
    std::vector<std::vector<int>> tree;

    std::vector<int> Merge(std::vector<int>& left_vector, std::vector<int>& right_vector) {
        int left_size = left_vector.size(), right_size = right_vector.size();
        int left_index = 0, right_index = 0, merge_index = 0;
        std::vector<int> merged_vector(left_size + right_size);

        while (left_index < left_size && right_index < right_size) {
            if (left_vector[left_index] < right_vector[right_index]) 
                merged_vector[merge_index++] = left_vector[left_index++];
            else 
                merged_vector[merge_index++] = right_vector[right_index++];
        }

        while (left_index < left_size) 
            merged_vector[merge_index++] = left_vector[left_index++];
        while (right_index < right_size) 
            merged_vector[merge_index++] = right_vector[right_index++];

        return merged_vector;
    }

    void Build(int left, int right, int index, std::vector<int>& values) {
        if (left == right) {
            tree[index] = {values[left]};
            return;
        }

        int middle = (left + right) >> 1;
        Build(left, middle, 2 * index + 1, values);
        Build(middle + 1, right, 2 * index + 2, values);
        tree[index] = Merge(tree[2 * index + 1], tree[2 * index + 2]);
    }

    int Query(int query_left, int query_right, int element, int left, int right, int index) {
        if (right < query_left || left > query_right) 
            return 0;
        if (left >= query_left && query_right >= right) {
            int lower_bound_index = std::lower_bound(tree[index].begin(), tree[index].end(), element) - tree[index].begin();
            return tree[index].size() - lower_bound_index;
        }

        int middle = (left + right) >> 1;
        int left_query = Query(query_left, query_right, element, left, middle, 2 * index + 1);
        int right_query = Query(query_left, query_right, element, middle + 1, right, 2 * index + 2);

        return left_query + right_query;
    }

public:
    MinimumSpanningTree(int len, std::vector<int>& values) {
        this->len = len;
        tree.resize(4 * len);
        Build(0, len - 1, 0, values);
    }

    int Query(int query_left, int query_right, int element) {
        return Query(query_left, query_right, element, 0, len - 1, 0);
    }
};


    long long NumberOfPairs(std::vector<int>& nums1, std::vector<int>& nums2, int diff) {
      
       if (nums1.size() != nums2.size()) 
            throw std::invalid_argument("The lengths of nums1 and nums2 must be equal.");
        if (nums1.size() < 2 || nums1.size() > 100000) 
            throw std::invalid_argument("The length of nums1 and nums2 must be at least 2 and at most 100000.");
        if (diff < -10000 || diff > 10000) 
            throw std::invalid_argument("The value of diff must be in the range [-10000, 10000].");

        for (int value : nums1) {
            if (value < -10000 || value > 10000) 
                throw std::invalid_argument("Each value of nums1 must be in the range [-10000, 10000].");
        }

        for (int value : nums2) {
            if (value < -10000 || value > 10000) 
                throw std::invalid_argument("Each value of nums2 must be in the range [-10000, 10000].");
        }

        int len = nums1.size();
        std::vector<int> difference_array(len), extended_difference_array(len);
        for (int index = 0; index < len; ++index) {
            difference_array[index] = nums1[index] - nums2[index];
            extended_difference_array[index] = diff + difference_array[index];
        }

        MinimumSpanningTree minimum_spanning_tree(len, extended_difference_array);
        long long count = 0;
        for (int index = 0; index < len; ++index) {
            int result = minimum_spanning_tree.Query(index + 1, len - 1, difference_array[index]);
            count += result;
        }
        return count;
    }


int main(){

// TEST
std::vector<int> nums1_1 = {1, 2, 3};
std::vector<int> nums2_1 = {2, 3, 4};
int diff_1 = 1;
int expected_1 = 3;
int result_1 = NumberOfPairs(nums1_1, nums2_1, diff_1);
assert(expected_1 == result_1);
// TEST_END

// TEST
std::vector<int> nums1_2 = {-10000, 0, 10000};
std::vector<int> nums2_2 = {10000, 0, -10000};
int diff_2 = 2000;
int expected_2 = 3;
int result_2 = NumberOfPairs(nums1_2, nums2_2, diff_2);
assert(expected_2 == result_2);
// TEST_END

// TEST
std::vector<int> nums1_3 = {5, 1, 2, 3};
std::vector<int> nums2_3 = {4, 4, 1, 5};
int diff_3 = -1;
int expected_3 = 2;
int result_3 = NumberOfPairs(nums1_3, nums2_3, diff_3);
assert(expected_3 == result_3);
// TEST_END

// TEST
std::vector<int> nums1_4 = {0, 0, 0, 0};
std::vector<int> nums2_4 = {0, 0, 0, 0};
int diff_4 = 0;
int expected_4 = 6;
int result_4 = NumberOfPairs(nums1_4, nums2_4, diff_4);
assert(expected_4 == result_4);
// TEST_END

// TEST
std::vector<int> nums1_5 = {10, 20, 30, 40, 50};
std::vector<int> nums2_5 = {9, 19, 29, 39, 49};
int diff_5 = 1;
int expected_5 = 10;
int result_5 = NumberOfPairs(nums1_5, nums2_5, diff_5);
assert(expected_5 == result_5);
// TEST_END

// TEST
std::vector<int> nums1_6 = {3, 1, 4, 1, 5};
std::vector<int> nums2_6 = {1, 5, 9, 2, 6};
int diff_6 = 3;
int expected_6 = 8;
int result_6 = NumberOfPairs(nums1_6, nums2_6, diff_6);
assert(expected_6 == result_6);
// TEST_END

// TEST
std::vector<int> nums1_7 = {-100, -200, -300};
std::vector<int> nums2_7 = {-300, -200, -100};
int diff_7 = -200;
int expected_7 = 0;
int result_7 = NumberOfPairs(nums1_7, nums2_7, diff_7);
assert(expected_7 == result_7);
// TEST_END

// TEST
std::vector<int> nums1_8 = {5, 5, 5, 5};
std::vector<int> nums2_8 = {1, 1, 1, 1};
int diff_8 = 4;
int expected_8 = 6;
int result_8 = NumberOfPairs(nums1_8, nums2_8, diff_8);
assert(expected_8 == result_8);
// TEST_END

// TEST
std::vector<int> nums1_9 = {10000, -10000, 10000, -10000};
std::vector<int> nums2_9 = {-10000, 10000, -10000, 10000};
int diff_9 = 0;
int expected_9 = 3;
int result_9 = NumberOfPairs(nums1_9, nums2_9, diff_9);
assert(expected_9 == result_9);
// TEST_END

// TEST
std::vector<int> nums1_10 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
std::vector<int> nums2_10 = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
int diff_10 = 9;
int expected_10 = 45;
int result_10 = NumberOfPairs(nums1_10, nums2_10, diff_10);
assert(expected_10 == result_10);
// TEST_END

// TEST
std::vector<int> nums1_11 = {1};
std::vector<int> nums2_11 = {2};
int diff_11 = 1;
try {
    NumberOfPairs(nums1_11, nums2_11, diff_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums1_12(100001, 1); 
std::vector<int> nums2_12(100001, 1);
int diff_12 = 1;
try {
    NumberOfPairs(nums1_12, nums2_12, diff_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums1_13 = {1, 2, 3};
std::vector<int> nums2_13 = {1, 2}; 
int diff_13 = 1;
try {
    NumberOfPairs(nums1_13, nums2_13, diff_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums1_14 = {-10001, 2, 3};
std::vector<int> nums2_14 = {1, 2, 3};
int diff_14 = 1;
try {
    NumberOfPairs(nums1_14, nums2_14, diff_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums1_15 = {1, 2, 3};
std::vector<int> nums2_15 = {1, 10001, 3}; 
int diff_15 = 1;
try {
    NumberOfPairs(nums1_15, nums2_15, diff_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums1_16 = {1, 2, 3};
std::vector<int> nums2_16 = {1, 2, 3};
int diff_16 = 10001;
try {
    NumberOfPairs(nums1_16, nums2_16, diff_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums1_17 = {1, 2, 3};
std::vector<int> nums2_17 = {1, 2, 3};
int diff_17 = -10001;
try {
    NumberOfPairs(nums1_17, nums2_17, diff_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
  return 0;
}

