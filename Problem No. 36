/*
Link : https://leetcode.com/problems/handling-sum-queries-after-update/description/

Today John has got two vectors, while he is playing with the 2 vectors, to check his IQ his father asked him to do some queries on both the vectors. 

He is provided with two 0-indexed vectors nums_1 and nums_2, and a 2D vector queries containing queries by his father of three types:

For a query of type 1, queries[i] = [1, left, right]. Flip the values from 0 to 1 and from 1 to 0 in nums_1 from index left to index right (inclusive). Both left and right are 0-indexed.
For a query of type 2, queries[i] = [2, val, 0]. For every index 0 <= i < len(nums_1), update nums_2[i] = nums_2[i] + nums_1[i] * val.
For a query of type 3, queries[i] = [3, 0, 0]. Calculate the sum of all elements in nums_2.

Help John create a C++ function HandleQuery that will return a vector containing all the answers to the type 3 queries.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Types:

vector<int> denoting the vector nums_1
vector<int> denoting the vector nums_2
vector<vector<int>> denoting the 2D vector queries



Input Constraints:


1.The length of nums_1 and nums_2 should be at least 1 and at most 10^5.
2.nums_1 and nums_2 should have the same length.
3.The length of queries should be at least 1 and at most 10^5.
4.Each element in queries should consist of exactly 3 integers.
5.For each query, left and right should be within the range from 0 to the length of nums_1 - 1, and left should be less than or equal to right.
6.val should be within the range from 0 to 10^6.
7.Each element in nums_1 should be within the range from 0 to 1.
8.Each element in nums_2 should be within the range from 0 to 10^9.

*/
#include <vector>
#include <numeric>
#include <stdexcept>
#include <iostream>
#include <cassert>

class SegmentTree {
private:
    std::vector<long long> segment_tree;
    std::vector<bool> lazy_propagation;

    void PropagateDown(long long index, long long low, long long high) {
        if (lazy_propagation[index]) {
            segment_tree[index] = (high - low + 1) - segment_tree[index];
            if (low != high) {
                lazy_propagation[2 * index + 1] = !lazy_propagation[2 * index + 1];
                lazy_propagation[2 * index + 2] = !lazy_propagation[2 * index + 2];
            }
            lazy_propagation[index] = false;
        }
    }

    void BuildTree(long long index, long long low, long long high, const std::vector<int>& input_array) {
        if (low == high) {
            segment_tree[index] = input_array[low];
            return;
        }
        long long middle = low + (high - low) / 2;
        BuildTree(2 * index + 1, low, middle, input_array);
        BuildTree(2 * index + 2, middle + 1, high, input_array);
        segment_tree[index] = segment_tree[2 * index + 1] + segment_tree[2 * index + 2];
    }

public:
    SegmentTree(const std::vector<int>& input_array) {
        long long array_size = input_array.size();
        segment_tree.resize(4 * array_size + 1);
        lazy_propagation.resize(4 * array_size + 1, false);
        BuildTree(0, 0, array_size - 1, input_array);
    }

    void RangeUpdate(long long index, long long low, long long high, long long range_start, long long range_end) {
        if (low > high) {
            return;
        }
        PropagateDown(index, low, high);
        if (low > range_end || high < range_start) {
            return;
        }
        if (low >= range_start && high <= range_end) {
            segment_tree[index] = (high - low + 1) - segment_tree[index];
            if (low != high) {
                lazy_propagation[2 * index + 1] = !lazy_propagation[2 * index + 1];
                lazy_propagation[2 * index + 2] = !lazy_propagation[2 * index + 2];
            }
            return;
        }
        long long middle = (low + high) >> 1;
        RangeUpdate(2 * index + 1, low, middle, range_start, range_end);
        RangeUpdate(2 * index + 2, middle + 1, high, range_start, range_end);
        segment_tree[index] = segment_tree[2 * index + 1] + segment_tree[2 * index + 2];
    }

    long long Query(long long index, long long low, long long high, long long query_start, long long query_end) {
        if (low > query_end || high < query_start) {
            return 0;
        }
        PropagateDown(index, low, high);
        if (low >= query_start && high <= query_end) {
            return segment_tree[index];
        }
        long long middle = (low + high) >> 1;
        long long left_result = Query(2 * index + 1, low, middle, query_start, query_end);
        long long right_result = Query(2 * index + 2, middle + 1, high, query_start, query_end);
        return left_result + right_result;
    }
};

    std::vector<long long> HandleQuery(std::vector<int>& nums_1, std::vector<int>& nums_2, std::vector<std::vector<int>>& queries) {
   
        if (nums_1.empty() || nums_2.empty() || queries.empty()) {
            throw std::invalid_argument("Input vectors must not be empty");
        }
        
        if (nums_1.size() > 100000 || nums_2.size() > 100000) {
            throw std::invalid_argument("The length of nums_1 and nums_2 should be at most 10^5");
        }
        
        if (nums_1.size() != nums_2.size()) {
            throw std::invalid_argument("nums_1 and nums_2 should have the same length");
        }
        
        if (queries.size() > 100000) {
            throw std::invalid_argument("The length of queries should be at most 10^5");
        }
        
        for (const std::vector<int>& query : queries) {
            if (query.size() != 3) {
                throw std::invalid_argument("Each query should consist of exactly 3 integers");
            }
            if(query[0] != 1 && query[0]!= 2 && query[0] != 3)
            {
              throw std::invalid_argument("Query indices should be within the range");
            }
            long long query_start = query[1];
            long long query_end = query[2];
            if (query[0]==1 && (query_start < 0 || query_end >= nums_1.size() || query_start > query_end)) {
                throw std::invalid_argument("Query indices should be within the range");
            }
            
              if (query[0]==2 && (query_start < 0 || query_end > 1e6 )) {
                throw std::invalid_argument("Query indices should be within the range");
            }
          
             if (query[0]==3 && (query_start != 0 || query_end !=0 )) {
                throw std::invalid_argument("Query indices should be within the range");
            }
            
            
        }
        
        for (int num : nums_1) {
            if (num < 0 || num > 1) {
                throw std::invalid_argument("Each element in nums_1 should be within the range from 0 to 1");
            }
        }
        
        for (int num : nums_2) {
            if (num < 0 || num > 1000000000) {
                throw std::invalid_argument("Each element in nums_2 should be within the range from 0 to 10^9");
            }
        }
        
        SegmentTree segment_tree(nums_1);
        long long total_sum = std::accumulate(nums_2.begin(), nums_2.end(), 0LL);
        std::vector<long long> results;

        for (const std::vector<int>& query : queries) {
            long long query_type = query[0];
            long long start_index = query[1];
            long long end_index = query[2];

            if (query_type == 1) {
                segment_tree.RangeUpdate(0, 0, nums_1.size() - 1, start_index, end_index);
            } else if (query_type == 2) {
                long long segment_sum = segment_tree.Query(0, 0, nums_1.size() - 1, 0, nums_1.size() - 1);
                total_sum += (1LL * start_index * segment_sum);
            } else if (query_type == 3) {
                results.push_back(total_sum);
            }
        }
        return results;
    }


int main(){
  
  //TEST
  std::vector<int>nums_1_1 = {1,0,1};
  std::vector<int>nums_2_1 = {0,0,0};
  std::vector<std::vector<int>>queries_1 = {{1,1,1},{2,1,0},{3,0,0}};
  std::vector<long long> expected_1 = {3};
  std::vector<long long> result_1 = HandleQuery(nums_1_1, nums_2_1, queries_1);
  assert(expected_1 == result_1);
  //TEST_END
  
  // TEST 
std::vector<int>nums_1_2 = {1, 1, 0, 0, 1};
std::vector<int>nums_2_2 = {5, 6, 7, 8, 9};
std::vector<std::vector<int>>queries_2 = {{1, 0, 4}, {2, 1, 1}, {3, 0, 0}};
std::vector<long long> expected_2 = {37};
std::vector<long long> result_2 = HandleQuery(nums_1_2, nums_2_2, queries_2);
assert(expected_2 == result_2);
// TEST_END

// TEST 
std::vector<int>nums_1_3 = {0, 1, 1, 0, 0, 1, 1};
std::vector<int>nums_2_3 = {10, 20, 30, 40, 50, 60, 70};
std::vector<std::vector<int>>queries_3 = {{1, 2, 5}, {2, 0, 1}, {3, 0, 0}};
std::vector<long long> expected_3 = {280};
std::vector<long long> result_3 = HandleQuery(nums_1_3, nums_2_3, queries_3);
assert(expected_3 == result_3);
// TEST_END

// TEST 
std::vector<int>nums_1_4 = {1, 1, 1, 1};
std::vector<int>nums_2_4 = {100, 200, 300, 400};
std::vector<std::vector<int>>queries_4 = {{3, 0, 0}};
std::vector<long long> expected_4 = {1000};
std::vector<long long> result_4 = HandleQuery(nums_1_4, nums_2_4, queries_4);
assert(expected_4 == result_4);
// TEST_END

// TEST 
std::vector<int>nums_1_5 = {0, 0, 0, 0};
std::vector<int>nums_2_5 = {1000, 2000, 3000, 4000};
std::vector<std::vector<int>>queries_5 = {{3, 0, 0}};
std::vector<long long> expected_5 = {10000};
std::vector<long long> result_5 = HandleQuery(nums_1_5, nums_2_5, queries_5);
assert(expected_5 == result_5);
// TEST_END

// TEST 
std::vector<int>nums_1_6 = {1, 0, 1, 0, 1, 0};
std::vector<int>nums_2_6 = {10, 20, 30, 40, 50, 60};
std::vector<std::vector<int>>queries_6 = {{1, 0, 5}, {2, 3, 4}, {3, 0, 0}, {1,0,2},{3,0,0}};
std::vector<long long> expected_6 = {219,219};
std::vector<long long> result_6 = HandleQuery(nums_1_6, nums_2_6, queries_6);
assert(expected_6 == result_6);
// TEST_END

// TEST 
std::vector<int>nums_1_7 = {0, 1, 0, 1, 0, 1};
std::vector<int>nums_2_7 = {1, 2, 3, 4, 5, 6};
std::vector<std::vector<int>>queries_7 = {{1, 1, 3}, {2, 2, 5}, {3, 0, 0},{1, 2, 3}, {2, 2, 55}, {3, 0, 0}};
std::vector<long long> expected_7 = {25,29};
std::vector<long long> result_7 = HandleQuery(nums_1_7, nums_2_7, queries_7);
assert(expected_7 == result_7);
// TEST_END

// TEST 
std::vector<int>nums_1_8 = {1, 1, 0, 0, 1, 1, 1, 0, 0, 0};
std::vector<int>nums_2_8 = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
std::vector<std::vector<int>>queries_8 = {{1, 0, 9}, {2, 4, 6}, {3, 0, 0},{1, 0, 8}, {2, 4, 6}, {3, 0, 0},{1, 0, 5}, {2, 4, 6}, {3, 0, 0}};
std::vector<long long> expected_8 = {5520,5544,5560};
std::vector<long long> result_8 = HandleQuery(nums_1_8, nums_2_8, queries_8);
assert(expected_8 == result_8);
// TEST_END
// TEST 
std::vector<int>nums_1_9 = {1, 0, 1, 0, 1};
std::vector<int>nums_2_9 = {10, 20, 30, 40, 50};
std::vector<std::vector<int>>queries_9 = {{1, 0, 4}, {2, 1, 3}, {3, 0, 0}, {1, 0, 3}, {4, 2, 4}, {3, 0, 0}, {1, 0, 2}, {2, 1, 4}, {3, 0, 0}};
try{
  HandleQuery(nums_1_9, nums_2_9, queries_9);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_10 = {0, 1, 0, 1, 0, 1, 0, 1, 0, 1};
std::vector<int>nums_2_10 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
std::vector<std::vector<int>>queries_10 = {{1, 0, 9}, {2, 1, 8}, {3, 1, 0}, {1, 0, 7}, {2, 2, 9}, {3, 0, 0}, {1, 0, 5}, {2, 3, 7}, {3, 0, 0}};
try{
  HandleQuery(nums_1_10, nums_2_10, queries_10);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_11 = {1, 1, 1, 0, 0, 0};
std::vector<int>nums_2_11 = {100, 200, 300, 400, 500, 600};
std::vector<std::vector<int>>queries_11 = {{1, 0, 9}, {2, 1, 4}, {3, 0, 0}, {1, 0, 3}, {2, 2, 5}, {3, 0, 0}, {1, 0, 2}, {2, 1, 3}, {3, 0, 0}};
try{
  HandleQuery(nums_1_11, nums_2_11, queries_11);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_12 = {0, 0, 0, 1, 1, -2};
std::vector<int>nums_2_12 = {1000, 2000, 3000, 4000, 5000, -99};
std::vector<std::vector<int>>queries_12 = {{1, 0, 5}, {2, 1, 3}, {3, 0, 0}, {1, 0, 4}, {2, 2, 5}, {3, 0, 0}, {1, 0, 3}, {2, 1, 4}, {3, 0, 0}};
try{
  HandleQuery(nums_1_12, nums_2_12, queries_12);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_13 = {1, 1, 0, 1, 0, 1};
std::vector<int>nums_2_13 = {10, 20, 30, 40, 50, 60};
std::vector<std::vector<int>>queries_13 = {{1, 0, 5,9}, {2, 2, 4}, {3, 0, 0}, {1, 0, 4}, {2, 1, 3}, {3, 0, 0}, {1, 0, 3}, {2, 1, 5}, {3, 0, 0}};
try{
  HandleQuery(nums_1_13, nums_2_13, queries_13);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_14 = {0, 1, 0, 1, 1, 1, 0, 0, 1, 1};
std::vector<int>nums_2_14 = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000,99};
std::vector<std::vector<int>>queries_14 = {{1, 0, 9}, {2, 3, 7}, {3, 0, 0}, {1, 0, 8}, {2, 2, 6}, {3, 0, 0}, {1, 0, 7}, {2, 1, 5}, {3, 0, 0}};
try{
  HandleQuery(nums_1_14, nums_2_14, queries_14);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_15 = {};
std::vector<int>nums_2_15 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
std::vector<std::vector<int>>queries_15 = {{1, 0, 9}, {2, 0, 4}, {3, 0, 0}, {1, 0, 7}, {2, 2, 9}, {3, 0, 0}, {1, 0, 5}, {2, 3, 7}, {3, 0, 0}};
try{
  HandleQuery(nums_1_15, nums_2_15, queries_15);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_16(1e6,1);
std::vector<int>nums_2_16 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
std::vector<std::vector<int>>queries_16 = {{1, 0, 9}, {2, 0, 8}, {3, 0, 0}, {1, 0, 7}, {2, 1, 6}, {3, 0, 0}, {1, 0, 5}, {2, 2, 4}, {3, 0, 0}};
try{
  HandleQuery(nums_1_16, nums_2_16, queries_16);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

 // TEST 
std::vector<int>nums_1_17 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
std::vector<int>nums_2_17 = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
std::vector<std::vector<int>>queries_17 = {{1, 0, 9}, {2, 1, 10000000}, {3, 0, 0}, {1, 0, 7}, {2, 2, 9}, {3, 0, 0}, {1, 0, 5}, {2, 3, 7}, {3, 0, 0}};
try{
  HandleQuery(nums_1_17, nums_2_17, queries_17);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_18 = {1, 1, 1, 0, 0, 1, 1, 0, 4, 1};
std::vector<int>nums_2_18 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
std::vector<std::vector<int>>queries_18 = {{1, 0, 9}, {2, 0, -99}, {3, 0, 0}, {1, 0, 8}, {2, 2, 7}, {3, 0, 0}, {1, 0, 6}, {2, 1, 4}, {3, 0, 0}};
try{
  HandleQuery(nums_1_18, nums_2_18, queries_18);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_19 = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
std::vector<int>nums_2_19 = {1000, 900, 800, 700, 600, 500, 400, 300, 200, 100};
std::vector<std::vector<int>>queries_19(1e6, std::vector<int>(3,1));
try{
  HandleQuery(nums_1_19, nums_2_19, queries_19);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_20 = {0, 1, 0, 1, 0, 1, 0, 1, 0, 1};
std::vector<int>nums_2_20 = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19};
std::vector<std::vector<int>>queries_20 = {{1, 0, 9}, {2, 2, 7}, {3, 2, 2}, {1, 0, 8}, {2, 3, 6}, {3, 0, 0}, {1, 0, 7}, {2, 1, 4}, {3, 0, 0}};
try{
  HandleQuery(nums_1_20, nums_2_20, queries_20);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_21 = {1, 1, 0, 0, 1, 1, 0, 0, 1, 1};
std::vector<int>nums_2_21 = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};
std::vector<std::vector<int>>queries_21 = {{1, 9, 1}, {2, 1, 8}, {3, 0, 0}, {1, 0, 7}, {2, 2, 9}, {3, 0, 0}, {1, 0, 5}, {2, 3, 7}, {3, 0, 0}};
try{
  HandleQuery(nums_1_21, nums_2_21, queries_21);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_22 = {0, 0, 1, 1, 0, 0, 1, 1, 0, 0};
std::vector<int>nums_2_22 = {20, 30, 40, 50, 60, 70, 80, 90, 100, 110};
std::vector<std::vector<int>>queries_22 = {{1, 2, 1}, {2, 2, 7}, {3, 0, 0}, {1, 0, 8}, {2, 3, 6}, {3, 0, 0}, {1, 0, 7}, {2, 1, 4}, {3, 0, 0}};
try{
  HandleQuery(nums_1_22, nums_2_22, queries_22);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_23 = {1, 1, 1, 1, 0, 0, 0, 0, 0, 0};
std::vector<int>nums_2_23 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
std::vector<std::vector<int>>queries_23 = {};
try{
  HandleQuery(nums_1_23, nums_2_23, queries_23);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_24 = {0, 0, 0, 0, 1, 4, 1, 1, 1, 1};
std::vector<int>nums_2_24 = {2, 2, 2, 2, 2, 2, 2, 2, 2, 2};
std::vector<std::vector<int>>queries_24 = {{1, 0, 9}, {2, 1, 8}, {3, 0, 0}, {1, 0, 7}, {2, 2, 9}, {3, 0, 0}, {1, 0, 5}, {2, 3, 7}, {3, 0, 0}};
try{
  HandleQuery(nums_1_24, nums_2_24, queries_24);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END

// TEST 
std::vector<int>nums_1_25 = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
std::vector<int>nums_2_25 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
std::vector<std::vector<int>>queries_25 = {{1, -2, 6}, {2, 1, 8}, {3, 0, 0}, {1, 0, 7}, {2, 2, 9}, {3, 0, 0}, {1, 0, 5}, {2, 3, 7}, {3, 0, 0}};
try{
  HandleQuery(nums_1_25, nums_2_25, queries_25);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}
// TEST_END
 
  
  return 0;
}
