/*
Link : https://leetcode.com/problems/kth-smallest-amount-with-single-denomination-combination/description/

Julie has an integer vector coin_denominations that represents coins of different denominations and an integer target_index.

Julie has an infinite number of coins for each denomination in coin_denominations. However, she is not allowed to combine coins of different denominations to 
reach a target amount.

Julie wants to find the target_index-th smallest amount that can be made using these coins when considering each denomination separately.

Create a C++ function CoinDenominationsAtTarget that will return an integer denoting the target_index-th smallest amount that can be made using these coins.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

vector<int> denoting coin_denominations
An integer denoting target_index

Input Constraints:

The length of coin_denominations (i.e., the number of different coin denominations) must be at least 1 and at most 15 inclusive.
Each value in coin_denominations must be between 1 and 25 inclusive.
All values in coin_denominations are distinct.
The value of target_index must be between 1 and 2 * 10^9 inclusive.

*/

#include <vector>
#include <algorithm>
#include <numeric>
#include <stdexcept>
#include <climits>
#include <cassert>
#include <limits>
#include <unordered_set>

    long long ComputeLcm(long long val_a, long long val_b) {
        return (val_a * val_b) / std::gcd(val_a, val_b);
    }
    
    long long FetchLcm(const std::vector<int>& coin_denominations, long long index) {
        long long lcm_value = 1;
        long long val = 0;
        while (index) {
            if (index & 1) {
                lcm_value = ComputeLcm(lcm_value, coin_denominations[val]);
            }
            val++;
            index >>= 1;
        }
        return lcm_value;
    }
    
    
    
    int CountSetBits(long long number) {
        int count = 0;
        while (number) {
            count += number & 1;
            number >>= 1;
        }
        return count;
    }


    long long FindPosition(long long num, const std::vector<int>& coin_denominations) {
        long long sum = 0;
        long long number_of_denominations = coin_denominations.size();
        
        for (long long i = 1; i <= ((1 << number_of_denominations) - 1); i++) {
            long long lcm_value = FetchLcm(coin_denominations, i);
            if (CountSetBits(i) % 2 == 1) {
                sum += num / lcm_value;
            } else {
                sum -= num / lcm_value;
            }
        }
        
        bool exists = true;
        for (long long coin : coin_denominations) {
            if (num % coin == 0) {
                exists = false;
                break;
            }
        }
        
        if (exists) sum++;
        return sum;
    }
    
    long long CoinDenominationsAtTarget(std::vector<int>& coin_denominations, int target_index) {
       
        if (coin_denominations.size() < 1 || coin_denominations.size() > 15) {
            throw std::invalid_argument("coin_denominations length must be between 1 and 15 inclusive.");
        }
        for (int coin : coin_denominations) {
            if (coin < 1 || coin > 25) {
                throw std::invalid_argument("Each coin denomination must be between 1 and 25 inclusive.");
            }
        }
        if (target_index < 1 || target_index > 2'000'000'000) {
            throw std::invalid_argument("target_index must be between 1 and 2 * 10^9 inclusive.");
        }
      
        std::unordered_set<int> unique_coins(coin_denominations.begin(), coin_denominations.end());
      
    if (unique_coins.size() != coin_denominations.size()) {
        throw std::invalid_argument("All values in coin_denominations must be distinct.");
    }

        long long minimum_denomination = std::numeric_limits<long long>::max();

        for (long long value : coin_denominations)
        {
            if (value < minimum_denomination)
            {
                minimum_denomination = value;
            }
        }

        long long number_of_denominations = coin_denominations.size();

        long long minimum_range = static_cast<long long>(minimum_denomination) * (target_index / number_of_denominations);
        long long maximum_range = static_cast<long long>(minimum_denomination) * target_index;
        
        long long left = minimum_range;
        long long right = maximum_range;
        
        while (left <= right) {
            long long middle = (right - left) / 2 + left;
            long long position = FindPosition(middle, coin_denominations);
            
            if (position == target_index) {
                long long smallest_greater = LLONG_MAX;
                for (long long coin : coin_denominations) {
                    if (middle % coin == 0) return middle;
                    smallest_greater = std::min(smallest_greater, coin * (middle / coin + 1));
                }
                return smallest_greater;
            }
            if (position >= target_index) {
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }
        return right;
    }

int main(){
  
  //TEST
std::vector<int> coin_denominations_1 = {1};
int target_index_1 = 1;
long long expected_1 = 1;
long long result_1 = CoinDenominationsAtTarget(coin_denominations_1, target_index_1);
assert(result_1 == expected_1);

//TEST_END

//TEST
std::vector<int> coin_denominations_2 = {1, 2};
int target_index_2 = 3;
long long expected_2 = 3;
long long result_2 = CoinDenominationsAtTarget(coin_denominations_2, target_index_2);
assert(result_2 == expected_2);

//TEST_END

//TEST
std::vector<int> coin_denominations_3 = {2, 3};
int target_index_3 = 4;
long long expected_3 = 6;
long long result_3 = CoinDenominationsAtTarget(coin_denominations_3, target_index_3);
assert(result_3 == expected_3);

//TEST_END

//TEST
std::vector<int> coin_denominations_4 = {5, 7, 11};
int target_index_4 = 10;
long long expected_4 = 25;
long long result_4 = CoinDenominationsAtTarget(coin_denominations_4, target_index_4);
assert(result_4 == expected_4);

//TEST_END

//TEST
std::vector<int> coin_denominations_5 = {1, 3, 4};
int target_index_5 = 5;
long long expected_5 = 5;
long long result_5 = CoinDenominationsAtTarget(coin_denominations_5, target_index_5);
assert(result_5 == expected_5);

//TEST_END

//TEST
std::vector<int> coin_denominations_6 = {2, 5, 7, 11};
int target_index_6 = 15;
long long expected_6 = 21;
long long result_6 = CoinDenominationsAtTarget(coin_denominations_6, target_index_6);
assert(result_6 == expected_6);

//TEST_END

//TEST
std::vector<int> coin_denominations_7 = {3, 6, 9};
int target_index_7 = 7;
long long expected_7 = 21;
long long result_7 = CoinDenominationsAtTarget(coin_denominations_7, target_index_7);
assert(result_7 == expected_7);

//TEST_END

//TEST
std::vector<int> coin_denominations_8 = {1, 2, 3, 5};
int target_index_8 = 10;
long long expected_8 = 10;
long long result_8 = CoinDenominationsAtTarget(coin_denominations_8, target_index_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
std::vector<int> coin_denominations_9 = {4, 5, 6};
int target_index_9 = 8;
long long expected_9 = 16;
long long result_9 = CoinDenominationsAtTarget(coin_denominations_9, target_index_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
std::vector<int> coin_denominations_10 = {}; 
int target_index_10 = 1;
try {
    CoinDenominationsAtTarget(coin_denominations_10, target_index_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_11 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}; 
int target_index_11 = 1;
try {
    CoinDenominationsAtTarget(coin_denominations_11, target_index_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_12 = {1, 2, 3, 26};
int target_index_12 = 1;
try {
    CoinDenominationsAtTarget(coin_denominations_12, target_index_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_13 = {1, 2, 2};
int target_index_13 = 1;
try {
    CoinDenominationsAtTarget(coin_denominations_13, target_index_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_14 = {1, 2, 3};
int target_index_14 = -99999;
try {
    CoinDenominationsAtTarget(coin_denominations_14, target_index_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_15 = {1, 2, 3};
int target_index_15 = 2 * 1000000000 + 1;
try {
    CoinDenominationsAtTarget(coin_denominations_15, target_index_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_16 = {1, -2, 3};
int target_index_16 = 1;
try {
    CoinDenominationsAtTarget(coin_denominations_16, target_index_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> coin_denominations_17 = {1, 2, 3};
int target_index_17 = -1;
try {
    CoinDenominationsAtTarget(coin_denominations_17, target_index_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

  
  return 0;
}

