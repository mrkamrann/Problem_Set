/*
Link : https://codeforces.com/problemset/problem/729/F

At evening, James and Zara the financiers became boring, so they decided to play a game. They prepared num_papers papers with the income of some company for some time periods. Note that the income can be positive, zero, or negative.

James and Zara placed the papers in a row and decided to take turns making moves. James will take the papers from the left side, Zara will take the papers from the right side. James goes first and takes 1 or 2 (his choice) papers from the left. Then, on each turn, a player can take k or k+1 papers from his side if the opponent took exactly k papers in the previous turn. Players can't skip moves. The game ends when there are no papers left, or when some of the players can't make a move.

Your task is to determine the difference between the sum of incomes on the papers James took and the sum of incomes on the papers Zara took, assuming both players play optimally. James wants to maximize the difference, Zara wants to minimize it.


Given a vector containing num_papers integers papers1, papers2, ..., papers_num_papers , where papers_i is the income on the i-th paper from the left.

Return the difference between the sum of incomes on the papers James took and the sum of incomes on the papers Zara took, assuming both players play optimally. 
James wants to maximize the difference, Zara wants to minimize it.

Create a C++ Function CalculateDifference that will return a long long denoting the difference between the sums of incomes taken by James and Zara.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type: 

A vector<int> denoting papers

Input Constraints: 

The value of num_papers should be at least 1 and at most 4000 inclusive.
Each value of papers[i] should be in the range [-10^5, 10^5] inclusive.


*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cstdio>
#include <functional>

long long CalculateDifference(const std::vector<int>& papers) {

    int num_papers = papers.size();

    if (num_papers < 1 || num_papers > 4000) {
        throw std::invalid_argument("Number of papers is out of valid range (1 ≤ n ≤ 4000)");
    }
    for (int paper : papers) {
        if (paper < -100000 || paper > 100000) {
            throw std::invalid_argument("Paper value is out of valid range (-100000 ≤ ai ≤ 100000)");
        }
    }

    std::vector<long long> prefix_sum(num_papers + 1, 0);
    for (int index = 1; index <= num_papers; ++index) {
        prefix_sum[index] = prefix_sum[index - 1] + papers[index - 1];
    }

    std::vector<std::vector<std::vector<long long>>> memo(90, std::vector<std::vector<long long>>(4001, std::vector<long long>(90, 0)));
    std::vector<std::vector<std::vector<bool>>> visited(90, std::vector<std::vector<bool>>(4001, std::vector<bool>(90, false)));

    std::function<long long(int, int, int, int)> DepthFirstSearch = [&](int index_i, int left, int depth, int turn) {
        int right = num_papers - (left + depth) + 1;
        if (right - left - 1 < index_i) {
            return 0LL;
        }
        if (turn) {
            if (visited[index_i][left][depth]) {
                return memo[index_i][left][depth];
            }
            long long result = DepthFirstSearch(index_i, left + index_i, depth - index_i, turn ^ 1) + prefix_sum[left + index_i] - prefix_sum[left];
            if (right - left - 1 >= index_i + 1) {
                result = std::max(result, DepthFirstSearch(index_i + 1, left + index_i + 1, depth - index_i - 1, turn ^ 1) + prefix_sum[left + index_i + 1] - prefix_sum[left]);
            }
            visited[index_i][left][depth] = true;
            memo[index_i][left][depth] = result;
            return result;
        } else {
            long long result = DepthFirstSearch(index_i, left, depth + index_i, turn ^ 1) - prefix_sum[right - 1] + prefix_sum[right - index_i - 1];
            if (right - left - 1 >= index_i + 1) {
                result = std::min(result, DepthFirstSearch(index_i + 1, left, depth + index_i + 1, turn ^ 1) - prefix_sum[right - 1] + prefix_sum[right - index_i - 2]);
            }
            return result;
        }
    };

    return DepthFirstSearch(1, 0, 0, 1);
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cstdio>
#include <functional>

int main() {
  

    return 0;
}
