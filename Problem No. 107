/*
Link : https://codeforces.com/contest/1313/problem/D

Julie is in a challenging situation as Santa Claus. She has to deal with num_children children lined up in front of her, numbered from 1 to num_children. 
Julie knows num_spells spells. The i-th spell gives a candy to every child whose place is in the range [left_i, right_i]. Each spell can be used at most once. 
It is also known that if all spells are used, each child will receive at most max_candies candies.

It is not good for children to eat a lot of sweets, so each child can eat no more than one candy, while the remaining candies will be equally divided between 
their Mom and Dad. Therefore, if a child receives an even number of candies (possibly zero), they will be unable to eat any candies and will be sad. 
However, the children who receive an odd number of candies will be happy.

Help Julie to determine the maximum number of children she can make happy by casting some of her spells.

Return the maximum number of children that Julie can make happy.

Create a C++ function MaxHappyChildren that will return an integer denoting the maximum number of children that can be made happy.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An integer num_children
An integer max_candies
A vector<pair<int,int>> denoting spells

Input Constraints

1 ≤ num_spells ≤ 100000
1 ≤ num_children ≤ 10^9
1 ≤ max_candies ≤ 8
1 ≤ spells[i].first(left_i) ≤ spells[i].second(right_i) ≤ num_children

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>
#include <algorithm>
#include <climits>


struct Thing {
    int position, spell_id;
    bool operator<(const Thing& other) const {
        return position != other.position ? position < other.position : spell_id < other.spell_id;
    }
};

int MaxHappyChildren(int num_children, int max_candies, const std::vector<std::pair<int, int>>& spells) {
    int num_spells = spells.size();
    if (num_spells < 1 || num_spells > 100000 || num_children < 1 || num_children > 1000000000 || max_candies < 1 || max_candies > 8) {
        throw std::invalid_argument("Invalid input parameters.");
    }
    
    for (int i = 0; i < num_spells; ++i) {
        if (spells[i].first < 1 || spells[i].second > num_children || spells[i].first > spells[i].second) {
            throw std::invalid_argument("Invalid spell range in spells.");
        }
    }
    
    std::vector<Thing> events(2 * num_spells + 1);
    int total_events = 0;

    for (int i = 0; i < num_spells; ++i) {
        int left = spells[i].first;
        int right = spells[i].second;
        events[++total_events] = {left, i + 1};
        events[++total_events] = {right + 1, -(i + 1)};
    }

    std::sort(events.begin() + 1, events.begin() + total_events + 1);

    std::vector<int> max_happiness(256, INT_MIN);
    max_happiness[0] = 0;
    std::vector<int> spell_status(10, 0);

    int max_happy_children = INT_MIN;

    for (int i = 1; i <= total_events; ++i) {
        int length = (i == total_events) ? 0 : events[i + 1].position - events[i].position;

        if (events[i].spell_id > 0) {
            int spell_index = 0;
            for (int j = 1, found = 0; j <= max_candies && !found; ++j) {
                if (!spell_status[j]) {
                    spell_status[j] = events[i].spell_id;
                    spell_index = j - 1;
                    found = 1;
                }
            }
            for (int j = (1 << max_candies) - 1; j >= 0; --j) {
                max_happiness[j] = std::max(max_happiness[j], max_happiness[(j & (1 << spell_index)) ? j - (1 << spell_index) : j]) + (__builtin_popcount(j) & 1) * length;
            }
        } else {
            int spell_index = 0;
            for (int j = 1, found = 0; j <= max_candies && !found; ++j) {
                if (spell_status[j] + events[i].spell_id == 0) {
                    spell_status[j] = 0;
                    spell_index = j - 1;
                    found = 1;
                }
            }
            for (int j = 0; j < (1 << max_candies); ++j) {
                if (j & (1 << spell_index)) {
                    max_happiness[j] = INT_MIN;
                } else {
                    max_happiness[j] = std::max(max_happiness[j], max_happiness[j + (1 << spell_index)]) + (__builtin_popcount(j) & 1) * length;
                }
            }
        }
    }

    for (int i = 0; i < (1 << max_candies); ++i) {
        max_happy_children = std::max(max_happy_children, max_happiness[i]);
    }

    return max_happy_children;
}

int main() {
  
  // TEST
int num_children_1 = 10;
int max_candies_1 = 3;
std::vector<std::pair<int, int>> spells_1 = {{1, 3}, {5, 7}, {2, 8}};
int expected_1 = 7;
int result_1 = MaxHappyChildren(num_children_1, max_candies_1, spells_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
int num_children_2 = 1000000000;
int max_candies_2 = 8;
std::vector<std::pair<int, int>> spells_2 = {{1, 1000000}, {500000, 1500000}, {1000000, 2000000}};
int expected_2 = 1999999;
int result_2 = MaxHappyChildren(num_children_2, max_candies_2, spells_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
int num_children_3 = 15;
int max_candies_3 = 5;
std::vector<std::pair<int, int>> spells_3 = {{1, 5}, {6, 10}, {11, 15}};
int expected_3 = 15;
int result_3 = MaxHappyChildren(num_children_3, max_candies_3, spells_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
int num_children_4 = 20;
int max_candies_4 = 2;
std::vector<std::pair<int, int>> spells_4 = {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}, {11, 12}, {13, 14}, {15, 16}, {17, 18}, {19, 20}};
int expected_4 = 20;
int result_4 = MaxHappyChildren(num_children_4, max_candies_4, spells_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
int num_children_5 = 50;
int max_candies_5 = 4;
std::vector<std::pair<int, int>> spells_5 = {{1, 10}, {11, 20}, {21, 30}, {31, 40}, {41, 50}};
int expected_5 = 50;
int result_5 = MaxHappyChildren(num_children_5, max_candies_5, spells_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
int num_children_6 = 100;
int max_candies_6 = 6;
std::vector<std::pair<int, int>> spells_6 = {{1, 20}, {21, 40}, {41, 60}, {61, 80}, {81, 100}};
int expected_6 = 100;
int result_6 = MaxHappyChildren(num_children_6, max_candies_6, spells_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
int num_children_7 = 25;
int max_candies_7 = 7;
std::vector<std::pair<int, int>> spells_7 = {{1, 5}, {6, 10}, {11, 15}, {16, 20}, {21, 25}};
int expected_7 = 25;
int result_7 = MaxHappyChildren(num_children_7, max_candies_7, spells_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
int num_children_8 = 5;
int max_candies_8 = 1;
std::vector<std::pair<int, int>> spells_8 = {{1, 1}, {2, 2}, {3, 3}, {4, 4}, {5, 5}};
int expected_8 = 5;
int result_8 = MaxHappyChildren(num_children_8, max_candies_8, spells_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
int num_children_9 = 1000;
int max_candies_9 = 8;
std::vector<std::pair<int, int>> spells_9 = {{1, 100}, {101, 200}, {201, 300}, {301, 400}, {401, 500}, {501, 600}, {601, 700}, {701, 800}, {801, 900}, {901, 1000}};
int expected_9 = 1000;
int result_9 = MaxHappyChildren(num_children_9, max_candies_9, spells_9);
assert(result_9 == expected_9);
// TEST_END

// TEST
int num_children_10 = 1000000005;
int max_candies_10 = 8;
std::vector<std::pair<int, int>> spells_10 = {{1, 1}};
try {
    MaxHappyChildren(num_children_10, max_candies_10, spells_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_children_11 = -10;
int max_candies_11 = 3;
std::vector<std::pair<int, int>> spells_11 = {{1, 3}, {5, 7}, {2, 8}};
try {
    MaxHappyChildren(num_children_11, max_candies_11, spells_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_children_12 = 10;
int max_candies_12 = -99;
std::vector<std::pair<int, int>> spells_12 = {{1, 3}, {5, 7}, {2, 8}};
try {
    MaxHappyChildren(num_children_12, max_candies_12, spells_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_children_13 = 10;
int max_candies_13 = 99999;
std::vector<std::pair<int, int>> spells_13 = {{1, 3}, {5, 7}, {2, 8}};
try {
    MaxHappyChildren(num_children_13, max_candies_13, spells_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_children_14 = 10;
int max_candies_14 = 3;
std::vector<std::pair<int, int>> spells_14 = {{-4, 3}, {5, 7}, {2, 11}};
try {
    MaxHappyChildren(num_children_14, max_candies_14, spells_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_children_15 = 10;
int max_candies_15 = 3;
std::vector<std::pair<int, int>> spells_15 = {{3, 5}, {5, 99999}, {2, 8}};
try {
    MaxHappyChildren(num_children_15, max_candies_15, spells_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
// TEST
int num_children_16 = 10;
int max_candies_16 = 6;
std::vector<std::pair<int, int>> spells_16 = {{5, 3}, {5, 2}, {2, 1}};
try {
    MaxHappyChildren(num_children_16, max_candies_16, spells_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
// TEST
int num_children_17 = 10;
int max_candies_17 = 6;
std::vector<std::pair<int, int>> spells_17 = {};
try {
    MaxHappyChildren(num_children_17, max_candies_17, spells_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
// TEST
int num_children_18 = 10;
int max_candies_18 = 6;
std::vector<std::pair<int, int>> spells_18(1e6, {1,2});
try {
    MaxHappyChildren(num_children_18, max_candies_18, spells_18);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END


    return 0;
}
