/*
Link: https://codeforces.com/problemset/problem/1516/E

This time around, Baby Chris will play with permutations. He has num cubes arranged in a row, with numbers from 1 to num written on them. 
He'll make exactly limit operations. In each operation, he'll pick up 2 cubes and switch their positions.

He's wondering: how many different sequences of cubes can he have at the end? Since Chris doesn't know how many operations he'll make, he wants the answer 
for every possible number of operations between 1 and limit.

Return a vector<long long> with limit integers. The i-th of them is the number of possible sequences Chris can end up with if he does exactly i operations. 
Since this number can be very large, return the remainder when it's divided by 10^9 + 7.

Create a C++ Function CountPermutations that will return a vector<long long> representing the number of possible sequences for each number of operations.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type :

An integer denoting num
An integer denoting limit

Input Constraints: 

The value of num should be at least 2 and at most 10^9 inclusive.
The value of limit should be at least 1 and at most 200 inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cstdio>
#include <cassert>

long long QuickPower(long long base, long long exponent) {
  
    long long modulus = 1000000007;
    long long result = 1;
    while (exponent) {
        if (exponent & 1) {
            result = result * base % modulus;
        }
        exponent >>= 1;
        base = base * base % modulus;
    }
    return result;
}

long long Combination(long long num, long long selection) {
    long long modulus = 1000000007;
    long long result = 1;
    for (long long index = 1; index <= selection; index++) {
        result = result * (num - index + 1) % modulus * QuickPower(index, modulus - 2) % modulus;
    }
    return result;
}

std::vector<std::vector<long long>> HelperFunction(int limit) {
    long long modulus = 1000000007;
    std::vector<std::vector<long long>> vec_a(limit + 1, std::vector<long long>(limit + 1, 0));
    vec_a[0][0] = 1;
    for (int index_i = 1; index_i <= limit; index_i++) {
        vec_a[index_i][0] = 1;
        for (int index_j = 1; index_j <= index_i; index_j++) {
            vec_a[index_i][index_j] = ((2 * index_i - index_j - 1) * vec_a[index_i - 1][index_j - 1] + (index_j + 1) * vec_a[index_i - 1][index_j]) % modulus;
        }
    }
    return vec_a;
}

std::vector<long long> CalculateResult(int num, int limit, const std::vector<std::vector<long long>>& vec_a) {
    long long modulus = 1000000007;
    std::vector<long long> result(limit + 1, 0);
    result[0] = 1;
    for (int index_i = 1; index_i <= limit; index_i++) {
        for (int index_j = 0; index_j <= index_i; index_j++) {
            result[index_i] = (result[index_i] + vec_a[index_i][index_j] * Combination(num + index_j, 2 * index_i)) % modulus;
        }
    }
    for (int index_i = 2; index_i <= limit; index_i++) {
        result[index_i] = (result[index_i] + result[index_i - 2]) % modulus;
    }
    return result;
}

std::vector<long long> CountPermutations(int num, int limit) {
    if (num < 2 || num > 1000000000 || limit < 1 || limit > 200) {
        throw std::invalid_argument("Input values are out of valid range");
    }

    long long modulus = 1000000007;
    std::vector<std::vector<long long>> vec_a = HelperFunction(limit);
    std::vector<long long> result = CalculateResult(num, limit, vec_a);
    std::vector<long long> final_result;
    for (int index_i = 1; index_i <= limit; index_i++) {
        final_result.push_back(result[index_i]);
    }
    return final_result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cstdio>
#include <cassert>

int main() {
 

  //TEST
int num_1 = 2;
int limit_1 = 1;
std::vector<long long> expected_1 = {1};
std::vector<long long> result_1 = CountPermutations(num_1, limit_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int num_2 = 3;
int limit_2 = 2;
std::vector<long long> expected_2 = {3, 3};
std::vector<long long> result_2 = CountPermutations(num_2, limit_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int num_3 = 4;
int limit_3 = 3;
std::vector<long long> expected_3 = {6,12,12};
std::vector<long long> result_3 = CountPermutations(num_3, limit_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
int num_4 = 5;
int limit_4 = 4;
std::vector<long long> expected_4 = {10,36,60,60};
std::vector<long long> result_4 = CountPermutations(num_4, limit_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int num_5 = 6;
int limit_5 = 5;
std::vector<long long> expected_5 = {15,86,240,360,360};
std::vector<long long> result_5 = CountPermutations(num_5, limit_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int num_6 = 7;
int limit_6 = 6;
std::vector<long long> expected_6 = {21,176,756,1800,2520,2520};
std::vector<long long> result_6 = CountPermutations(num_6, limit_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int num_7 = 10;
int limit_7 = 5;
std::vector<long long> expected_7 = {45,871,9495,64144,278820};
std::vector<long long> result_7 = CountPermutations(num_7, limit_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int num_8 = 8;
int limit_8 = 3;
std::vector<long long> expected_8 = {28,323,1988};
std::vector<long long> result_8 = CountPermutations(num_8, limit_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int num_9 = 9;
int limit_9 = 4;
std::vector<long long> expected_9 = {36,547,4572,22996};
std::vector<long long> result_9 = CountPermutations(num_9, limit_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
int num_10 = 2;
int limit_10 = 1;
std::vector<long long> expected_10 = {1};
std::vector<long long> result_10 = CountPermutations(num_10, limit_10);
assert(result_10 == expected_10);
//TEST_END

//TEST
int num_11 = 5;
int limit_11 = 201;
try {
    CountPermutations(num_11, limit_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

  
//TEST
int num_12 = 1;
int limit_12 = 5;
try {
    CountPermutations(num_12, limit_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_13 = 5;
int limit_13 = 999999999;
try {
    CountPermutations(num_13, limit_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_14 = -5;
int limit_14 = 5;
try {
    CountPermutations(num_14, limit_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_15 = 5;
int limit_15 = -5;
try {
    CountPermutations(num_15, limit_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_16 = 1000000001;
int limit_16 = 5;
try {
    CountPermutations(num_16, limit_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


    return 0;
}

