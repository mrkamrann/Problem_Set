/*

Link : https://leetcode.com/problems/critical-connections-in-a-network/description/

Jimmy loves solving puzzles, especially those involving networks of servers. One day, he encountered a challenging problem involving len no. of  servers numbered 
from 0 to len - 1, interconnected by undirected server-to-server connections represented by an array connections. Each connection connections[i] = [nodea_i, nodeb_i] 
denotes a direct link between servers nodea_i and nodeb_i.

A critical connection in this network is a connection that, if removed, would increase the number of connected components in the network, making some servers unable 
to reach some others.

Your task is to help Jimmy write C++ class Solution that will contain a function CriticalConnections that will return a 2D vector denoting all critical connections in the 
network.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type

An integer denoting len
A vector<vector<int>> denoting connections

Input Constraints:

The number of servers (len) should be at least 2 and at most 10^5 inclusive.
The number of connections (connections.length) should be at least len - 1 and at most 10^5 inclusive.
Each value of nodea_i and nodeb_i (servers in connections) should be in the range [0, len - 1] inclusive.
The values of nodea_i and nodeb_i should not be equal (nodea_i != nodeb_i).
There are no repeated connections in the network.

*/

#include <vector>
#include <stdexcept>
#include <iostream>
#include <cassert>

class Solution {
public:
    std::vector<int> parent, disc, low;
    std::vector<bool> visited;
    std::vector<std::vector<int>> ans;

    void DepthFirstSearch(int index, int parent_idx, std::vector<std::vector<int>>& edges, int& time) {
        disc[index] = low[index] = time;
        time++;
        visited[index] = true;

        for (size_t i = 0; i < edges[index].size(); ++i) {
            int adjacent = edges[index][i];
            if (adjacent == parent_idx) {
                continue;
            }
            if (visited[adjacent]) {
                low[index] = std::min(low[index], disc[adjacent]);
            } else {
                DepthFirstSearch(adjacent, index, edges, time);
                low[index] = std::min(low[index], low[adjacent]);
                if (low[adjacent] > disc[index]) {
                    ans.push_back({index, adjacent});
                }
            }
        }
    }

    std::vector<std::vector<int>> CriticalConnections(int len, std::vector<std::vector<int>>& connections) {
        
        if (len < 2 || len > 100000) {
            throw std::invalid_argument("The number of servers (len) should be between 2 and 100000 inclusive.");
        }
        
        int min_connections = len - 1;
        int max_connections = 100000;
        if (connections.size() < min_connections || connections.size() > max_connections) {
            throw std::invalid_argument("The number of connections (connections.length) should be between len - 1 and 100000 inclusive.");
        }


        int seen[len][len];
        for(int i = 0;i<len;++i)
        {
          for(int j = 0;j<len;++j) seen[i][j] = 0;
        }
    
        for (size_t i = 0; i < connections.size(); ++i) {
            if (connections[i].size() != 2) {
                throw std::invalid_argument("Each connection must be represented by exactly two endpoints.");
            }
            int nodea = connections[i][0];
            int nodeb = connections[i][1];
            if (nodea < 0 || nodea >= len || nodeb < 0 || nodeb >= len || nodea == nodeb) {
                throw std::invalid_argument("Endpoints of connections must be valid servers and should not be equal.");
            }
            if (seen[nodea][nodeb]) {
                throw std::invalid_argument("Repeated connections are not allowed.");
            }
            seen[nodea][nodeb] = 1;
        }

        std::vector<std::vector<int>> edges(len);
        for (size_t i = 0; i < connections.size(); ++i) {
            edges[connections[i][0]].push_back(connections[i][1]);
            edges[connections[i][1]].push_back(connections[i][0]);
        }

        disc.resize(len);
        low.resize(len);
        visited.resize(len, false);
        int time = 0;
        for (int i = 0; i < len; ++i) {
            if (!visited[i]) {
                DepthFirstSearch(i, -1, edges, time);
            }
        }
        return ans;
    }
};

int main(){
  
Solution obj;
  
// TEST
int len_1 = 4;
std::vector<std::vector<int>> connections_1 = {{0, 1}, {1, 2}, {1, 3}};
std::vector<std::vector<int>> expected_1 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_1 = obj.CriticalConnections(len_1, connections_1);
assert(result_1 == expected_1);

// TEST_END

// TEST 
int len_2 = 5;
std::vector<std::vector<int>> connections_2 = {{1, 3}, {0, 2}, {2, 4}, {3, 4}};
std::vector<std::vector<int>> expected_2 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_2 = obj.CriticalConnections(len_2, connections_2);
assert(result_2 == expected_2);
// TEST_END

// TEST 
int len_3 = 3;
std::vector<std::vector<int>> connections_3 = {{0, 1}, {0, 2}};
std::vector<std::vector<int>> expected_3 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_3 = obj.CriticalConnections(len_3, connections_3);
assert(result_3 == expected_3);
// TEST_END

// TEST 
int len_4 = 5;
std::vector<std::vector<int>> connections_4 = {{0, 1}, {0, 2}, {1, 3}, {1, 4}};
std::vector<std::vector<int>> expected_4 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_4 = obj.CriticalConnections(len_4, connections_4);
assert(result_4 == expected_4);
// TEST_END

// TEST 
int len_5 = 2;
std::vector<std::vector<int>> connections_5 = {{0, 1}};
std::vector<std::vector<int>> expected_5 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_5 = obj.CriticalConnections(len_5, connections_5);
assert(result_5 == expected_5);
// TEST_END

// TEST 
int len_6 = 4;
std::vector<std::vector<int>> connections_6 = {{0, 1}, {1, 2}, {2, 3}, {3, 0}};
std::vector<std::vector<int>> expected_6 = {{1,2},{1,3},{0,1}};  
std::vector<std::vector<int>> result_6 = obj.CriticalConnections(len_6, connections_6);
assert(result_6 == expected_6);
// TEST_END

// TEST 
int len_7 = 3;
std::vector<std::vector<int>> connections_7 = {{0, 1}, {1, 2}, {2, 0}};
std::vector<std::vector<int>> expected_7 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_7 = obj.CriticalConnections(len_7, connections_7);
assert(result_7 == expected_7);
// TEST_END

// TEST 
int len_8 = 3;
std::vector<std::vector<int>> connections_8 = {{0, 1}, {0, 2}};
std::vector<std::vector<int>> expected_8 = {{1,2},{1,3},{0,1}}; 
std::vector<std::vector<int>> result_8 = obj.CriticalConnections(len_8, connections_8);
assert(result_8 == expected_8);
// TEST_END


  
// TEST 
int len_9 = 3;
std::vector<std::vector<int>> connections_9 = {{0, 1}, {0, 1}};
try {
    obj.CriticalConnections(len_9, connections_9);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_10 = 1;
std::vector<std::vector<int>> connections_10 = {}; 
try {
    obj.CriticalConnections(len_10, connections_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true); 
}
// TEST_END

// TEST 
int len_11 = 3;
std::vector<std::vector<int>> connections_11 = {{0, 1}, {1, 2}, {2, 3}}; 
try {
    obj.CriticalConnections(len_11, connections_11);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true); 
}
// TEST_END

// TEST 
int len_12 = 3;
std::vector<std::vector<int>> connections_12 = {{0, 1}, {1, 1}, {1, 2}}; 
try {
    obj.CriticalConnections(len_12, connections_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true); 
}
// TEST_END

// TEST 
int len_13 = 3;
std::vector<std::vector<int>> connections_13 = {{0, 1}, {1, 2}, {2, 0}, {3, 4}}; 
try {
    obj.CriticalConnections(len_13, connections_13);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true); 
}
// TEST_END

// TEST 
int len_14 = 2;
std::vector<std::vector<int>> connections_14 = {{0, 6}}; 
try {
    obj.CriticalConnections(len_14, connections_14);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_15 = 1;
std::vector<std::vector<int>> connections_15 = {{0,1},{0,1}}; 
try {
    obj.CriticalConnections(len_15, connections_15);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true); 
}
// TEST_END

  
  return 0;
}
