/*
Link: https://codeforces.com/contest/105/problem/E

Julie, Jimmy, and Flonne are on a straight half-line divided into segments of unit length, referred to as position. The positions are numbered by positive 
integers starting from 1 at the end of the half-line (i.e., 1, 2, 3, etc.). The distance between any two positions is the absolute difference between their 
respective numbers.

Julie, Jimmy, and Flonne occupy distinct positions on the half-line and aim to reach the position with the largest possible number. Each character can perform 
the following actions no more than once:

Move a certain distance.
Grab another character and lift them above their head.
Throw the lifted character a certain distance.

Each character has a movement_range parameter indicating the maximum distance they can move to a free position, provided the distance does not exceed their 
movement range.

A character can lift another character if they are exactly 1 position apart and if the latter is not already being held by another character. The lifted character 
moves to the same position as the character lifting them, leaving their original position free. While being lifted, the character cannot perform any actions, and 
the character holding them cannot move.

Each character also has a throwing_range parameter indicating the maximum distance they can throw a lifted character to a free position. A character can only 
throw another character they are currently holding.

We accept scenarios where one character can grab another character who, in turn, holds a third character, forming a "column" of three characters. 
For example, Julie can hold Jimmy while Jimmy holds Flonne. In this case, both Jimmy and Flonne cannot perform any actions, and Julie can only 
throw Jimmy (along with Flonne) a certain distance.

Julie, Jimmy, and Flonne can perform actions in any order, taking turns to ensure no two characters act simultaneously.

Determine the maximum position number that at least one of the characters can reach. That is, the maximum number x such that one of the characters can reach
position x.

Create a C++ function MaxReachablePosition that will return an integer denoting the maximum number x such that one of the characters can reach
position x.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

A vector<int> julie_vec  denoting [julie_position, julie_movement_range, julie_throwing_range].
A vector<int> jimmy_vec  denoting [jimmy_position, jimmy_movement_range, jimmy_throwing_range].
A vector<int> flonne_vec denoting [flonne_position, flonne_movement_range, flonne_throwing_range].

Input Constraints:

The length of julie_vec, jimmy_vec, and flonne_vec should be 3.
Each position, movement range, and throwing range should be in the range [1, 10] inclusive.
The three characters must occupy distinct positions.

*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <numeric>
#include <stdexcept>
#include <cassert>


bool Valid(const std::vector<int>& permutation, std::vector<int>& lifting) {
    int pos, action;
    bool result = true;
    std::fill(lifting.begin(), lifting.end(), -1);

    for (int index = 0; index < 9; ++index) {
        pos = permutation[index] / 3;
        action = permutation[index] % 3;
        if (action == 1) {
            lifting[pos] = 1;
        } else if (action == 2) {
            if (lifting[pos] == -1) {
                result = false;
                break;
            }
        }
    }

    std::fill(lifting.begin(), lifting.end(), -1);
    return result;
}

void DepthFirstSearch(int index, const std::vector<int>& permutation, std::vector<int>& positions,
                      const std::vector<std::vector<int>>& ranges, std::vector<int>& lifting,
                      std::vector<int>& lifted, int& answer) {
    if (index == 9) {
        return;
    }

    int pos = permutation[index] / 3;
    int action = permutation[index] % 3;
    int old_position, next_position, pos_2, pos_3, start, end;

    if (action == 0) {
        if (lifting[pos] != -1 || lifted[pos] != -1) {
            return;
        }
        if (index == 8) {
            answer = std::max(answer, positions[pos] + ranges[pos][0]);
            return;
        }

        pos_2 = (pos + 1) % 3;
        pos_3 = (pos + 2) % 3;
        start = std::min(positions[pos_2], positions[pos_3]) - 1;
        start = std::max(start, positions[pos] - ranges[pos][0]);
        end = ranges[pos][0] + positions[pos];

        old_position = positions[pos];
        for (int i = start; i <= end; ++i, positions[pos] = old_position) {
            positions[pos] = i;

            if (std::abs(positions[pos] - old_position) > ranges[pos][0] || positions[pos] <= 0 || 
                positions[pos] == positions[pos_2] || positions[pos] == positions[pos_3]) {
                continue;
            }

            answer = std::max(answer, positions[pos]);
            DepthFirstSearch(index + 1, permutation, positions, ranges, lifting, lifted, answer);
        }
    } else if (action == 1) {
        if (lifting[pos] != -1 || lifted[pos] != -1) {
            return;
        }
        if (index == 8) {
            answer = std::max(answer, positions[pos] + ranges[pos][1]);
            return;
        }

        int adj[2] = { std::max(1, positions[pos] - 1), positions[pos] + 1 };

        for (int j = 0; j < 2; ++j) {
            for (int i = 1; i <= 2; ++i) {
                pos_2 = (pos + 1) % 3;
                pos_3 = (pos + 2) % 3;
                if (i == 2) {
                    std::swap(pos_2, pos_3);
                }

                if (positions[pos_2] == adj[j] && lifted[pos_2] == -1) {
                    if (lifting[pos_2] == -1) {
                        positions[pos_2] = positions[pos];
                        lifting[pos] = pos_2;
                        lifted[pos_2] = pos;
                        DepthFirstSearch(index + 1, permutation, positions, ranges, lifting, lifted, answer);
                        lifting[pos] = lifted[pos_2] = -1;
                        positions[pos_2] = adj[j];
                    } else {
                        positions[pos_2] = positions[pos_3] = positions[pos];
                        lifting[pos] = pos_2;
                        lifted[pos_2] = pos;
                        DepthFirstSearch(index + 1, permutation, positions, ranges, lifting, lifted, answer);
                        lifting[pos] = lifted[pos_2] = -1;
                        positions[pos_2] = positions[pos_3] = adj[j];
                    }
                }
            }
        }
    } else {
        if (lifting[pos] == -1 || lifted[pos] != -1) {
            return;
        }

        pos_2 = lifting[pos];
        for (int i = 0; i < 3; ++i) {
            if (i != pos && i != pos_2) {
                pos_3 = i;
                break;
            }
        }
        start = positions[pos_3] - 1;
        start = std::max(start, positions[pos] - ranges[pos][1]);
        end = ranges[pos][1] + positions[pos];

        for (int i = start; i <= end; ++i) {
            next_position = i;
            if (next_position <= 0 || next_position == positions[pos_3] || next_position == positions[pos]) {
                continue;
            }

            answer = std::max(answer, next_position);
            if (lifting[pos_2] == pos_3) {
                positions[pos_2] = positions[pos_3] = next_position;
                lifting[pos] = lifted[pos_2] = -1;
                DepthFirstSearch(index + 1, permutation, positions, ranges, lifting, lifted, answer);
                lifting[pos] = pos_2;
                lifted[pos_2] = pos;
                positions[pos_2] = positions[pos_3] = positions[pos];
            } else {
                positions[pos_2] = next_position;
                lifting[pos] = lifted[pos_2] = -1;
                DepthFirstSearch(index + 1, permutation, positions, ranges, lifting, lifted, answer);
                lifting[pos] = pos_2;
                lifted[pos_2] = pos;
                positions[pos_2] = positions[pos];
            }
        }
    }
}

int MaxReachablePosition(std::vector<int>& julie_vec, std::vector<int>& jimmy_vec, std::vector<int>& flonne_vec) {
    
  
      if (julie_vec.size() != 3 || jimmy_vec.size() != 3 || flonne_vec.size() != 3) {
        throw std::invalid_argument("Input vectors must each have exactly 3 elements.");
    }
    for (int i = 0; i < 3; ++i) {
        if (julie_vec[i] < 1 || julie_vec[i] > 10 || jimmy_vec[i] < 1 || jimmy_vec[i] > 10 || flonne_vec[i] < 1 || flonne_vec[i] > 10) {
            throw std::invalid_argument("Each position, movement range, and throwing range should be in the range [1, 10] inclusive.");
        }
    }
    if (julie_vec[0] == jimmy_vec[0] || julie_vec[0] == flonne_vec[0] || jimmy_vec[0] == flonne_vec[0]) {
        throw std::invalid_argument("The three characters must occupy distinct positions.");
    }

    std::vector<int> positions(3);
    std::vector<std::vector<int>> ranges(3, std::vector<int>(2));

    int answer = 0;

    positions[0] = julie_vec[0];
    ranges[0][0] = julie_vec[1];
    ranges[0][1] = julie_vec[2];
    answer = std::max(answer, positions[0]);

    positions[1] = jimmy_vec[0];
    ranges[1][0] = jimmy_vec[1];
    ranges[1][1] = jimmy_vec[2];
    answer = std::max(answer, positions[1]);

    positions[2] = flonne_vec[0];
    ranges[2][0] = flonne_vec[1];
    ranges[2][1] = flonne_vec[2];
    answer = std::max(answer, positions[2]);

    std::vector<int> permutation(9);
    std::iota(permutation.begin(), permutation.end(), 0);
    std::vector<int> lifting(3, -1);
    std::vector<int> lifted(3, -1);

    do {
        if (Valid(permutation, lifting)) {
            DepthFirstSearch(0, permutation, positions, ranges, lifting, lifted, answer);
        }
    } while (std::next_permutation(permutation.begin(), permutation.end()));

    return answer;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <numeric>
#include <stdexcept>
#include <cassert>


int main() {
   
   // TEST
std::vector<int> julie_vec_1 = {1, 2, 3};
std::vector<int> jimmy_vec_1 = {4, 5, 6};
std::vector<int> flonne_vec_1 = {7, 8, 9};
int expected_1 = 23;
int result_1 = MaxReachablePosition(julie_vec_1, jimmy_vec_1, flonne_vec_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::vector<int> julie_vec_2 = {3, 3, 3};
std::vector<int> jimmy_vec_2 = {6, 6, 6};
std::vector<int> flonne_vec_2 = {9, 9, 9};
int expected_2 = 26;
int result_2 = MaxReachablePosition(julie_vec_2, jimmy_vec_2, flonne_vec_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::vector<int> julie_vec_3 = {1, 4, 7};
std::vector<int> jimmy_vec_3 = {2, 5, 8};
std::vector<int> flonne_vec_3 = {3, 6, 9};
int expected_3 = 26;
int result_3 = MaxReachablePosition(julie_vec_3, jimmy_vec_3, flonne_vec_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::vector<int> julie_vec_4 = {10, 9, 8};
std::vector<int> jimmy_vec_4 = {7, 6, 5};
std::vector<int> flonne_vec_4 = {4, 3, 2};
int expected_4 = 25;
int result_4 = MaxReachablePosition(julie_vec_4, jimmy_vec_4, flonne_vec_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::vector<int> julie_vec_5 = {5, 5, 5};
std::vector<int> jimmy_vec_5 = {6, 6, 6};
std::vector<int> flonne_vec_5 = {7, 7, 7};
int expected_5 = 27;
int result_5 = MaxReachablePosition(julie_vec_5, jimmy_vec_5, flonne_vec_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::vector<int> julie_vec_6 = {1, 10, 3};
std::vector<int> jimmy_vec_6 = {4, 9, 6};
std::vector<int> flonne_vec_6 = {7, 8, 2};
int expected_6 = 26;
int result_6 = MaxReachablePosition(julie_vec_6, jimmy_vec_6, flonne_vec_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
std::vector<int> julie_vec_7 = {2, 3, 4};
std::vector<int> jimmy_vec_7 = {5, 6, 7};
std::vector<int> flonne_vec_7 = {8, 9, 10};
int expected_7 = 27;
int result_7 = MaxReachablePosition(julie_vec_7, jimmy_vec_7, flonne_vec_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::vector<int> julie_vec_8 = {9, 8, 7};
std::vector<int> jimmy_vec_8 = {6, 5, 4};
std::vector<int> flonne_vec_8 = {3, 2, 1};
int expected_8 = 22;
int result_8 = MaxReachablePosition(julie_vec_8, jimmy_vec_8, flonne_vec_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::vector<int> julie_vec_9 = {3, 6, 9};
std::vector<int> jimmy_vec_9 = {2, 5, 8};
std::vector<int> flonne_vec_9 = {1, 4, 7};
int expected_9 = 26;
int result_9 = MaxReachablePosition(julie_vec_9, jimmy_vec_9, flonne_vec_9);
assert(result_9 == expected_9);
// TEST_END

// TEST
std::vector<int> julie_vec_10 = {0, 5, 10};
std::vector<int> jimmy_vec_10 = {3, 6, 9};
std::vector<int> flonne_vec_10 = {1, 4, 7};
try {
    MaxReachablePosition(julie_vec_10, jimmy_vec_10, flonne_vec_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_11 = {1, 5, 10};
std::vector<int> jimmy_vec_11 = {1, 6, 9};
std::vector<int> flonne_vec_11 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_11, jimmy_vec_11, flonne_vec_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_12 = {1, 5, 10};
std::vector<int> jimmy_vec_12 = {1, 6, 9};
std::vector<int> flonne_vec_12 = {1, 4, 7};
try {
    MaxReachablePosition(julie_vec_12, jimmy_vec_12, flonne_vec_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_13 = {1,10};
std::vector<int> jimmy_vec_13 = {3, 6, 9};
std::vector<int> flonne_vec_13 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_13, jimmy_vec_13, flonne_vec_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_14 = {1, 5, 10};
std::vector<int> jimmy_vec_14 = {3, 6, -9};
std::vector<int> flonne_vec_14 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_14, jimmy_vec_14, flonne_vec_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_15 = {1, 5, 10};
std::vector<int> jimmy_vec_15 = {-333333, 11, 9};
std::vector<int> flonne_vec_15 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_15, jimmy_vec_15, flonne_vec_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_16 = {-2, 5, 10};
std::vector<int> jimmy_vec_16 = {3, 6, 9};
std::vector<int> flonne_vec_16 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_16, jimmy_vec_16, flonne_vec_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> julie_vec_17 = {1, 5, 10};
std::vector<int> jimmy_vec_17 = {3, 6, 9999999};
std::vector<int> flonne_vec_17 = {2, 4, 0};
try {
    MaxReachablePosition(julie_vec_17, jimmy_vec_17, flonne_vec_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
  
// TEST_END
  
// TEST 
std::vector<int> julie_vec_18 = {1, 1, 10};
std::vector<int> jimmy_vec_18 = {};
std::vector<int> flonne_vec_18 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_18, jimmy_vec_18, flonne_vec_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_19 = {1, 5, 10};
std::vector<int> jimmy_vec_19 = {3, 6, 9};
std::vector<int> flonne_vec_19 = {};
try {
    MaxReachablePosition(julie_vec_19, jimmy_vec_19, flonne_vec_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_20 = {};
std::vector<int> jimmy_vec_20 = {3, 6, 9};
std::vector<int> flonne_vec_20 = {2, 4, 4};
try {
    MaxReachablePosition(julie_vec_20, jimmy_vec_20, flonne_vec_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_21 = {1, 5, 10};
std::vector<int> jimmy_vec_21 = {3, 6, 9};
std::vector<int> flonne_vec_21 = {2, 545644, 7};
try {
    MaxReachablePosition(julie_vec_21, jimmy_vec_21, flonne_vec_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_22 = {1, 5, 10};
std::vector<int> jimmy_vec_22 = {3, 6, 9};
std::vector<int> flonne_vec_22 = {2, -2, 7};
try {
    MaxReachablePosition(julie_vec_22, jimmy_vec_22, flonne_vec_22);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_23 = {1, 5, 10};
std::vector<int> jimmy_vec_23 = {3, 56456, 9};
std::vector<int> flonne_vec_23 = {2, 4, -7};
try {
    MaxReachablePosition(julie_vec_23, jimmy_vec_23, flonne_vec_23);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_24 = {1, 5, 10};
std::vector<int> jimmy_vec_24 = {3, -6, 9};
std::vector<int> flonne_vec_24 = {2, 4, 7};
try {
    MaxReachablePosition(julie_vec_24, jimmy_vec_24, flonne_vec_24);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_25 = {1, 15, 10};
std::vector<int> jimmy_vec_25 = {3, 6, 9};
std::vector<int> flonne_vec_25 = {2, 5, 7};
try {
    MaxReachablePosition(julie_vec_25, jimmy_vec_25, flonne_vec_25);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> julie_vec_26 = {1, -5, 10};
std::vector<int> jimmy_vec_26 = {3, 6, 9};
std::vector<int> flonne_vec_26 = {2, 4, 8};
try {
    MaxReachablePosition(julie_vec_26, jimmy_vec_26, flonne_vec_26);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

// TEST_END
  
    return 0;
}
