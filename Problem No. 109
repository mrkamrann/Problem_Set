/*
Link: https://codeforces.com/contest/105/problem/E

*/

#include <cstdio>
#include <cmath>
#include <cstring>

#define check(i) ((i) - p[0] && (i) - p[1] && (i) - p[2])

void dfs(int *p, int x, int y, int m[3], int t[3], bool f[48][48][48][8][8], int &ans) {
    bool &res = f[p[0]][p[1]][p[2]][x][y];
    if (res) return;
    res = true;

    int far = 0, near = 50;
    for (int i = 0; i < 3; i++) {
        if (p[i] < 45 && p[i] > far) far = p[i];
        if (p[i] < near) near = p[i];
    }
    if (far > ans) ans = far;

    for (int j = 0; j < 3; j++) {
        int q[3] = {p[0], p[1], p[2]};
        int z = 1 << j;

        if (p[j] >= 45) {
            int T = p[j] - 45;
            for (int i = p[T] + t[T]; p[T] < 45 && i >= p[T] - t[T] && i > near - 2 && i; i--) {
                if (check(i)) {
                    q[j] = i;
                    dfs(q, x, y, m, t, f, ans);
                }
            }
        } else if (check(j + 45)) {
            if (y & z) {
                for (int i = 0; i < 3; i++) {
                    if (fabs(p[i] - p[j]) == 1) {
                        q[i] = 45 + j;
                        dfs(q, x, y ^ z, m, t, f, ans);
                        q[i] = p[i];
                    }
                }
            }
            if (x & z) {
                for (int i = p[j] + m[j]; i >= p[j] - m[j] && i > near - 2 && i; i--) {
                    if (check(i)) {
                        q[j] = i;
                        dfs(q, x ^ z, y, m, t, f, ans);
                    }
                }
            }
        }
    }
}

void solve(int p[3], int m[3], int t[3]) {
    bool f[48][48][48][8][8] = {false};
    int ans = 0;
    dfs(p, 7, 7, m, t, f, ans);
    printf("%d\n", ans);
}

int main() {
    int p[3], m[3], t[3];
    for (int i = 0; i < 3; i++) {
        scanf("%d%d%d", &p[i], &m[i], &t[i]);
    }
    solve(p, m, t);
    return 0;
}
