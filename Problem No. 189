 /*
Link: https://codeforces.com/contest/1174/problem/E

You are given a permutation p of integers 1 to num. John defines a function f(p) as follows: let g_i be the greatest common divisor (GCD) of 
elements p_1, p_2, ..., p_i (in other words, it is the GCD of the prefix of length i). Then f(p) is the number of distinct elements among g_1, g_2, ..., g_num.

Let f_max(num) be the maximum value of f(p) among all permutations p of integers 1, 2, ..., num.

Given an integer num, count the number of permutations p of integers 1, 2, ..., num, such that f(p) is equal to f_max(num). Since the answer may be large, print 
the remainder of its division by 1000000007.

Return a single number your answer modulo 1000000007.

Create a C++ function CountPermutations that will return an integer denoting the number of permutations where f(p) is equal to f_max(num).

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An integer denoting num.

Input Constraints

The value of num should be in the range [2, 10^6] inclusive.
*/

#include <vector>
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <cassert>


long long Inverse(long long x_val) {
    long long p_val = 1e9 + 7;
    return x_val == 1 ? 1 : p_val - (p_val / x_val) * Inverse(p_val % x_val) % p_val;
}

long long Calculate(long long x_val, long long num) {
    return (x_val == 0) ? 0 : num / x_val;
}

long long CountPermutations(long long num) {
    if (num < 2 || num > 1e6) {
        throw std::invalid_argument("num must be between 2 and 1e6");
    }

    long long answer = 0, factorial = 1, top_index = 0;
    long long log_value = std::log2(num);
    std::vector<long long> permutation(50, 0);
    std::vector<long long> prefix(50, 0);
    long long p_val = 1e9 + 7;
  
    for (long long i = 1; i <= num; ++i) {
        factorial = factorial * i % p_val;
    }

    for (long long i = 1; i <= log_value; ++i) {
        permutation[++top_index] = 2;
    }

    if ((1 << (log_value - 1)) * 3 <= num) {
        permutation[++top_index] = 3;
    }

    do {
        prefix[0] = 1;
        for (long long i = 1; i <= log_value; ++i) {
            prefix[i] = prefix[i - 1] * permutation[i] % p_val;
        }

        long long temp = factorial;
        for (long long i = 1; i <= log_value; ++i) {
            temp = temp * (Calculate(prefix[i], num) - Calculate(prefix[i + 1], num)) % p_val * Inverse(num - Calculate(prefix[i + 1], num)) % p_val;
        }

        answer = (answer + temp) % p_val;
    } while (std::next_permutation(permutation.begin() + 1, permutation.begin() + 1 + top_index));

    return answer;
}

#include <vector>
#include <algorithm>
#include <cmath>
#include <stdexcept>
#include <cassert>

int main() {
    
  
//TEST
long long num_1 = 2;
long long expected_1 = 1;
long long result_1 = CountPermutations(num_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
long long num_2 = 3;
long long expected_2 = 4;
long long result_2 = CountPermutations(num_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
long long num_3 = 10;
long long expected_3 = 15120;
long long result_3 = CountPermutations(num_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
long long num_4 = 100;
long long expected_4 = 595536325;
long long result_4 = CountPermutations(num_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
long long num_5 = 1000;
long long expected_5 = 472388304;
long long result_5 = CountPermutations(num_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
long long num_6 = 10000;
long long expected_6 = 285710;
long long result_6 = CountPermutations(num_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
long long num_7 = 100000;
long long expected_7 = 980784195;
long long result_7 = CountPermutations(num_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
long long num_8 = 500000;
long long expected_8 = 461949548;
long long result_8 = CountPermutations(num_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
long long num_9 = 1000000;
long long expected_9 = 943169120;
long long result_9 = CountPermutations(num_9);
assert(result_9 == expected_9);
//TEST_END

  
//TEST
long long num_10 = 1;
try {
    CountPermutations(num_10);
    assert(false);
} catch(const std::invalid_argument& e) {
  
    assert(true);
}
//TEST_END

//TEST
long long num_11 = 1000001;
try {
    CountPermutations(num_11);
    assert(false);
} catch(const std::invalid_argument& e) {
   
    assert(true);
}
//TEST_END

//TEST
long long num_12 = -5;
try {
    CountPermutations(num_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    
    assert(true);
}
//TEST_END
  
    return 0;
}
