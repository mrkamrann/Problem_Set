/*
Link: https://codeforces.com/problemset/problem/1202/F

Lester is given a sequence of uppercase Latin letters 'A' and 'B'. The period of the string is the smallest such positive integer k that s_i = s_i mod k (0-indexed) 
for each i. Note that this implies that k won't always divide count_a + count_b = |s|.

For example, the period of the string "ABAABAA" is 3, the period of "AAAA" is 1, and the period of "AABBB" is 5.

Find the number of different periods over all possible strings with count_a letters 'A' and count_b letters 'B'.

Create a C++ Function CountDifferentPeriods that will return an integer denoting the number of different periods over all possible strings 
with count_a letters 'A' and count_b letters 'B'.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

An integer denoting count_a 
An integer denoting count_b 

Input Constraints

The value of count_a should be at least 1 and at most 10^9 inclusive.
The value of count_b should be at least 1 and at most 10^9 inclusive.
*/

#include <iostream>
#include <stdexcept>
#include <cassert>

int CountDifferentPeriods(int count_a, int count_b) {
    
    if (count_a < 1 || count_a > 1000000000) {
        throw std::invalid_argument("Input value count_a is out of bounds.");
    }
    
      if ( count_b < 1 || count_b > 1000000000) {
        throw std::invalid_argument("Input value count_b is out of bounds.");
    }
    
    int total_count = count_a + count_b;
    
    int answer = 0;

    for (int left = 1, right; left <= total_count; left = right + 1) {
        
        right = total_count / (total_count / left);
        
        int temp = total_count / left;
        
        int denominator = 1 + temp;
        
        int left_a = (count_a + temp) / denominator;
        
        int right_a = count_a / temp;
        
        int left_b = (count_b + temp) / denominator;
        
        int right_b = count_b / temp;

        if (left_a <= right_a && left_b <= right_b) {
            
            answer += std::max(0, std::min(right, right_a + right_b) - std::max(left, left_a + left_b) + 1);
        }
    }

    return answer;
}

#include <iostream>
#include <stdexcept>
#include <cassert>

int main() {
    

    return 0;
}
