/*
Link: https://codeforces.com/contest/1394/problem/E

Abraham has issued his currencies, named Bobo Yuan. Bobo Yuan (BBY) is a series of currencies. Abraham gives each of them a positive integer identifier, 
such as BBY-1, BBY-2, etc.

Abraham has a BBY collection. His collection looks like a sequence. For example:

We can use sequence nums = [1, 2, 3, 3, 2, 1, 4, 4, 1] of length len = 9 to denote it.

Now Abraham wants to fold his collection. You can imagine that Abraham sticks his collection to a long piece of paper and folds it between currencies:

Abraham will only fold the same identifier of currencies together. In other words, if nums[i] is folded over nums[j] (1 ≤ i, j ≤ len), then nums[i] = nums[j] 
must hold. Abraham doesn't care if you follow this rule in the process of folding. But once it is finished, the rule should be obeyed.

According to the picture above, you can fold nums two times. In fact, you can fold nums = [1, 2, 3, 3, 2, 1, 4, 4, 1] at most two times. So the maximum number of 
folds of it is 2.

As an international fan of Abraham, you're asked to calculate the maximum number of folds.

You're given a sequence nums of length len, for each i (1 ≤ i ≤ len), you need to calculate the maximum number of folds of [nums[1], nums[2], …, nums[i]].


Return len integers. The i-th of them should be equal to the maximum number of folds of [nums[1], nums[2], …, nums[i]].

Create a C++ Function CalculateMaxFolds that will return a vector<int> denoting the maximum number of folds for each prefix of the given sequence.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

A vector<int> denoting nums

Input Constraints

The length of nums should be at least 1 and at most 100,000 inclusive.
The value of nums[i] should be in the range [1, len] inclusive

*/

#include <iostream>
#include <vector>
#include <unordered_map>
#include <climits>
#include <stdexcept>
#include <cassert>
#include <algorithm>

std::vector<int> CalculateMaxFolds(std::vector<int>& nums) {

    int len = static_cast<int>(nums.size());

    if (len < 1 || len > 100000) {
        throw std::invalid_argument("Array size out of valid range.");
    }
    
    for (int i = 0; i < len; ++i) {
        if (nums[i] < 1 || nums[i] > len) {
            throw std::invalid_argument("Array element out of valid range.");
        }
    }
    
    int reduction_count = 0;
    std::unordered_map<int, int> array_elements;
    std::vector<int> min_jumps(len + 1, INT_MAX), 
                     sequence_count_1(len + 1), 
                     sequence_count_2(len + 1), 
                     continuation_1(len + 1, -1), 
                     continuation_2(len + 1);
    std::vector<std::vector<int>> subsequences(len + 1);
    int current_position = 0, element_index = 0;
    std::vector<int> result;
    
    for (int i = 1; i <= len; ++i) {
        array_elements[++current_position] = nums[element_index++];
        subsequences[current_position].clear();
        min_jumps[current_position] = INT_MAX;
        
        if (array_elements[current_position] == array_elements[current_position - 1]) {
            subsequences[current_position].push_back(1);
        }
        
        for (int jump_length : subsequences[current_position - 1]) {
            if (i - 2 * jump_length - 1 > 0 && array_elements[current_position] == array_elements[current_position - 2 * jump_length - 1]) {
                subsequences[current_position].push_back(jump_length + 1);
            }
        }
        
        for (int jump_length : subsequences[current_position]) {
            min_jumps[current_position] = std::min(min_jumps[current_position], jump_length);
        }
        
        if (min_jumps[current_position] < INT_MAX && std::find(subsequences[current_position - min_jumps[current_position]].begin(), subsequences[current_position - min_jumps[current_position]].end(), min_jumps[current_position]) != subsequences[current_position - min_jumps[current_position]].end()) {
            current_position -= 2 * min_jumps[current_position];
            reduction_count += 2;
        }
        
        if (min_jumps[current_position] < INT_MAX) {
            sequence_count_1[current_position] = sequence_count_1[current_position - min_jumps[current_position]] + 1;
            continuation_1[current_position] = (continuation_1[current_position - min_jumps[current_position]] != -1) ? continuation_1[current_position - min_jumps[current_position]] : current_position - min_jumps[current_position];
        } else {
            sequence_count_1[current_position] = 0;
            continuation_1[current_position] = -1;
        }
        
        continuation_2[current_position] = continuation_2[current_position - 1];
        sequence_count_2[current_position] = sequence_count_2[current_position - 1];
        
        if (!((current_position - continuation_2[current_position]) & 1) && std::find(subsequences[current_position].begin(), subsequences[current_position].end(), (current_position - continuation_2[current_position]) >> 1) != subsequences[current_position].end()) {
            sequence_count_2[current_position]++;
            continuation_2[current_position] = (continuation_2[current_position] + current_position) >> 1;
        }
        
        result.push_back(sequence_count_1[current_position] + sequence_count_2[current_position] - (continuation_1[current_position] == continuation_2[current_position]) + reduction_count);
    }
    
    return result;
}

#include <iostream>
#include <vector>
#include <unordered_map>
#include <climits>
#include <stdexcept>
#include <cassert>
#include <algorithm>

int main() {
   
    return 0;
}

