/*
Link: https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/description/

Julie is given an undirected graph (the "original graph") with len nodes labeled from 0 to len - 1. She decides to subdivide each edge in the graph into a chain 
of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D vector of edges where edges[i] = [u_i, v_i, cnt_i] indicates that there is an edge between nodes u_i and v_i in the original graph, 
and cnt_i is the total number of new nodes that you will subdivide the edge into. 

Note that cnt_i == 0 means you will not subdivide the edge.

To subdivide the edge [u_i, v_i], replace it with (cnt_i + 1) new edges and cnt_i new nodes. The new nodes are x_1, x_2, ..., x_cnt_i, and the new edges 
are [u_i, x_1], [x_1, x_2], [x_2, x_3], ..., [x_cnt_i-1, x_cnt_i], [x_cnt_i, v_i].

In this new graph, Julie wants to know how many nodes are reachable from node 0, where a node is reachable if the distance is max_moves or less.

Given the original graph and max_moves, return the number of nodes that are reachable from node 0 in the new graph.

Create a C++ Function ReachableNodes that will return an integer denoting the number of nodes that are reachable from node 0 in the new graph.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


Input Type:

A vector<vector<int>> denoting edges
An integer denoting max_moves
An integer denoting len

Input Constraints:

The length of edges should be at least 0 and at most min(len * (len - 1) / 2, 10^4) inclusive.
Each edge should be a vector of size 3.
Each value of u_i should be in the range [0, len - 1] inclusive.
Each value of v_i should be in the range [0, len - 1] inclusive.
There are no multiple edges in the graph
Each value of cnt_i should be in the range [0, 10^4] inclusive.
Each value of max_moves should be in the range [0, 10^9] inclusive.
The value of len should be at least 1 and at most 3000 inclusive.

*/
