/*
Link: https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/description/

Julie is given an undirected graph (the "original graph") with len nodes labeled from 0 to len - 1. She decides to subdivide each edge in the graph into a chain 
of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D vector of edges where edges[i] = [u_i, v_i, cnt_i] indicates that there is an edge between nodes u_i and v_i in the original graph, 
and cnt_i is the total number of new nodes that you will subdivide the edge into. 

Note that cnt_i == 0 means you will not subdivide the edge.

To subdivide the edge [u_i, v_i], replace it with (cnt_i + 1) new edges and cnt_i new nodes. The new nodes are x_1, x_2, ..., x_cnt_i, and the new edges 
are [u_i, x_1], [x_1, x_2], [x_2, x_3], ..., [x_cnt_i-1, x_cnt_i], [x_cnt_i, v_i].

In this new graph, Julie wants to know how many nodes are reachable from node 0, where a node is reachable if the distance is max_moves or less.

Given the original graph and max_moves, return the number of nodes that are reachable from node 0 in the new graph.

Create a C++ Function ReachableNodes that will return an integer denoting the number of nodes that are reachable from node 0 in the new graph.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


Input Type:

A vector<vector<int>> denoting edges
An integer denoting max_moves
An integer denoting len

Input Constraints:

The length of edges should be at least 0 and at most min(len * (len - 1) / 2, 10^4) inclusive.
Each edge should be a vector of size 3.
Each value of u_i should be in the range [0, len - 1] inclusive.
Each value of v_i should be in the range [0, len - 1] inclusive.
There are no multiple edges in the graph
Each value of cnt_i should be in the range [0, 10^4] inclusive.
Each value of max_moves should be in the range [0, 10^9] inclusive.
The value of len should be at least 1 and at most 3000 inclusive.

*/

#include <vector>
#include <queue>
#include <stdexcept>
#include <cassert>
#include <set>

    void Dijkstra(std::vector<int>& distances, std::vector<std::vector<std::pair<int, int>>>& graph, int max_moves) {
        std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>> priority_queue;
        priority_queue.push({max_moves, 0});
        distances[0] = max_moves;

        while (!priority_queue.empty()) {
            int remaining_moves = priority_queue.top().first;
            int node = priority_queue.top().second;
            priority_queue.pop();

            if (remaining_moves == distances[node]) {
                for (std::size_t i = 0; i < graph[node].size(); ++i) {
                    int adjacent_node = graph[node][i].first;
                    int edge_weight = graph[node][i].second;

                    if (remaining_moves - (edge_weight + 1) >= 0 && distances[adjacent_node] < (remaining_moves - (edge_weight + 1))) {
                        distances[adjacent_node] = remaining_moves - (edge_weight + 1);
                        priority_queue.push({remaining_moves - (edge_weight + 1), adjacent_node});
                    }
                }
            }
        }
    }

    int ReachableNodes(std::vector<std::vector<int>>& edges, int max_moves, int len) {
        if (len < 1 || len > 3000 || len < 0 || len> 1000000000 || edges.size() > std::min(len * (len - 1) / 2, 10000)) {
            throw std::invalid_argument("Input constraints are violated.");
        }
           std::set<std::pair<int, int>> edge_set;
        for (const vector<int>& edge : edges) {
            if (edge.size() != 3 || edge[0] < 0 || edge[0] >= len || edge[1] < 0 || edge[1] >= len|| edge[2] < 0 || edge[2] > 10000) {
                throw std::invalid_argument("Each edge must be a vector of size 3 with valid u_i, v_i, and cnt_i.");
            }
          
            if (edge[0] !=  edge[1] ) { 
            if (edge_set.count({edge[0],  edge[1] }) > 0 || edge_set.count({ edge[1] , edge[0]}) > 0) {
                throw std::invalid_argument("Multiple edges are not allowed between nodes.");
            }
            edge_set.insert({ edge[0] ,  edge[1] });
        }
        }
      
       if (max_moves < 0 || max_moves > 1000000000) {
        throw std::invalid_argument("The value of max_moves should be in the range [0, 10^9] inclusive.");
    }


        

        std::vector<int> distances(len, -1);
        std::vector<std::vector<std::pair<int, int>>> graph(len);

        for (std::size_t i = 0; i < edges.size(); ++i) {
            graph[edges[i][0]].emplace_back(edges[i][1], edges[i][2]);
            graph[edges[i][1]].emplace_back(edges[i][0], edges[i][2]);
        }

        Dijkstra(distances, graph, max_moves);

        int result = 0;

        for (std::size_t i = 0; i < edges.size(); ++i) {
            int sum_1 = (distances[edges[i][0]] != -1) ? distances[edges[i][0]] : 0;
            int sum_2 = (distances[edges[i][1]] != -1) ? distances[edges[i][1]] : 0;
            result += std::min(edges[i][2], sum_1 + sum_2);
        }

        for (int distance : distances) {
            if (distance != -1) {
                ++result;
            }
        }

        return result;
    }


int main() {
  
  
// TEST
std::vector<std::vector<int>> edges_1 = {{0, 1, 2}, {1, 2, 3}};
int max_moves_1 = 5;
int len_1 = 3;
int expected_1 = 6;
int result_1 = ReachableNodes(edges_1, max_moves_1, len_1);
assert(result_1 == expected_1);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_2 = {{0, 1, 1}, {1, 2, 2}, {2, 0, 1}};
int max_moves_2 = 10;
int len_2 = 3;
int expected_2 = 7;
int result_2 = ReachableNodes(edges_2, max_moves_2, len_2);
assert(result_2 == expected_2);
 //TEST_END
   
  
// TEST
std::vector<std::vector<int>> edges_3 = {{0, 1, 3}, {0, 2, 4}, {1, 2, 2}};
int max_moves_3 = 8;
int len_3 = 3;
int expected_3 = 12;
int result_3 = ReachableNodes(edges_3, max_moves_3, len_3);
assert(result_3 == expected_3);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_4 = {{0, 1, 2}, {1, 2, 3}, {2, 0, 4}};
int max_moves_4 = 12;
int len_4 = 3;
int expected_4 = 12;
int result_4 = ReachableNodes(edges_4, max_moves_4, len_4);
assert(result_4 == expected_4);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_5 = {{0, 1, 1}, {1, 2, 2}, {2, 0, 3}};
int max_moves_5 = 6;
int len_5 = 3;
int expected_5 = 9;
int result_5 = ReachableNodes(edges_5, max_moves_5, len_5);
assert(result_5 == expected_5);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_6 = {{0, 1, 3}, {0, 2, 2}, {1, 2, 4}};
int max_moves_6 = 12;
int len_6 = 3;
int expected_6 = 12;
int result_6 = ReachableNodes(edges_6, max_moves_6, len_6);
assert(result_6 == expected_6);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_7 = {{0, 1, 2}, {1, 2, 1}};
int max_moves_7 = 5;
int len_7 = 3;
int expected_7 = 6;
int result_7 = ReachableNodes(edges_7, max_moves_7, len_7);
assert(result_7 == expected_7);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_8 = {{0, 1, 3}, {0, 2, 1}};
int max_moves_8 = 7;
int len_8 = 3;
int expected_8 = 7;
int result_8 = ReachableNodes(edges_8, max_moves_8, len_8);
assert(result_8 == expected_8);
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_9 = {{0, 1, 4}, {1, 2, 3}};
int max_moves_9 = 9;
int len_9 = 3;
int expected_9 = 10;
int result_9 = ReachableNodes(edges_9, max_moves_9, len_9);
assert(result_9 == expected_9);
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_10(1e5, std::vector<int>(3,2));
int max_moves_10 = 5;
int len_10 = 3;
try {
    ReachableNodes(edges_10, max_moves_10, len_10);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_11 = {{0, 1, 1}, {1, 2, 2}, {2, 0, 1}};
int max_moves_11 = -5; 
int len_11 = 3;
try {
    ReachableNodes(edges_11, max_moves_11, len_11);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_12 = {{0, 1, 3}, {0, 2, 4}, {1, 2, 2}};
int max_moves_12 = 8;
int len_12 = 0; 
try {
    ReachableNodes(edges_12, max_moves_12, len_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_13 = {{0, 1}, {1, 2, 2}, {2, 0, 1}};
int max_moves_13 = 10;
int len_13 = 3;
try {
    ReachableNodes(edges_13, max_moves_13, len_13);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_14 = {{0, 1, 1}, {1, 2, 2}, {2, 3, 1}};
int max_moves_14 = 6;
int len_14 = 3;
try {
    ReachableNodes(edges_14, max_moves_14, len_14);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_15 = {{0, 1, 1}, {1, 2, 2}, {2, 0, 3}};
int max_moves_15 = -7;
int len_15 = -3;
try {
    ReachableNodes(edges_15, max_moves_15, len_15);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_16 = {{0, 1, 2}, {1, 2, 1}};
int max_moves_16 = 10000000000; 
int len_16 = 3;
try {
    ReachableNodes(edges_16, max_moves_16, len_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST
std::vector<std::vector<int>> edges_17 = {{0, 1, 3}, {0, 2, 1}};
int max_moves_17 = 7;
int len_17 = 3001; 
try {
    ReachableNodes(edges_17, max_moves_17, len_17);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_18 = {{0, 1, 2}, {1, 2, 3}};
int max_moves_18 = -5; 
int len_18 = 3;
try {
    ReachableNodes(edges_18, max_moves_18, len_18);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_19 = {{0, 1, 1}, {1, 2, 2}, {2, 0, 1}};
int max_moves_19 = 10;
int len_19 = -3; 
try {
    ReachableNodes(edges_19, max_moves_19, len_19);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<std::vector<int>> edges_20 = {{0, -1995, -99}, {-1, -5452, -8892}, {-2, 0, -984515}};
int max_moves_20 = 10;
int len_20 = -3; 
try {
    ReachableNodes(edges_20, max_moves_20, len_20);
    assert(false); 
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
  
  
    return 0;
}
