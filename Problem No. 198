/*
Link: https://codeforces.com/contest/1536/problem/F

Jessica and her friend James are playing a game on a circular board with num cells. The cells are numbered from 1 to num_cells such that each 
cell i (1 ≤ i ≤ num_cells-1) is adjacent to cell i+1 and cell 1 is adjacent to cell num. Initially, each cell is empty.

Jessica and James take turns placing either an A or a B on the board, with Akmar going first. The letter must be placed on an empty cell. 
In addition, the letter cannot be placed adjacent to a cell containing the same letter.

A player loses when it is their turn and there are no more valid moves.

Output the number of possible distinct games where both players play optimally modulo 10^9 + 7. Note that we only consider games where some player has lost 
and there are no more valid moves.

Two games are considered distinct if the number of turns is different or for some turn, the letter or cell number that the letter is placed on were different.

A move is considered optimal if the move maximizes the player's chance of winning, assuming the other player plays optimally as well. More formally, if the 
player who has to move has a winning strategy, they have to make a move after which they will still have a winning strategy. If they do not, they can make any move.

Create a C++ function CountDistinctGames that will return an integer denoting the number of possible distinct games where both players play optimally 
modulo 10^9 + 7.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

An integer num denoting the number of cells on the board

Input Constraints

The value of num should be in the range [2, 10^6] inclusive.
*/

#include <vector>
#include <stdexcept>
#include <cassert>



int ComputePower(int base_val, int exponent_val = 1000000005) {
    int result_val = 1;
    const int modulus_val = 1000000007;
    while (exponent_val) {
        if (exponent_val & 1) {
            result_val = static_cast<long long>(result_val) * base_val % modulus_val;
        }
        base_val = static_cast<long long>(base_val) * base_val % modulus_val;
        exponent_val >>= 1;
    }
    return result_val;
}

void ComputeFactorials(int max_value, std::vector<int>& factorials, std::vector<int>& inverses) {
    factorials[0] = 1;
    const int modulus_val = 1000000007;
    for (int i = 1; i <= max_value; ++i) {
        factorials[i] = static_cast<long long>(factorials[i - 1]) * i % modulus_val;
    }
    inverses[max_value] = ComputePower(factorials[max_value]);
    for (int i = max_value; i > 0; --i) {
        inverses[i - 1] = static_cast<long long>(inverses[i]) * i % modulus_val;
    }
}

int ComputeCombination(int x_val, int y_val, const std::vector<int>& factorials, const std::vector<int>& inverses) {
    if (y_val < 0 || x_val < y_val) {
        return 0;
    }
    const int modulus_val = 1000000007;
    return static_cast<long long>(factorials[x_val]) * inverses[y_val] % modulus_val * inverses[x_val - y_val] % modulus_val;
}

int CountDistinctGames(int num) {
    if (num < 2 || num > 1000000) {
        throw std::invalid_argument("num must be between 2 and 1000000 inclusive.");
    }

    std::vector<int> factorials(num + 1);
    std::vector<int> inverses(num + 1);
    ComputeFactorials(num, factorials, inverses);
    const int modulus_val = 1000000007;

    int result_val = 0;
    for (int i = 2; i <= num; i += 2) {
        result_val = (2LL * factorials[i] % modulus_val * 
                     (ComputeCombination(i, num - i, factorials, inverses) + 
                      ComputeCombination(i - 1, num - i - 1, factorials, inverses)) + result_val) % modulus_val;
    }
    return result_val;
}


#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
   
  //TEST
    int num_1 = 2;
    int expected_1 = 4;
    int result_1 = CountDistinctGames(num_1);
    assert(result_1 == expected_1);
    //TEST_END

    //TEST
    int num_2 = 10;
    int expected_2 = 10116000;
    int result_2 = CountDistinctGames(num_2);
     assert(result_2 == expected_2);
    //TEST_END

    //TEST
    int num_3 = 100;
    int expected_3 = 418894687;
    int result_3 = CountDistinctGames(num_3);
   assert(result_3 == expected_3);
    //TEST_END

    //TEST
    int num_4 = 1000;
    int expected_4 = 213404205;
    int result_4 = CountDistinctGames(num_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    int num_5 = 5000;
    int expected_5 = 237524386;
    int result_5 = CountDistinctGames(num_5);
   assert(result_5 == expected_5);
    //TEST_END

    //TEST
    int num_6 = 10000;
    int expected_6 = 751662175;
    int result_6 = CountDistinctGames(num_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    int num_7 = 50000;
    int expected_7 = 916881997;
    int result_7 = CountDistinctGames(num_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    int num_8 = 100000;
    int expected_8 = 53713907;
    int result_8 = CountDistinctGames(num_8);
  assert(result_8 == expected_8);
    //TEST_END

    //TEST
    int num_9 = 1000000;
    int expected_9 = 948343669;
    int result_9 = CountDistinctGames(num_9);
   assert(result_9 == expected_9);
    //TEST_END



    //TEST
    int num_10 = 1;
    try {
        CountDistinctGames(num_10);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int num_11 = 1000001;
    try {
        CountDistinctGames(num_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int num_12 = 0;
    try {
        CountDistinctGames(num_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int num_13 = -100;
    try {
        CountDistinctGames(num_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int num_14 = -1;
    try {
        CountDistinctGames(num_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    return 0;
}

