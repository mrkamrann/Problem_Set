/*
Link: https://codeforces.com/contest/380/problem/D

Harry Potter is interested in the seating arrangement in a cinema theater hall in Sereja's city. The hall has num_seats seats denoted by vector seats 
the i-th integer shows either the index of the person (index in the entering queue) with the ticket for the i-th seat or a 0 if the index is not known, lined up 
in front of one large screen. Each seat has slots for personal possessions to the left and to the right of it. Any two adjacent seats share exactly one slot. The figure below shows the 
arrangement of seats and slots for num_seats = 4.

Today it's the premiere of a movie called "Dry Hard". All the tickets for the seats have been sold. There is a very strict controller at the entrance to the 
theater, so all num_seats people will come into the hall one by one. As soon as a person enters the hall, he immediately (momentarily) takes his seat and occupies 
all empty slots to the left and right of him. If there are no empty slots, the person gets upset and leaves.

Since people are not very constant, it's hard to predict the order in which viewers will enter the hall. For some seats, Harry Potter knows the number of the 
viewer (his number in the entering queue of the viewers) who will take the seat. For others, it can be any order.

Being a programmer and mathematician, Harry Potter wonders how many ways there are for the people to enter the hall such that nobody gets upset. As the number 
can be quite large, print it modulo 1000000007 (10^9 + 7).

You can assume that the index of the person who enters the cinema hall is a unique integer from 1 to num_seats. 
The person with index 1 comes first, the person with index 2 comes second, and so on.

Return the remainder after dividing the number of ways people can enter the hall without anyone getting upset by 1000000007 (10^9 + 7).

Create a C++ Function CountSeatingArrangements that will return an integer representing the number of valid seating arrangements modulo 1000000007. 

Use appropriate Error Handling using the stdexcept library for invalid test cases.

Input Type

A vector<int> denoting seats

Input Constraints

The length of seats should be at least 1 and at most 100000 inclusive.
Each value of seats should be in the range [0, num_seats] inclusive.
All positive values in seats are unique integers from 1 to num_seats.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>
#include <set>



long long Combination(int x_val, int y_val, const std::vector<long long>& factorial, const std::vector<long long>& inv_factorial) {
   long long modulus = 1000000007LL;
    return factorial[x_val + y_val] * inv_factorial[x_val] % modulus * inv_factorial[y_val] % modulus;
}

long long Compute(int left, int right, const std::vector<int>& seats, const std::vector<int>& prefix_sum, const std::vector<long long>& factorial, const std::vector<long long>& inv_factorial) {
  
    long long modulus = 1000000007LL;
  
    if (prefix_sum[left] == prefix_sum[right]) {
        long long power_of_two = 1;
        for (int i = 0; i < right - left - 1; i++) {
            power_of_two = power_of_two * 2 % modulus;
        }
        return power_of_two;
    }

    int p_val = left, q_val = right - 1;
    while (p_val < right && seats[p_val] == 0) {
        p_val++;
    }
    while (q_val >= left && seats[q_val] == 0) {
        q_val--;
    }

    long long result = 0;

    if (p_val == q_val && seats[p_val] == 1) {
        return Combination(p_val - left, right - p_val - 1, factorial, inv_factorial);
    }

    if (seats[p_val] >= seats[q_val]) {
        int left_2 = p_val, right_2 = left_2 + seats[p_val];
        if (right_2 > q_val && right_2 <= right) {
            result += Compute(left_2 + 1, right_2, seats, prefix_sum, factorial, inv_factorial) * Combination(left_2 - left, right - right_2, factorial, inv_factorial);
        }
    }

    if (seats[p_val] <= seats[q_val]) {
        int right_2 = q_val + 1, left_2 = right_2 - seats[q_val];
        if (left_2 >= left && left_2 <= p_val) {
            result += Compute(left_2, right_2 - 1, seats, prefix_sum, factorial, inv_factorial) * Combination(left_2 - left, right - right_2, factorial, inv_factorial);
        }
    }

    return result % modulus;
}

int CountSeatingArrangements(const std::vector<int>& seats) {
  int num_seats = seats.size();

    if (num_seats < 1 || num_seats > 1e5) {
        throw std::invalid_argument("Number of seats out of bounds");
    }
    
    std::set<int> unique_values;
    for (int seat : seats) {
        if (seat < 0 || seat > num_seats) {
            throw std::invalid_argument("Invalid seat number");
        }
        if (seat != 0) {
            if (unique_values.count(seat)){
                throw std::invalid_argument("Duplicate seat number");
            }
            unique_values.insert(seat);
        }
    }
    long long modulus = 1000000007LL;
    std::vector<int> prefix_sum(num_seats + 1, 0);
    for (int i = 0; i < num_seats; i++) {
        prefix_sum[i + 1] = prefix_sum[i] + (seats[i] == 0 ? 0 : 1);
    }

    std::vector<long long> factorial(100010), inv(100010), inv_factorial(100010);
    inv[1] = factorial[0] = inv_factorial[0] = 1;
    for (int i = 2; i < 100010; i++) {
        inv[i] = (modulus - modulus / i) * inv[modulus % i] % modulus;
    }
    for (int i = 1; i < 100010; i++) {
        factorial[i] = factorial[i - 1] * i % modulus;
        inv_factorial[i] = inv_factorial[i - 1] * inv[i] % modulus;
    }

    return Compute(0, num_seats, seats, prefix_sum, factorial, inv_factorial);
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>
#include <set>

int main() {
 
//TEST
std::vector<int> seats_1 = {0, 2, 3, 0, 5};
int expected_1 = 1;
int result_1 = CountSeatingArrangements(seats_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> seats_2 = {0,0,1, 0, 2, 4, 0,0,0};
int expected_2 = 0;
int result_2 = CountSeatingArrangements(seats_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> seats_3 = {0, 0, 0, 0, 0};
int expected_3 = 16;
int result_3 = CountSeatingArrangements(seats_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> seats_4 = {0, 1, 2, 3, 4, 5};
int expected_4 = 1;
int result_4 = CountSeatingArrangements(seats_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> seats_5 = {0};
int expected_5 = 1;
int result_5 = CountSeatingArrangements(seats_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> seats_6 = {1};
int expected_6 = 1;
int result_6 = CountSeatingArrangements(seats_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> seats_7 = {0, 0, 2, 0, 0};
int expected_7 = 6;
int result_7 = CountSeatingArrangements(seats_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> seats_8 = {0, 1, 0, 0, 5, 0, 0, 3, 0};
int expected_8 = 0;
int result_8 = CountSeatingArrangements(seats_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> seats_9 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int expected_9 = 1;
int result_9 = CountSeatingArrangements(seats_9);
assert(result_9 == expected_9);
//TEST_END


//TEST
std::vector<int> seats_10 = {};
try {
    CountSeatingArrangements(seats_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_11 = {0, 0, 0, -1};
try {
    CountSeatingArrangements(seats_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_12 = {0, 0, 100001};
try {
    CountSeatingArrangements(seats_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_13(1e6, 0);
try {
    CountSeatingArrangements(seats_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_14 = {0, 0, 2, 0, -3};
try {
    CountSeatingArrangements(seats_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_15 = {0, 1, 0, 0, 200001};
try {
    CountSeatingArrangements(seats_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_16 = {0, 0, 0, 0, -100};
try {
    CountSeatingArrangements(seats_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_17 = {0, 1, 2, 3, 0, 4, 0, 4};
try {
    CountSeatingArrangements(seats_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_18 = {0, 0, 0, 0, 0, 1000001};
try {
    CountSeatingArrangements(seats_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> seats_19 = {0, -1, -2, -3, 4, 5};
try {
    CountSeatingArrangements(seats_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
    return 0;
}
