/*
Link: https://codeforces.com/contest/288/problem/E

Shyam the Penguin knows that lucky numbers are positive integers that contain only lucky digits 4 and 7 in their decimal representation. For example,
numbers 47, 744, and 4 are lucky, while 5, 17, and 467 are not.

Shyam has two positive integers, left and right (left < right), both of which are lucky numbers. Moreover, their lengths (the number of digits in their decimal 
representation without leading zeroes) are equal.

Let's assume that n is the number of distinct lucky numbers, each of which cannot be greater than right or less than left, and a_i is the i-th (in increasing order) 
number of them. Find a_1 * a_2 + a_2 * a_3 + ... + a_(n-1) * a_n. Since the answer can be rather large, print the remainder after dividing it by 1000000007 (10^9 + 7).

Return a single number — the answer to the problem modulo 1000000007 (10^9 + 7).

Create a C++ function CalculateLuckyProductSum that will return a long long denoting the calculated sum of products of consecutive lucky numbers within the given 
range.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

A string denoting left
A string denoting right

Input Constraints: 

The length of left and right should be equal and at least 1 and at most 100000 inclusive.
left and right must be lucky numbers containing only the digits 4 and 7.
It is guaranteed that 1 ≤ left < right ≤ 10^100000.

*/

#include <iostream>
#include <string>
#include <stdexcept>
#include <cassert>
#include <algorithm>

long long CalculateF(const std::string& to_str) {
  
    const long long modulus = 1000000007LL;
    long long a_val, old_a_val, b_val, old_b_val, c_val, old_c_val, n_val, len, temp_1, temp_2;
    len = to_str.size();
    a_val = 0;
    b_val = 0;
    c_val = 0;
    n_val = 1;
    temp_1 = 0;
    temp_2 = 0;

    for (int i = 1; i <= len; i++) {
        old_a_val = a_val;
        old_b_val = b_val;
        old_c_val = c_val;

        a_val = ((200 * a_val) % modulus + (220 * b_val) % modulus + (65 * n_val) % modulus) % modulus;
        b_val = ((20 * b_val) % modulus + (11 * n_val) % modulus) % modulus;
        c_val = ((100 * (old_a_val + old_c_val)) % modulus + (110 * old_b_val) % modulus + 70 * (old_b_val + modulus - temp_1) % modulus + 40 * (old_b_val + modulus - temp_2) + (28 * (2 * n_val + modulus - 1)) % modulus) % modulus;

        temp_1 = (10 * temp_1 + 4) % modulus;

        if (to_str[i - 1] == '4') {
            a_val = (a_val + modulus - (100 * ((temp_2 * temp_2) % modulus) + 140 * temp_2 + 49) % modulus) % modulus;
            b_val = (b_val + modulus - (10 * temp_2 + 7) % modulus) % modulus;
            c_val = (c_val + modulus - (100 * ((temp_2 * temp_2) % modulus) + 110 * temp_2 + 28) % modulus) % modulus;
            temp_2 = (10 * temp_2 + 4) % modulus;
            n_val = (2 * n_val - 1) % modulus;
        } else {
            temp_2 = (10 * temp_2 + 7) % modulus;
            n_val = (2 * n_val) % modulus;
        }
    }
    return c_val;
}


long long CalculateLuckyProductSum(const std::string& left, const std::string& right) {
  
  if (left.empty() || right.empty()) {
    throw std::invalid_argument("Invalid input: 'left' and 'right' must be non-empty.");
}

if (left.size() != right.size()) {
    throw std::invalid_argument("Invalid input: 'left' and 'right' must have the same length.");
}

if (left.size() > 100000 || right.size() > 100000) {
    throw std::invalid_argument("Invalid input: Length of 'left' and 'right' must be at most 100000.");
}

if (left >= right) {
    throw std::invalid_argument("Invalid input: 'left' must be less than 'right'.");
}

if (!std::all_of(left.begin(), left.end(), [](char character) { return  character == '4' ||  character == '7'; })) {
    throw std::invalid_argument("Invalid input: 'left' must be a lucky number (contain only '4' or '7').");
}

if (!std::all_of(right.begin(), right.end(), [](char character) { return  character == '4' ||  character == '7'; })) {
    throw std::invalid_argument("Invalid input: 'right' must be a lucky number (contain only '4' or '7').");
}


    return (CalculateF(right) + 1000000007LL - CalculateF(left)) % 1000000007LL;
}

#include <iostream>
#include <string>
#include <stdexcept>
#include <cassert>
#include <algorithm>


int main() {
   
   //TEST
std::string left_1 = "4";
std::string right_1 = "7";
long long expected_1 = 28;
long long result_1 = CalculateLuckyProductSum(left_1, right_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::string left_2 = "44";
std::string right_2 = "77";
long long expected_2 = 11244;
long long result_2 = CalculateLuckyProductSum(left_2, right_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::string left_3 = "444";
std::string right_3 = "777";
long long expected_3 = 2726676;
long long result_3 = CalculateLuckyProductSum(left_3, right_3);
 assert(result_3 == expected_3);
//TEST_END

//TEST
std::string left_4 = "4444";
std::string right_4 = "7777";
long long expected_4 = 590030340;
long long result_4 = CalculateLuckyProductSum(left_4, right_4);
 assert(result_4 == expected_4);
//TEST_END

//TEST
std::string left_5 = "4477";
std::string right_5 = "7744";
long long expected_5 = 349665552;
long long result_5 = CalculateLuckyProductSum(left_5, right_5);
 assert(result_5 == expected_5);
//TEST_END

//TEST
std::string left_6 = "44444";
std::string right_6 = "77777";
long long expected_6 = 401420814;
long long result_6 = CalculateLuckyProductSum(left_6, right_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::string left_7 = "474747";
std::string right_7 = "747474";
long long expected_7 = 114315943;
long long result_7 = CalculateLuckyProductSum(left_7, right_7);
 assert(result_7 == expected_7);
//TEST_END

//TEST
std::string left_8 = "4444444";
std::string right_8 = "7777777";
long long expected_8 = 445457815;
long long result_8 = CalculateLuckyProductSum(left_8, right_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::string left_9 = "4444444444";
std::string right_9 = "7777777777";
long long expected_9 = 792254774;
long long result_9 = CalculateLuckyProductSum(left_9, right_9);
 assert(result_9 == expected_9);
//TEST_END

//TEST
std::string left_10 = "";
std::string right_10 = "4";
try {
    CalculateLuckyProductSum(left_10, right_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_11 = "4";
std::string right_11 = "";
try {
    CalculateLuckyProductSum(left_11, right_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_12 = "447";
std::string right_12 = "47";
try {
    CalculateLuckyProductSum(left_12, right_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_13 = "444";
std::string right_13 = "4444";
try {
    CalculateLuckyProductSum(left_13, right_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_14 = "4";
std::string right_14 = "8";
try {
    CalculateLuckyProductSum(left_14, right_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_15 = "4a";
std::string right_15 = "77";
try {
    CalculateLuckyProductSum(left_15, right_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_16 = "444444";
std::string right_16 = "777777777777";
try {
    CalculateLuckyProductSum(left_16, right_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_17 = "777";
std::string right_17 = "444";
try {
    CalculateLuckyProductSum(left_17, right_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string left_18 = "447744774477";
std::string right_18 = "744774478447";
try {
    CalculateLuckyProductSum(left_18, right_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


    return 0;
}

