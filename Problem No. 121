/*
Link : https://codeforces.com/problemset/problem/1120/E

A positive integer input_number is given. Harry claims that he knows such a positive integer n that if one multiplies n by input_number, the sum of its digits 
decreases input_number times. In other words, S(input_number * n) = S(n) / input_number, where S(x) denotes the sum of digits of the number x.

Find out if what Harry told can be true.

Your task is to return a true If there exists such number else, is no such number n, return false.

Otherwise print any appropriate positive integer n.

Create a C++ function GenerateString that will return a boolean denoting true if an appropriate positive integer n exists. If there is no such number n, return false. 

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting input_number

Input Constraints:

The value of input_number should be between 2 and 10^3 inclusive.

*/

#include <string>
#include <stdexcept>
#include <cassert>


 long long CalculateGcd(long long u_val, long long v_val) {
        while (v_val) {
            u_val %= v_val;
            std::swap(u_val, v_val);
        }
        return u_val;
    }

     long long SumOfDigits(long long num) {
        long long result = 0;
        while (num) {
            result += num % 10;
            num /= 10;
        }
        return result;
    }

 bool GenerateString(long long input_number) {
      
        if (input_number < 2 || input_number > 1000) {
            throw std::invalid_argument("Input must be between 2 and 103 inclusive.");
        }

        const int zero_padding = 5;
        const long long max_number = 500000;
        std::string zero_string(zero_padding, '0');
        std::string number_string, result_string;
        long long sum = 0;
        long long temp = 1;
        long long numerator, gcd_value;

        long long denominator = SumOfDigits(input_number) * input_number - 1;

        for (long long i = 0; temp; ++i) {
            if (number_string.empty() || number_string.back() != '9') {
                if (input_number * (SumOfDigits(input_number - temp) + 1) < sum + 1) {
                    numerator = sum + 1 - input_number * (SumOfDigits(input_number - temp) + 1);
                    gcd_value = CalculateGcd(numerator, denominator);
                    if ((numerator / gcd_value) * (zero_padding + 1) + 
                        (denominator / gcd_value) * (zero_padding + number_string.size()) <= max_number) {
                        number_string.back()++;
                        break;
                    }
                }
            }
            temp *= 10;
            long long quotient = temp / input_number;
            sum += quotient;
            if (!number_string.empty() || quotient) number_string += std::to_string(quotient);
            temp %= input_number;
        }

        if (!temp) {
            if (input_number > sum) {
                return false;
            } else if (input_number == sum) {
                return false;
            }
            numerator = sum - input_number;
            gcd_value = CalculateGcd(numerator, denominator);
        }

  
        return true;
    }

#include <string>
#include <stdexcept>
#include <cassert>

int main() {
  
  //TEST
long long input_number_1 = 200;
bool expected_1 = false;
bool result_1 = GenerateString(input_number_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
long long input_number_2 = 7;
bool expected_2 = true;
bool result_2 = GenerateString(input_number_2);
 assert(result_2 == expected_2);
//TEST_END

//TEST
long long input_number_3 = 50;
bool expected_3 = false;
bool result_3 = GenerateString(input_number_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
long long input_number_4 = 999;
bool expected_4 = true;
bool result_4 = GenerateString(input_number_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
long long input_number_5 = 22;
bool expected_5 = true;
bool result_5 = GenerateString(input_number_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
long long input_number_6 = 30;
bool expected_6 = true;
bool result_6 = GenerateString(input_number_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
long long input_number_7 = 600;
bool expected_7 = true;
bool result_7 = GenerateString(input_number_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
long long input_number_8 = 400;
bool expected_8 = false;
bool result_8 = GenerateString(input_number_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
long long input_number_9 = 16;
bool expected_9 = false;
bool result_9 = GenerateString(input_number_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
long long input_number_10 = 0;
try {
    GenerateString(input_number_10);
    assert(false); 
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long input_number_11 = 1001;
try {
     GenerateString(input_number_11);
    assert(false); 
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long input_number_12 = -1;
try {
    GenerateString(input_number_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
   
    return 0;
}
