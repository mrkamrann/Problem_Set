/*

Link: https://leetcode.com/problems/make-array-strictly-increasing/

Jimmy was a young programmer, always eager to solve new challenges. One day, he encountered an intriguing problem involving two vectors of integers.

Jimmy was given two integer vectors nums_1 and nums_2. His task was to return the minimum number of operations (possibly zero) needed to make nums_1 strictly 
increasing.

In one operation, Jimmy could choose two indices 0 <= i < nums_1.len and 0 <= j < nums_2.len and assign nums_1[i] = nums_2[j], and do the assignment nums_1[i] = nums_2[j].

If there was no way to make nums_1 strictly increasing, he had to return -1.

Create a C++ Function MakeArrayIncreasing that will return an integer denoting minimum number of operations (possibly zero) needed to make nums_1 strictly 
increasing or return -1.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type:

A vector<int> denoting nums_1.
A vector<int> denoting nums_2.

Input Constraints:

1.The length of nums_1 and nums_2 should be between 1 and 2000 inclusive.
2.Each element in nums_1 and nums_2 should be between 0 and 10^9 inclusive.

*/
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

    std::vector<int> Preprocess(std::vector<int>& nums) {
        std::sort(nums.begin(), nums.end());
        int previous = -1;
        std::vector<int> vec;
        for (int i = 0; i < nums.size(); i++) {
            if (previous != nums[i]) {
                vec.push_back(nums[i]);
                previous = nums[i];
            }
        }
        return vec;
    }

    int BinarySearch(int key, std::vector<int>& nums) {
        int left = 0, right = nums.size() - 1;
        int middle, answer = -1;
        while (left <= right) {
            middle = left + (right - left) / 2;
            if (nums[middle] > key) {
                answer = middle;
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }
        return answer;
    }

    int Solve(int index, std::vector<int>& nums, int previous_index, std::vector<int>& num, std::vector<std::vector<int>>& dp_arr) {
        if (index == nums.size()) return 0;
        if (dp_arr[index][previous_index] != -1) return dp_arr[index][previous_index];
        
        int previous;
        if (previous_index == 0) {
            previous = nums[index - 1];
        } else {
            previous = num[previous_index - 1];
        }
        
        int idx = BinarySearch(previous, num);
        if (previous >= nums[index] && idx == -1) {
            return dp_arr[index][previous_index] = 1e9;
        }
        
        int change = 1e9, not_change = 1e9;
        if (idx != -1)
            change = 1 + Solve(index + 1, nums, idx + 1, num, dp_arr);
        if (previous < nums[index])
            not_change = Solve(index + 1, nums, 0, num, dp_arr);

        return dp_arr[index][previous_index] = std::min(change, not_change);
    }

    int MakeArrayIncreasing(std::vector<int>& nums_1, std::vector<int>& nums_2) {
        int len = nums_1.size();
        if (len < 1 || len > 2000) {
            throw std::invalid_argument("The length of nums_1 should be between 1 and 2000 inclusive.");
        }
        for (int val : nums_1) {
            if (val < 0 || val > 1000000000) {
                throw std::invalid_argument("Each element in nums_1 should be between 0 and 10^9 inclusive.");
            }
        }

        int len_2 = nums_2.size();
        if (len_2 < 1 || len_2 > 2000) {
            throw std::invalid_argument("The length of nums_2 should be between 1 and 2000 inclusive.");
        }
        for (int val : nums_2) {
            if (val < 0 || val > 1000000000) {
                throw std::invalid_argument("Each element in nums_2 should be between 0 and 10^9 inclusive.");
            }
        }

        std::vector<int> nums(len + 1);
        for (int i = 0; i < len; i++) {
            nums[i + 1] = nums_1[i];
        }
        nums[0] = -1;

        std::vector<int> num = Preprocess(nums_2);
        int num_size = num.size();
        std::vector<std::vector<int>> dp_arr(len + 1, std::vector<int>(num_size + 1, -1));

        int answer = Solve(1, nums, 0, num, dp_arr);
        if (answer >= 1e9) return -1;
        return answer;
    }



int main(){
  
//TEST
std::vector<int> nums_1_1 = {1, 5, 3, 6, 7};
std::vector<int> nums_2_1 = {1, 3, 2, 4};
int expected_1 = 1; 
int result_1 = MakeArrayIncreasing(nums_1_1, nums_2_1);
assert(result_1 == expected_1);

//TEST_END

//TEST

std::vector<int> nums_1_2 = {1, 2, 3};
std::vector<int> nums_2_2 = {5, 6, 7};
int expected_2 = 0;
int result_2 = MakeArrayIncreasing(nums_1_2, nums_2_2);
assert(result_2 == expected_2);

//TEST_END

//TEST

std::vector<int> nums_1_3 = {1, 5, 3, 6, 7};
std::vector<int> nums_2_3 = {4, 3, 2, 1};
int expected_3 = 1;
int result_3 = MakeArrayIncreasing(nums_1_3, nums_2_3);
assert(result_3 == expected_3);

//TEST_END

//TEST

std::vector<int> nums_1_4 = {1, 5, 3, 6, 7};
std::vector<int> nums_2_4 = {4, 2, 3};
int expected_4 = 1;
int result_4 = MakeArrayIncreasing(nums_1_4, nums_2_4);
assert(result_4 == expected_4);

//TEST_END

//TEST

std::vector<int> nums_1_5 = {1,5,3,6,7};
std::vector<int> nums_2_5 = {4,3,1};
int expected_5 = 2;
int result_5 = MakeArrayIncreasing(nums_1_5, nums_2_5);
assert(result_5 == expected_5);

//TEST_END

//TEST

std::vector<int> nums_1_6 = {1, 2, 3};
std::vector<int> nums_2_6 = {3};
int expected_6 = 0;
int result_6 = MakeArrayIncreasing(nums_1_6, nums_2_6);
assert(result_6 == expected_6);

//TEST_END

//TEST

std::vector<int> nums_1_7 = {1,5,3,6,7};
std::vector<int> nums_2_7 = {1,6,3,3};
int expected_7 = -1;
int result_7 = MakeArrayIncreasing(nums_1_7, nums_2_7);
assert(result_7 == expected_7);

//TEST_END

//TEST

std::vector<int> nums_1_8 = {1, 2, 3};
std::vector<int> nums_2_8 = {3, 4, 4, 4,5,6};
int expected_8 = 0;
int result_8 = MakeArrayIncreasing(nums_1_8, nums_2_8);
assert(result_8 == expected_8);

//TEST_END

//TEST

std::vector<int> nums_1_9 = {1, 2, 3};
std::vector<int> nums_2_9 = {2};
int expected_9 = 0;
int result_9 = MakeArrayIncreasing(nums_1_9, nums_2_9);
assert(result_9 == expected_9);

//TEST_END

std::vector<int> nums_1_10 = {};
std::vector<int> nums_2_10 = {1};
try {
    MakeArrayIncreasing(nums_1_10, nums_2_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> nums_1_11 = {1};
std::vector<int> nums_2_11 = {};
try {
    MakeArrayIncreasing(nums_1_11, nums_2_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> nums_1_12(2001, 1); 
std::vector<int> nums_2_12 = {1};
try {
    MakeArrayIncreasing(nums_1_12, nums_2_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST


std::vector<int> nums_1_13 = {1};
std::vector<int> nums_2_13(2001, 1); 
try {
    MakeArrayIncreasing(nums_1_13, nums_2_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> nums_1_14 = {1, 2, -3};
std::vector<int> nums_2_14 = {1};
try {
    MakeArrayIncreasing(nums_1_14, nums_2_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> nums_1_15 = {1};
std::vector<int> nums_2_15 = {1000000001};
try {
    MakeArrayIncreasing(nums_1_15, nums_2_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END


  return 0;
}



