/*
Link: https://codeforces.com/contest/1278/problem/F

Kylie is conducting an experiment with a deck of cards. The deck consists of column_count cards, and exactly one card is a joker. Kylie performs the following
experiment row_count times: she shuffles the deck, takes the top card of the deck, looks at it, and then returns it into the deck.

Let x_count be the number of times Julie takes the joker out of the deck during this experiment. Assuming that every time Julie shuffles the deck, 
all column_count! possible permutations of cards are equally probable, what is the expected value of x_count^k_value? Print the answer modulo 998244353.

Create a C++ function CalculateExpectedValue that will return an integer denoting the expected value of x_count^k_value modulo 998244353.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

An integer row_count denoting the number of times Kylie performs the experiment
An integer column_count denoting the number of cards in the deck
An integer k_value denoting the exponent

Input Constraints

The value of row_count should be in the range [1, 998244352] inclusive.
The value of column_count should be in the range [1, 998244352] inclusive.
The value of k_value should be in the range [1, 5000] inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


int CalculatePower(int base, int exponent) {
    
    int result = 1;
    int modulus = 998244353;
  
    while (exponent) {
        if (exponent & 1) {
            result = static_cast<long long>(result) * base % modulus;
        }
        exponent >>= 1;
        base = static_cast<long long>(base) * base % modulus;
    }
    return result;
}

int CalculateExpectedValue (int row_count, int column_count, int k_value) {
  
    const int modulus = 998244353; 
  
    if (row_count < 1 || row_count >= modulus) {
        throw std::invalid_argument("row_count is out of bounds");
    }
    if (column_count < 1 || column_count >= modulus) {
        throw std::invalid_argument("column_count is out of bounds");
    }
    if (k_value < 1 || k_value > 5000) {
        throw std::invalid_argument("k_value is out of bounds");
    }
    
    std::vector<std::vector<int>> dp_table(k_value + 1, std::vector<int>(k_value + 1, 0));
    dp_table[0][0] = 1;

    for (int i = 1; i <= k_value; ++i) {
        for (int j = 1; j <= i; ++j) {
            dp_table[i][j] = (static_cast<long long>(dp_table[i - 1][j]) * j + static_cast<long long>(dp_table[i - 1][j - 1]) * (row_count - (j - 1))) % modulus;
        }
    }

    int result = 0;
    for (int i = 1; i <= k_value; ++i) {
        result = (static_cast<long long>(dp_table[k_value][i]) * CalculatePower(CalculatePower(column_count, i), modulus - 2) + result) % modulus;
    }

    return result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
  
//TEST
int row_count_1 = 1;
int column_count_1 = 1;
int k_value_1 = 1;
int expected_1 = 1; 
int result_1 = CalculateExpectedValue(row_count_1, column_count_1, k_value_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int row_count_2 = 10;
int column_count_2 = 10;
int k_value_2 = 2;
int expected_2 = 698771049;
int result_2 = CalculateExpectedValue(row_count_2, column_count_2, k_value_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int row_count_3 = 100;
int column_count_3 = 100;
int k_value_3 = 3;
int expected_3 = 615517473; 
int result_3 = CalculateExpectedValue(row_count_3, column_count_3, k_value_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
int row_count_4 = 1000;
int column_count_4 = 1000;
int k_value_4 = 4;
int expected_4 = 815466927;
int result_4 = CalculateExpectedValue(row_count_4, column_count_4, k_value_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int row_count_5 = 10000;
int column_count_5 = 10000;
int k_value_5 = 5;
int expected_5 = 334698248; 
int result_5 = CalculateExpectedValue(row_count_5, column_count_5, k_value_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int row_count_6 = 998244352;
int column_count_6 = 1;
int k_value_6 = 6;
int expected_6 = 1;
int result_6 = CalculateExpectedValue(row_count_6, column_count_6, k_value_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int row_count_7 = 1;
int column_count_7 = 998244352;
int k_value_7 = 7;
int expected_7 = 998244352; 
int result_7 = CalculateExpectedValue(row_count_7, column_count_7, k_value_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int row_count_8 = 100000;
int column_count_8 = 100000;
int k_value_8 = 8;
int expected_8 = 556432248; 
int result_8 = CalculateExpectedValue(row_count_8, column_count_8, k_value_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int row_count_9 = 5000;
int column_count_9 = 5000;
int k_value_9 = 9;
int expected_9 = 713038332; 
int result_9 = CalculateExpectedValue(row_count_9, column_count_9, k_value_9);
assert(result_9 == expected_9);
//TEST_END

  
//TEST
int row_count_10 = 0;
int column_count_10 = 10;
int k_value_10 = 1;
try {
    CalculateExpectedValue(row_count_10, column_count_10, k_value_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_11 = 10;
int column_count_11 = 0;
int k_value_11 = 1;
try {
    CalculateExpectedValue(row_count_11, column_count_11, k_value_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_12 = 10;
int column_count_12 = 10;
int k_value_12 = 0;
try {
    CalculateExpectedValue(row_count_12, column_count_12, k_value_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_13 = -10;
int column_count_13 = 10;
int k_value_13 = 1;
try {
    CalculateExpectedValue(row_count_13, column_count_13, k_value_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_14 = 10;
int column_count_14 = -10;
int k_value_14 = 1;
try {
    CalculateExpectedValue(row_count_14, column_count_14, k_value_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_15 = 10;
int column_count_15 = 10;
int k_value_15 = -1;
try {
    CalculateExpectedValue(row_count_15, column_count_15, k_value_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_16 = 998244353;
int column_count_16 = 10;
int k_value_16 = 1;
try {
    CalculateExpectedValue(row_count_16, column_count_16, k_value_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_17 = 10;
int column_count_17 = 998244353;
int k_value_17 = 1;
try {
    CalculateExpectedValue(row_count_17, column_count_17, k_value_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int row_count_18 = 10;
int column_count_18 = 10;
int k_value_18 = 5001;
try {
    CalculateExpectedValue(row_count_18, column_count_18, k_value_18);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}

