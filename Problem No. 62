/*

Link: https://leetcode.com/problems/largest-color-value-in-a-directed-graph/description/

Jimmy was a young programmer, always eager to solve new challenges. One day, he came across a fascinating problem involving a directed graph with colored nodes.

Jimmy was given a directed graph of node_count colored nodes and edge_count edges. The nodes were numbered from 0 to node_count - 1.

He was given a string colors where colors[i] was a lowercase English letter representing the color of the ith node in this graph (0-indexed). He was also given a vector<vector<int>> edges where 
edges[j] = [a_j, b_j] indicated that there was a directed edge from node a_j to node b_j.

A valid path in the graph was a sequence of nodes x_1 -> x_2 -> x_3 -> ... -> x_k such that there was a directed edge from xi to x_i+1 for every 1 <= i < k. The color value of the path was the number of nodes 
that were colored the most frequently occurring color along that path.

Jimmy's task was to return the largest color value of any valid path in the given graph, or -1 if the graph contained a cycle.

Create a C++ Function LargestPathValue that will return an integer denoting the largest color value of any valid path in the given graph. 

Use appropriate Error Handling using the stdexcept library for the invalid test cases




Input Type:

A string denoting colors.
A vector<vector<int>> denoting edges.

Input Constraints:

The length of colors is equal to node_count.
The length of edges is equal to edge_count.
The value of node_count should be between 1 and 10^5 inclusive.
The value of edge_count should be between 0 and 10^5 inclusive.
The string colors consists of lowercase English letters.
Each element a_j and b_j in edges should be between 0 and node_count - 1 inclusive.
*/

#include <vector>
#include <string>
#include <stdexcept>
#include <cassert>
#include <algorithm>


    bool DetectCycle(int start, std::vector<std::vector<int>>& adjacency_list, std::vector<int>& visited, std::vector<int>& path_visited, std::vector<int>& topological_order) {
        if (!visited[start]) {
            visited[start] = 1;
            path_visited[start] = 1;

            for (int neighbor : adjacency_list[start]) {
                if (DetectCycle(neighbor, adjacency_list, visited, path_visited, topological_order)) {
                    return true;
                }
            }
            topological_order.push_back(start);
            path_visited[start] = 0;
        } else if (path_visited[start]) {
            return true;
        }
        return false;
    }


    int LargestPathValue(std::string colors, std::vector<std::vector<int>>& edges) {
        int node_count = colors.size();
        if (node_count < 1 || node_count > 100000) {
            throw std::invalid_argument("Invalid input: node_count should be between 1 and 10^5 inclusive.");
        }

        int edge_count = edges.size();
        if (edge_count < 0 || edge_count > 100000) {
            throw std::invalid_argument("Invalid input: edge_count should be between 0 and 10^5 inclusive.");
        }

        std::vector<std::vector<int>> adjacency_list(node_count);
        for (const std::vector<int>& edge : edges) {
            int from_node = edge[0];
            int to_node = edge[1];

            if (from_node < 0 || from_node >= node_count || to_node < 0 || to_node >= node_count) {
                throw std::invalid_argument("Invalid input: each element in edges should be between 0 and node_count - 1 inclusive.");
            }

            adjacency_list[from_node].push_back(to_node);
        }

        for(int i = 0;i<colors.size();++i)
        {
          if(colors[i] < 'a' && colors[i] > 'z')
          {
            throw std::invalid_argument("The string colors consists of lowercase English letters.");
          }
        }

        std::vector<int> visited(node_count, 0);
        std::vector<int> path_visited(node_count, 0);
        std::vector<int> topological_order;

        for (int i = 0; i < node_count; ++i) {
            if (!visited[i]) {
                if (DetectCycle(i, adjacency_list, visited, path_visited, topological_order)) {
                    return -1;
                }
            }
        }

        std::vector<std::vector<int>> dp_arr(node_count, std::vector<int>(26, 0));
        int max_color_value = -1;

        for (int i = topological_order.size() - 1; i >= 0; --i) {
            int node = topological_order[i];
            dp_arr[node][colors[node] - 'a'] += 1;
            max_color_value = std::max(max_color_value, dp_arr[node][colors[node] - 'a']);

            for (int neighbor : adjacency_list[node]) {
                for (int color = 0; color < 26; ++color) {
                    dp_arr[neighbor][color] = std::max(dp_arr[neighbor][color], dp_arr[node][color]);
                }
            }
        }

        return max_color_value;
    }



int main(){
  
//TEST
std::string colors_1 = "abaca";
std::vector<std::vector<int>> edges_1 = {{0, 1}, {0, 2}, {2, 3}, {3, 4}};
int expected_1 = 3;
int result_1 = LargestPathValue(colors_1, edges_1);
assert(result_1 == expected_1);
//TEST_END

//TEST

std::string colors_2 = "a";
std::vector<std::vector<int>> edges_2 = {};
int expected_2 = 1;
int result_2 = LargestPathValue(colors_2, edges_2);
assert(result_2 == expected_2);
//TEST_END

//TEST

std::string colors_3 = "aaa";
std::vector<std::vector<int>> edges_3 = {{0, 1}, {1, 2}};
int expected_3 = 3;
int result_3 = LargestPathValue(colors_3, edges_3);
assert(result_3 == expected_3);
//TEST_END

//TEST

std::string colors_4 = "abc";
std::vector<std::vector<int>> edges_4 = {{0, 1}, {1, 2}};
int expected_4 = 1;
int result_4 = LargestPathValue(colors_4, edges_4);
assert(result_4 == expected_4);
//TEST_END

//TEST

std::string colors_5 = "abacaba";
std::vector<std::vector<int>> edges_5 = {{0, 1}, {1, 2}, {1, 3}, {2, 4}, {3, 5}, {4, 6}};
int expected_5 = 4;
int result_5 = LargestPathValue(colors_5, edges_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

std::string colors_6 = "abcabc";
std::vector<std::vector<int>> edges_6 = {{0, 1}, {1, 2}, {3, 4}, {4, 5}, {0, 3}, {2, 4}};
int expected_6 = 2;
int result_6 = LargestPathValue(colors_6, edges_6);
assert(result_6 == expected_6);
//TEST_END

//TEST

std::string colors_7 = "aabb";
std::vector<std::vector<int>> edges_7 = {{0, 1}, {1, 2}, {2, 3}, {0, 3}};
int expected_7 = 2;
int result_7 = LargestPathValue(colors_7, edges_7);
assert(result_7 == expected_7);
//TEST_END

//TEST

std::string colors_8 = "abab";
std::vector<std::vector<int>> edges_8 = {{0, 1}, {1, 2}, {2, 3}};
int expected_8 = 2;
int result_8 = LargestPathValue(colors_8, edges_8);
assert(result_8 == expected_8);
//TEST_END

//TEST

std::string colors_9 = "abcd";
std::vector<std::vector<int>> edges_9 = {{0, 1}, {1, 2}, {2, 3}};
int expected_9 = 1;
int result_9 = LargestPathValue(colors_9, edges_9);
assert(result_9 == expected_9);
//TEST_END

//TEST

std::string colors_10 = "";
std::vector<std::vector<int>> edges_10 = {{0, 1}};
try {
    LargestPathValue(colors_10, edges_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string colors_11 = "a";
std::vector<std::vector<int>> edges_11 = {{-1, 0}};
try {
    LargestPathValue(colors_11, edges_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string colors_12 = "abc";
std::vector<std::vector<int>> edges_12 = {{0, 1}, {1, 3}};
try {
    LargestPathValue(colors_12, edges_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string colors_13(1e6,'a');
std::vector<std::vector<int>> edges_13 = {{0, 1}, {1, 1}};
try {
    LargestPathValue(colors_13, edges_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::string colors_14 = "a";
std::vector<std::vector<int>> edges_14 = {{0, 2}};
try {
    LargestPathValue(colors_14, edges_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string colors_15 = "A";
std::vector<std::vector<int>> edges_15 = {{0, 1}, {0,2}};
try {
    LargestPathValue(colors_15, edges_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
 
  return 0;
}
