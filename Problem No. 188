/*
Link: https://codeforces.com/contest/1948/problem/F

You are given num_bags bags numbered from 1 to num_bags. The i-th bag contains gold_coins[i] golden coins and silver_coins[i] silver coins.

The value of a gold coin is 1. The value of a silver coin is either 0 or 1, determined for each silver coin independently (0 with probability 1/2, 1 with 
probability 1/2).

You have to answer num_queries independent queries. Each query is the following:

queries[j] = [l, r] Calculate the probability that the total value of coins in bags from l to r is strictly greater than the total value in all other bags.


For each query, return one long long — the probability that the total value of coins in bags from l to r is strictly greater than the total value in all other bags, 
taken modulo 998244353.

Formally, the probability can be expressed as an irreducible fraction x/y. You have to print the value of x⋅y^−1 mod 998244353, where y^−1 is an integer such 
that y⋅y^−1 mod 998244353 = 1.

Create a C++ function CalculateProbability that will return a vector<long long> denoting the probability of the total value in the given range of bags being greater than 
the total value in all other bags.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A vector<int> denoting gold_coins.
A vector<int> denoting silver_coins.
A vector<vector<int>> denoting queries.

Input Constraints:

Size of both gold_coins and silver_coins should be equal and should be equal to num_bags
Each value of gold_coins[i] should be in the range [0, 10^6] inclusive.
Each value of silver_coins[i] should be in the range [0, 10^6] inclusive.
The values for num_bags and num_queries should be in the range [1, 3⋅10^5] inclusive.
Each query should be of 2 size and 1 ≤ queries[j][0] ≤ queries[j][1] ≤ num_bags
The sum of the vector gold_coins should not exceed 10^6.
The sum of the vector silver_coins should not exceed 10^6.
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>



long long QuickPower(long long base, long long exponent) {
    long long result = 1;
    int modulus = 998244353;
    while (exponent) {
        if (exponent & 1) result = result * base % modulus;
        base = base * base % modulus;
        exponent >>= 1;
    }
    return result;
}

std::vector<long long> CalculateProbability(std::vector<int>& gold_coins, std::vector<int>& silver_coins, std::vector<std::vector<int>>& queries) {
    if (gold_coins.empty() || silver_coins.empty() || queries.empty()) {
        throw std::invalid_argument("Input vectors must not be empty.");
    }

    int num_bags = static_cast<int>(gold_coins.size());
  
     if (num_bags < 1 || num_bags > 300000) {
        throw std::invalid_argument("The number of bags must be between 1 and 300000.");
    }

    if (num_bags != static_cast<int>(silver_coins.size())) {
        throw std::invalid_argument("Gold and silver coins vectors must be of the same size.");
    }

   

    for (int i = 0; i < num_bags; ++i) {
        if (gold_coins[i] < 0 || gold_coins[i] > 1000000) {
            throw std::invalid_argument("Gold coins count must be between 0 and 1000000.");
        }
        if (silver_coins[i] < 0 || silver_coins[i] > 1000000) {
            throw std::invalid_argument("Silver coins count must be between 0 and 1000000.");
        }
    }
  
     long long sum_gold = 0;
    for (int coin : gold_coins) {
        sum_gold += coin;
    }
    
   
    long long sum_silver = 0;
    for (int coin : silver_coins) {
        sum_silver += coin;
    }

    if (sum_gold > 1e6) {
        throw std::invalid_argument("Sum of gold_coins exceeds the maximum allowed limit of 10^6.");
    }
    
    if (sum_silver > 1e6) {
        throw std::invalid_argument("Sum of silver_coins exceeds the maximum allowed limit of 10^6.");
    }

    int num_queries = static_cast<int>(queries.size());
  
    if (num_queries < 1 || num_queries > 300000) {
        throw std::invalid_argument("The number of queries must be between 1 and 300000.");
    }
    int modulus = 998244353;
  
    std::vector<int> prefix_gold(num_bags + 1, 0), prefix_silver(num_bags + 1, 0);
    for (int i = 1; i <= num_bags; i++) {
        prefix_gold[i] = gold_coins[i - 1];
        prefix_gold[i] += prefix_gold[i - 1];
    }
    for (int i = 1; i <= num_bags; i++) {
        prefix_silver[i] = silver_coins[i - 1];
        prefix_silver[i] += prefix_silver[i - 1];
    }
    
    std::vector<long long> sum(prefix_silver[num_bags] + 1);
    long long x = 1;
    sum[0] = 1;
    for (int i = 1; i <= prefix_silver[num_bags]; i++) {
        x = x * (prefix_silver[num_bags] - i + 1) % modulus * QuickPower(i, modulus - 2) % modulus;
        sum[i] = (sum[i - 1] + x) % modulus;
    }
    
    long long inv = QuickPower(QuickPower(2, prefix_silver[num_bags]), modulus - 2);
    std::vector<long long> answers;

    for (std::vector<int>& query : queries) {
        if (query.size() != 2 || query[0] < 1 || query[1] > num_bags || query[0] > query[1]) {
            throw std::invalid_argument("Invalid query parameters.");
        }
        int left = query[0], right = query[1];
        int w = prefix_silver[right] - prefix_silver[left - 1] - (prefix_gold[num_bags] - prefix_gold[right] * 2 + prefix_gold[left - 1] * 2) - 1;
        if (w < 0) {
            answers.push_back(0);
        } else {
            answers.push_back(sum[std::min(w, prefix_silver[num_bags])] * inv % modulus);
        }
    }
    return answers;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
  
  
 //TEST
std::vector<int> gold_coins_1 = {1, 2, 3, 4, 5};
std::vector<int> silver_coins_1 = {5, 4, 3, 2, 1};
std::vector<std::vector<int>> queries_1 = {{1, 3}, {2, 5}};
std::vector<long long> expected_1 = {303086337,1}; 
std::vector<long long> result_1 = CalculateProbability(gold_coins_1, silver_coins_1, queries_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> gold_coins_2 = {100, 999, 500};
std::vector<int> silver_coins_2 = {500, 99, 1000};
std::vector<std::vector<int>> queries_2 = {{1, 2}, {2, 3}};
std::vector<long long> expected_2 = {635234445,1}; 
std::vector<long long> result_2 = CalculateProbability(gold_coins_2, silver_coins_2, queries_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> gold_coins_3 = {0, 0, 0, 0, 0};
std::vector<int> silver_coins_3 = {1, 1, 1, 1, 1};
std::vector<std::vector<int>> queries_3 = {{1, 5}, {2, 4}};
std::vector<long long> expected_3 = {31195137,499122177};  
std::vector<long long> result_3 = CalculateProbability(gold_coins_3, silver_coins_3, queries_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> gold_coins_4 = {1, 2, 3};
std::vector<int> silver_coins_4 = {4, 5, 6};
std::vector<std::vector<int>> queries_4 = {{1, 2}, {2, 3}};
std::vector<long long> expected_4 = {303086337,30465}; 
std::vector<long long> result_4 = CalculateProbability(gold_coins_4, silver_coins_4, queries_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> gold_coins_5 = {7, 8, 9};
std::vector<int> silver_coins_5 = {10, 11, 12};
std::vector<std::vector<int>> queries_5 = {{1, 3}, {2, 2}};
std::vector<long long> expected_5 = {1,310001599}; 
std::vector<long long> result_5 = CalculateProbability(gold_coins_5, silver_coins_5, queries_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> gold_coins_6 = {13, 14, 15};
std::vector<int> silver_coins_6 = {16, 17, 18};
std::vector<std::vector<int>> queries_6 = {{1, 1}, {3, 3}};
std::vector<long long> expected_6 = {0,411240705}; 
std::vector<long long> result_6 = CalculateProbability(gold_coins_6, silver_coins_6, queries_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> gold_coins_7 = {19, 20, 21};
std::vector<int> silver_coins_7 = {22, 23, 24};
std::vector<std::vector<int>> queries_7 = {{2, 3}, {1, 2}};
std::vector<long long> expected_7 = {1685160,785287542}; 
std::vector<long long> result_7 = CalculateProbability(gold_coins_7, silver_coins_7, queries_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> gold_coins_8 = {25, 26, 27};
std::vector<int> silver_coins_8 = {28, 29, 30};
std::vector<std::vector<int>> queries_8 = {{1, 2}, {1, 3}};
std::vector<long long> expected_8 = {991026014,1};
std::vector<long long> result_8 = CalculateProbability(gold_coins_8, silver_coins_8, queries_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> gold_coins_9 = {31, 32, 33};
std::vector<int> silver_coins_9 = {34, 35, 36};
std::vector<std::vector<int>> queries_9 = {{2, 3}, {1, 3}};
std::vector<long long> expected_9 = {237960290,1}; 
std::vector<long long> result_9 = CalculateProbability(gold_coins_9, silver_coins_9, queries_9);
assert(result_9 == expected_9);
//TEST_END
  
//TEST
std::vector<int> gold_coins_10 = {10, 20, 30};
std::vector<int> silver_coins_10 = {40, 50};
std::vector<std::vector<int>> queries_10 = {{1, 2}, {2, 3}};
try {
    CalculateProbability(gold_coins_10, silver_coins_10, queries_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_11 = {100, 200, 300};
std::vector<int> silver_coins_11 = {400, 500, 600};
std::vector<std::vector<int>> queries_11 = {{1, 2}, {2, 4}};
try {
    CalculateProbability(gold_coins_11, silver_coins_11, queries_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_12 = {1, 2, 3};
std::vector<int> silver_coins_12 = {1, 2, 3};
std::vector<std::vector<int>> queries_12 = {{0, 3}, {2, 2}};
try {
    CalculateProbability(gold_coins_12, silver_coins_12, queries_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_13 = {1, 2, 3};
std::vector<int> silver_coins_13 = {1, 2, 3};
std::vector<std::vector<int>> queries_13 = {{1, 4}, {2, 2}};
try {
    CalculateProbability(gold_coins_13, silver_coins_13, queries_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST
std::vector<int> gold_coins_14 = {-10, -20, -30};
std::vector<int> silver_coins_14 = {-1, -2, -3};
std::vector<std::vector<int>> queries_14 = {{1, 2}, {2, 3}};
try {
    CalculateProbability(gold_coins_14, silver_coins_14, queries_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_15 = {1, 2, 3};
std::vector<int> silver_coins_15 = {1, 2};
std::vector<std::vector<int>> queries_15 = {{1, 2}, {2, 3}};
try {
    CalculateProbability(gold_coins_15, silver_coins_15, queries_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_16 = {1, 2, 3, 4};
std::vector<int> silver_coins_16 = {1, 2, 3, 4};
std::vector<std::vector<int>> queries_16 = {{1, 2}, {2, 5}};
try {
    CalculateProbability(gold_coins_16, silver_coins_16, queries_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_17 = {1, 2, 3};
std::vector<int> silver_coins_17 = {1, 2, 3};
std::vector<std::vector<int>> queries_17 = {{1, 3}, {-1, 2}};
try {
    CalculateProbability(gold_coins_17, silver_coins_17, queries_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_18 = {1, 2, 3};
std::vector<int> silver_coins_18 = {1, 2, 3};
std::vector<std::vector<int>> queries_18 = {{1, 2}, {2, 2, 3}};
try {
    CalculateProbability(gold_coins_18, silver_coins_18, queries_18);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_19 = {1, 2, 3, 4, 5};
std::vector<int> silver_coins_19 = {5, 4, 3, 2, 1};
std::vector<std::vector<int>> queries_19 = {{-1, 2}, {2, 5}};
try {
    CalculateProbability(gold_coins_19, silver_coins_19, queries_19);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_20 = {1000001, 999999, 500000};
std::vector<int> silver_coins_20 = {500000, 1000001, 1000000};
std::vector<std::vector<int>> queries_20 = {{1, 2}, {2, 3}};
try {
    CalculateProbability(gold_coins_20, silver_coins_20, queries_20);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_21 = {1, 2, 3};
std::vector<int> silver_coins_21 = {1, 2, 3};
std::vector<std::vector<int>> queries_21 = {{1, 2}, {0, 0}};
try {
    CalculateProbability(gold_coins_21, silver_coins_21, queries_21);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> gold_coins_22 = {1, 2, 3};
std::vector<int> silver_coins_22 = {1, 2, 3};
std::vector<std::vector<int>> queries_22 = {{1, 2}, {2, 2}, {2}};
try {
    CalculateProbability(gold_coins_22, silver_coins_22, queries_22);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

    return 0;
}
