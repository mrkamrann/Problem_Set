/*
Link: https://codeforces.com/contest/251/problem/D

Shaun likes numbers a lot. Recently his mother has presented him a collection of num_elements non-negative integers. There's only one thing Shaun likes more than 
numbers: playing with little Masha. He immediately decided to give a part of his new collection to her. To make the game even more interesting, Shaun decided to 
give Masha such a collection of numbers for which the following conditions fulfill:

Let's introduce x1 to denote the xor of all numbers Shaun has got left; and let's introduce x2 to denote the xor of all numbers he gave to Masha. Value (x1 + x2) 
must be as large as possible. If there are multiple ways to divide the collection so that the previous condition is fulfilled, then Shaun minimizes the value x1. 
The xor operation is a bitwise excluding "OR", that is denoted as "xor" in the Pascal language and "^" in C/C++/Java.

Help Shaun divide the collection as described above. If there are multiple suitable ways to divide it, find any of them. Please note that after Shaun gives a 
part of his numbers to Masha, he may have no numbers left. The reverse situation is also possible, when Shaun gives nothing to Masha. In both cases, we must 
assume that the xor of an empty set of numbers equals 0.

Given a vector<long long> values of length num_elements. They are all integers, non-negative and do not exceed 10^18.

Return a vector result of size num_elements. The i-th of them should equal either 1 if Shaun keeps the number that follows the i-th in his collection, or 
it should equal 2 if Shaun gives the corresponding number to Masha. The numbers are indexed in the order in which they are given in the input.

Create a C++ Function DivideCollection that will return a vector<int> result representing the division of numbers between Shaun and Masha. 

Use appropriate Error Handling using the stdexcept library for invalid test cases.

Input Type:

A vector<int> denoting values

Input Constraints:

The length of values should be at least 1 and at most 100000 inclusive.
Each value of values should be in the range [0, 10^18] inclusive.

*/

#include <iostream>
#include <vector>
#include <bitset>
#include <stdexcept>
#include <cassert>

std::vector<int> DivideCollection(std::vector<long long>& values) {

    int num_elements = values.size();

    if (num_elements < 1 || num_elements > 100000) {
        throw std::invalid_argument("Invalid number of elements");
    }
    for (long long value : values) {
        if (value < 0 || value > 1000000000000000000LL) {
            throw std::invalid_argument("Invalid value in the values vector");
        }
    }

    long long result_xor = 0, final_answer = 0;
    std::vector<long long> bit_mask(61, 0);
    std::vector<int> index_vector(61, 0), permutation(num_elements, 0);
    std::bitset<62> answer_bitset;
    std::vector<std::bitset<62>> xor_vector(61), bitsets(num_elements);

    for (int i = 0; i < num_elements; ++i) {
        result_xor ^= values[i];
    }

    for (int i = 0; i < num_elements; ++i) {
        for (int j = 60; j >= 0; --j) {
            if (values[i] >> j & 1) {
                if (result_xor >> j & 1) {
                    continue;
                }
                if (!bit_mask[j]) {
                    bit_mask[j] = values[i];
                    index_vector[j] = i;
                    values[i] = 0;
                    bitsets[i][j] = 1;
                    xor_vector[j] = bitsets[i];
                    break;
                }
                values[i] ^= bit_mask[j];
                bitsets[i] ^= xor_vector[j];
            }
        }
    }

    for (int i = 60; i >= 0; --i) {
        if ((final_answer >> i & 1) == 0) {
            answer_bitset ^= xor_vector[i];
            final_answer ^= bit_mask[i];
        }
    }

    for (int i = 0; i < num_elements; ++i) {
        for (int j = 60; j >= 0; --j) {
            if (values[i] >> j & 1) {
                if (!bit_mask[j]) {
                    bit_mask[j] = values[i];
                    index_vector[j] = i;
                    bitsets[i][j] = 1;
                    xor_vector[j] = bitsets[i];
                    break;
                }
                values[i] ^= bit_mask[j];
                bitsets[i] ^= xor_vector[j];
            }
        }
    }

    for (int i = 60; i >= 0; --i) {
        if (result_xor >> i & 1) {
            if ((final_answer ^ bit_mask[i]) > final_answer) {
                answer_bitset ^= xor_vector[i];
                final_answer ^= bit_mask[i];
            }
        }
    }

    for (int i = 0; i <= 60; ++i) {
        permutation[index_vector[i]] ^= answer_bitset[i];
    }

    return permutation;
}

#include <iostream>
#include <vector>
#include <bitset>
#include <stdexcept>
#include <cassert>

int main() {
    //TEST
    int num_elements;
    std::cin >> num_elements;
    std::vector<long long> values(num_elements);

    for (int i = 0; i < num_elements; ++i) {
        std::cin >> values[i];
    }

    std::vector<int> result = ProcessVectors(num_elements, values);

    for (int i = 0; i < num_elements; ++i) {
        std::cout << result[i] + 1 << " ";
    }
    std::cout << std::endl;
    //TEST_END

    return 0;
}

