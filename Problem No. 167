/*
Link: https://codeforces.com/contest/251/problem/D
*/

#include <iostream>
#include <vector>
#include <bitset>
#include <stdexcept>
#include <cassert>

std::vector<int> ProcessVectors(int num_elements, std::vector<long long>& values) {
    if (num_elements < 1 || num_elements > 100000) {
        throw std::invalid_argument("Invalid number of elements");
    }
    for (long long value : values) {
        if (value < 0 || value > 1000000000000000000LL) {
            throw std::invalid_argument("Invalid value in the values vector");
        }
    }

    long long result_xor = 0, final_answer = 0;
    std::vector<long long> bit_mask(61, 0);
    std::vector<int> index_vector(61, 0), permutation(num_elements, 0);
    std::bitset<62> answer_bitset;
    std::vector<std::bitset<62>> xor_vector(61), bitsets(num_elements);

    for (int i = 0; i < num_elements; ++i) {
        result_xor ^= values[i];
    }

    for (int i = 0; i < num_elements; ++i) {
        for (int j = 60; j >= 0; --j) {
            if (values[i] >> j & 1) {
                if (result_xor >> j & 1) {
                    continue;
                }
                if (!bit_mask[j]) {
                    bit_mask[j] = values[i];
                    index_vector[j] = i;
                    values[i] = 0;
                    bitsets[i][j] = 1;
                    xor_vector[j] = bitsets[i];
                    break;
                }
                values[i] ^= bit_mask[j];
                bitsets[i] ^= xor_vector[j];
            }
        }
    }

    for (int i = 60; i >= 0; --i) {
        if ((final_answer >> i & 1) == 0) {
            answer_bitset ^= xor_vector[i];
            final_answer ^= bit_mask[i];
        }
    }

    for (int i = 0; i < num_elements; ++i) {
        for (int j = 60; j >= 0; --j) {
            if (values[i] >> j & 1) {
                if (!bit_mask[j]) {
                    bit_mask[j] = values[i];
                    index_vector[j] = i;
                    bitsets[i][j] = 1;
                    xor_vector[j] = bitsets[i];
                    break;
                }
                values[i] ^= bit_mask[j];
                bitsets[i] ^= xor_vector[j];
            }
        }
    }

    for (int i = 60; i >= 0; --i) {
        if (result_xor >> i & 1) {
            if ((final_answer ^ bit_mask[i]) > final_answer) {
                answer_bitset ^= xor_vector[i];
                final_answer ^= bit_mask[i];
            }
        }
    }

    for (int i = 0; i <= 60; ++i) {
        permutation[index_vector[i]] ^= answer_bitset[i];
    }

    return permutation;
}

#include <iostream>
#include <vector>
#include <bitset>
#include <stdexcept>
#include <cassert>

int main() {
    //TEST
    int num_elements;
    std::cin >> num_elements;
    std::vector<long long> values(num_elements);

    for (int i = 0; i < num_elements; ++i) {
        std::cin >> values[i];
    }

    std::vector<int> result = ProcessVectors(num_elements, values);

    for (int i = 0; i < num_elements; ++i) {
        std::cout << result[i] + 1 << " ";
    }
    std::cout << std::endl;
    //TEST_END

    return 0;
}

