/*

Jimmy was given an vector called nums, which is a shuffled version of the numbers from 0 to len-1, in other words nums is a permutation of length len containg values in the range [0, 1, 2, ..., len - 1]. 
His task was to find another permutation, perm, of [0, 1, 2, ..., len - 1]  such that the score of perm is minimized. The score of any permutation perm of [0, 1, 2, ..., len - 1] is defined as:

score(perm) = |perm[0] - nums[perm[1]]| + |perm[1] - nums[perm[2]]| + ... + |perm[len-1] - nums[perm[0]]|

Return the permutation perm which has the minimum possible score. If multiple permutations exist with this score, return the one that is lexicographically smallest among them. Help Jimmy create a C++ function
FindPermutation that will return a vector<int> denoting the permutation perm which has the minimum possible score.

Note: An vector vec_a is lexicographically smaller than a vector vec_b if in the first position where vec_a and vec_b differ, vector vec_a has an element that is less than the corresponding element in vec_b.
If the first min(vec_a.length, vec_b.length) elements do not differ, then the shorter array is the lexicographically smaller one.


Input Type:

vector<int> denoting nums

Input Constraints:

1. The value of len is between [2, 14] both inclusive.
2. nums is a permutation of [0, 1, 2, ..., len - 1].

*/
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>
#include <climits>

struct PermutationInfo {
    int num_elements;
    int first_index;
};

int RecursiveScore(int bitmask, const std::vector<int> & nums, int last_index, std::vector<std::vector<int>>& dp_arr, PermutationInfo& perm_info) {
    if (bitmask == (1 << perm_info.num_elements) - 1) {
        return std::abs(last_index - nums[perm_info.first_index]);
    }
    if (dp_arr[bitmask][last_index] != -1)
        return dp_arr[bitmask][last_index];
    
    int min_score = INT_MAX;
    for (int i = 0; i < perm_info.num_elements; i++) {
        if ((bitmask & (1 << i)) == 0) {
            min_score = std::min(min_score, std::abs(last_index - nums[i]) + RecursiveScore(bitmask | (1 << i), nums, i, dp_arr, perm_info));
        }
    }
    return dp_arr[bitmask][last_index] = min_score;
}

std::vector<int> ReconstructPermutation(std::vector<std::vector<int>>& dp_arr, int start_index, const std::vector<int>& nums, PermutationInfo& perm_info) {
    std::vector<int> current_permutation;
    current_permutation.push_back(start_index);
    int bitmask = (1 << start_index);
    int last_index = start_index;
    while (bitmask != (1 << perm_info.num_elements) - 1) {
        int min_val = INT_MAX;
        int min_index = perm_info.num_elements - 1;
        for (int i = perm_info.num_elements - 1; i >= 0; i--) {
            if ((bitmask & (1 << i)) == 0) {
                if (dp_arr[bitmask | (1 << i)][i] + std::abs(last_index - nums[i]) <= min_val) {
                    min_val = dp_arr[bitmask | (1 << i)][i] + std::abs(last_index - nums[i]);
                    min_index = i;
                }
            }
        }
        current_permutation.push_back(min_index);
        bitmask |= (1 << min_index);
        last_index = min_index;
    }
    return current_permutation;
}

std::vector<int> FindPermutation(std::vector<int>& nums) {
    
    int len = nums.size();
  
    if (nums.size() < 2 || nums.size() > 14) {
        throw std::invalid_argument("Length of nums must be between 2 and 14 (inclusive).");
    }

    std::vector<bool> seen(len, false);
    for (int num : nums) {
        if (num < 0 || num >= len || seen[num]) {
            throw std::invalid_argument("nums is not a valid permutation.");
        }
        seen[num] = true;
    }

    PermutationInfo perm_info;
    perm_info.num_elements = nums.size();
    int min_score = INT_MAX;
    std::vector<int> current_best_permutation;
    for (int i = perm_info.num_elements - 1; i >= 0; i--) {
        std::vector<std::vector<int>> dp_arr((1 << perm_info.num_elements), std::vector<int>(perm_info.num_elements, -1));
        perm_info.first_index = i;
        int current_score = RecursiveScore((1 << perm_info.first_index), nums, perm_info.first_index, dp_arr, perm_info);

        if (current_score < min_score) {
            min_score = current_score;
            current_best_permutation = ReconstructPermutation(dp_arr, i, nums, perm_info);
        }
        else if (current_score == min_score) {
            current_best_permutation = std::min(current_best_permutation, ReconstructPermutation(dp_arr, i, nums, perm_info));
        }
    }

    return current_best_permutation;
}


int main(){
  
 //TEST

std::vector<int> nums_1 = {0,1,2};
std::vector<int> expected_1 = {0,1,2};
std::vector<int> result_1 = FindPermutation(nums_1);
assert(result_1 == expected_1);
  
  
//TEST_END
  
//TEST

std::vector<int> nums_2 = {4,0,2,1,3};
std::vector<int> expected_2 = {0,1,2,3,4};
std::vector<int> result_2 = FindPermutation(nums_2);
assert(result_2 == expected_2);
  
  //TEST_END

 //TEST
  
std::vector<int> nums_3 = {0,1};
std::vector<int> expected_3 = {0,1};
std::vector<int> result_3 = FindPermutation(nums_3);
assert(result_3 == expected_3);
  
  //TEST_END

 //TEST
  
std::vector<int> nums_4 = {1,0};
std::vector<int> expected_4 = {0,1};
std::vector<int> result_4 = FindPermutation(nums_4);
assert(result_4 == expected_4);
  
  //TEST_END

 //TEST
  
std::vector<int> nums_5 = {5,0,4,3,1,2};
std::vector<int> expected_5 = {0,1,4,2,3,5};
std::vector<int> result_5 = FindPermutation(nums_5);
assert(result_5 == expected_5);

  //TEST_END
  
 //TEST
 
std::vector<int> nums_6 = {3,6,8,7,5,4,2,1,0};
std::vector<int> expected_6 = {0,8,2,6,1,7,3,5,4};
std::vector<int> result_6 = FindPermutation(nums_6);
assert(result_6 == expected_6);
  
  //TEST_END

 //TEST

std::vector<int> nums_7 = {1,2,3,0};
std::vector<int> expected_7 = {0,3,2,1};
std::vector<int> result_7 = FindPermutation(nums_7);
assert(result_7 == expected_7);
  
  //TEST_END

 //TEST
  
std::vector<int> nums_8 = {3,0,2,4,1};
std::vector<int> expected_8 = {0,1,2,4,3};
std::vector<int> result_8 = FindPermutation(nums_8);
assert(result_8 == expected_8);
  
  //TEST_END
  

 //TEST
  
std::vector<int> nums_9 = {3,6,0,4,2,1,5};
std::vector<int> expected_9 = {0,2,4,6,1,5,3};
std::vector<int> result_9 = FindPermutation(nums_9);
assert(result_9 == expected_9);


//TEST_END

  //TEST

std::vector<int> nums_10 = {0};

try{
  FindPermutation(nums_10);
  assert(false);
}
  catch(const std::invalid_argument& e)
  {
    assert(true);
  }


//TEST_END
  
   //TEST
  
std::vector<int> nums_11 = {4, 4, 2, 2};

try {
    FindPermutation(nums_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

  //TEST
  
std::vector<int> nums_12 = {-9,-8};

try {
    FindPermutation(nums_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
  
// TEST

std::vector<int> nums_13 = {0};

try {
    FindPermutation(nums_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_14 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15};

try {
    FindPermutation(nums_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_15 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, -1};

try {
    FindPermutation(nums_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_16 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14};

try {
    FindPermutation(nums_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_17 = {1, 1};

try {
    FindPermutation(nums_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_18 = {0, 1, 2, -1};

try {
    FindPermutation(nums_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_19 = {3, 2, 1, 1};

try {
    FindPermutation(nums_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_20 = {0, 1, 2, 4};

try {
    FindPermutation(nums_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_21 = {0, 2};

try {
    FindPermutation(nums_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_22 = {-1, 0};

try {
    FindPermutation(nums_22);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_23 = {0, 1, 2, 3, 4, -5, 6, 7, 8, 9, 10, 11, 12};

try {
    FindPermutation(nums_23);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

// TEST

std::vector<int> nums_24(1000,22);

try {
    FindPermutation(nums_24);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

  
  return 0;
}
