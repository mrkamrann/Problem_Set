/*
Link: https://codeforces.com/contest/383/problem/E

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <unordered_set>


    long long XorOfSquares(const std::vector<std::string>& word_list) {
      
      int word_count = word_list.size();
      
        if (word_count < 1 || word_count > 10000) {
            throw std::invalid_argument("word_count must be between 1 and 10000.");
        }
        
       std::unordered_set<std::string> unique_words;

        for (const std::string& word : word_list) {
          
            if (word.size() != 3) {
                throw std::invalid_argument("Each word must be exactly 3 characters long.");
            }
            for (const char &character : word) {
                if (character < 'a' || character > 't'){
                    throw std::invalid_argument("Each character must be a lowercase letter from a to t.");
                }
            }
          
            if(unique_words.count(word)) {
                throw std::invalid_argument("Each word must be unique.");
            }
            unique_words.insert(word);
        }
        
        std::vector<int> frequency(1 << 20, 0);

        for (const std::string& word : word_list) {
            int index = 0;
            for (int i = 0; i < 3; ++i) {
                if (word[i] < 'u') {
                    index |= 1 << (word[i] - 'a');
                }
            }
            ++frequency[index];
        }

        for (int i = 0; i < 20; ++i) {
            for (int j = 0; j < (1 << 20); ++j) {
                if (j & (1 << i)) {
                    frequency[j] += frequency[j ^ (1 << i)];
                }
            }
        }

        long long result = 0;
        for (int i = 0; i < (1 << 20); ++i) {
            result ^= 1LL * (word_count - frequency[i]) * (word_count - frequency[i]);
        }
        return result;
    }

#include <cassert>
  
int main() {
   
    // TEST
std::vector<std::string> word_list_1 = {"abc", "def", "ghi", "jkl", "mno", "rst"};
long long expected_1 = 0;
long long result_1 = XorOfSquares(word_list_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::vector<std::string> word_list_2 = {"aaa", "bbb", "ccc", "ddd", "eee", "fff"};
long long expected_2 = 0;
long long result_2 = XorOfSquares(word_list_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::vector<std::string> word_list_3 = {"bcd", "cde", "def", "efg", "fgh", "ghi"};
long long expected_3 = 0;
long long result_3 = XorOfSquares(word_list_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::vector<std::string> word_list_4 = {"abc", "def", "ghi", "jkl", "mno"};
long long expected_4 = 0;
long long result_4 = XorOfSquares(word_list_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::vector<std::string> word_list_5 = {"abc", "abd", "abe", "abf", "abg", "abh"};
long long expected_5 = 0;
long long result_5 = XorOfSquares(word_list_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::vector<std::string> word_list_6 = {"abc", "abd", "abe", "abf", "abg", "abh"};
long long expected_6 = 0;
long long result_6 = XorOfSquares(word_list_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
std::vector<std::string> word_list_7 = {"ged", "blb", "ggg"};
long long expected_7 = 0;
long long result_7 = XorOfSquares(word_list_7);
 assert(result_7 == expected_7);
// TEST_END

// TEST
std::vector<std::string> word_list_8 = {"abc", "bcd", "cde", "def", "efg", "fgh", "ghi", "hij", "ijk", "jkl"};
long long expected_8 = 0;
long long result_8 = XorOfSquares(word_list_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::vector<std::string> word_list_9 = {"adp", "gef", "phi", "jkl", "mmo", "pqr"};
long long expected_9 = 0;
long long result_9 = XorOfSquares(word_list_9);
assert(result_9 == expected_9);
// TEST_END

//TEST
std::vector<std::string> word_list_10 = {}; 
try {
    XorOfSquares(word_list_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> word_list_11 = {"ab1"}; 
try {
     XorOfSquares(word_list_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> word_list_12 = {"aaa", "bbb", "cccc", "aaa"}; 
try {
    XorOfSquares(word_list_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> word_list_13 = {"abcd", "efg"}; 
try {
    XorOfSquares(word_list_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> word_list_14 = {"aaa", "aaa", "ccc", "ddd", "eee", "fff", "ggg"}; 
try {
    XorOfSquares(word_list_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::string> word_list_15 = {"xyz", "abz", "xkz"}; 
try {
     XorOfSquares(word_list_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

    return 0;
}

 
