/*
Link: https://codeforces.com/problemset/problem/963/C

Anjali has a rectangle with sides a and b which she cuts into smaller rectangles using cuts parallel to its sides. For example, if p horizontal and q vertical 
cuts are made, then (p+1)*(q+1) smaller rectangles are obtained. After the cutting, these smaller rectangles belong to num_rectangles different types. 
Two rectangles are different if at least one side of one rectangle isn't equal to the corresponding side of the other. Note that the rectangles cannot be rotated,
meaning that rectangles of dimensions a×b and b×a are considered different if a≠b.

For each type of rectangle, the lengths of the sides and the number of rectangles of this type that were left after cutting the initial rectangle are given.

Calculate the number of pairs (a, b) such that the given smaller rectangles could be created by cutting a rectangle with sides of lengths a and b. Note that 
pairs (a, b) and (b, a) are considered different when a≠b.

Create a C++ Function CalculateRectanglePairs that will return a long long denoting the number of valid pairs (a, b). 

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A vector of long long widths denoting the widths of each type of rectangle.
A vector of long long heights denoting the heights of each type of rectangle.
A vector of long long counts denoting the counts of each type of rectangle.

Input Constraints:

The value of num_rectangles should be at least 1 and at most 200,000 inclusive.
Each value in widths, heights, and counts should be at least 1 and at most 10^12 inclusive.

*/

#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>
#include <cassert>

long long CalculateGcd(long long a_val, long long b_val) {
    while (b_val) {
        long long temp = b_val;
        b_val = a_val % b_val;
        a_val = temp;
    }
    return a_val;
}

long long CalculateRectanglePairs(const std::vector<long long>& widths, const std::vector<long long>& heights, const std::vector<long long>& counts, long long num_rectangles) {
  
    if (num_rectangles < 1 || num_rectangles > 200000) {
        throw std::invalid_argument("num_rectangles must be between 1 and 200000");
    }
    
    for (long long i = 0; i < num_rectangles; ++i) {
        if (widths[i] < 1 || widths[i] > 1000000000000 || 
            heights[i] < 1 || heights[i] > 1000000000000 || 
            counts[i] < 1 || counts[i] > 1000000000000) {
            throw std::invalid_argument("widths, heights, and counts must be between 1 and 1000000000000");
        }
    }

    std::map<long long, long long> width_map, height_map;
  
    long long total_counts = 0, gcd_value = 0, answer = 0;

    for (long long i = 0; i < num_rectangles; ++i) {
        width_map[widths[i]] += counts[i];
        height_map[heights[i]] += counts[i];
        total_counts += counts[i];
        gcd_value = CalculateGcd(gcd_value, counts[i]);
    }

    for (long long i = 0; i < num_rectangles; ++i) {
        if (std::fabs(static_cast<long double>(width_map[widths[i]]) / static_cast<long double>(total_counts) - 
                      static_cast<long double>(counts[i]) / static_cast<long double>(height_map[heights[i]])) > 1e-16) {
            return 0;
        }
    }

    for (long long i = 1; i * i <= gcd_value; ++i) {
        if (gcd_value % i == 0) {
            answer += 1 + (i * i != gcd_value);
        }
    }

    return answer;
}

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);

    long long num_rectangles;
    std::cin >> num_rectangles;
    
    std::vector<long long> widths(num_rectangles), heights(num_rectangles), counts(num_rectangles);

    for (long long i = 0; i < num_rectangles; ++i) {
        std::cin >> widths[i] >> heights[i] >> counts[i];
    }

    long long result = ComputeAnswer(widths, heights, counts, num_rectangles);
    std::cout << result << std::endl;

    return 0;
}

