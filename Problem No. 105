/*
Link: https://codeforces.com/contest/1731/problem/F

Julie has an integer vector vec_1, vec_2, ..., vec_count. Let FuncLsl(i) denote the number of indices j (1 ≤ j < i) such that vec_j < vec_i. 
Similarly, FuncG(i) is defined as the number of indices j (i < j ≤ count) such that vec_j > vec_i. A position i in the vector vec is considered good if 
FuncLsl(i) < FuncG(i).

Julie wants to find the function FindFunc(vec) defined on vector vec as the sum of all elements vec_i such that i is good in vec. Given two integers count 
and multiplier, Julie needs to compute the sum of FindFunc(vec) over all vectors vec of size count where each vec_i satisfies 1 ≤ vec_i ≤ multiplier, 
modulo 998244353.

Create a C++ function CalculateSumFindFunc that will return a long long denoting the sum of FindFunc over all valid vectors vec.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An Integer denoting count
An Integer denoting multiplier

Input Constraints:

count should be in the range [1, 50].
multiplier should be in the range [2, 998244352].

*/


#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


    long long CalculateSumFindFunc(long long count, long long multiplier) {
      
        const long long modulus = 998244353;

        if (count < 1 || count > 50) {
            throw std::invalid_argument("count (n) must be between 1 and 50 inclusive.");
        }
        if (multiplier < 2 || multiplier >= modulus) {
            throw std::invalid_argument("multiplier (k) must be between 2 and 998244352 inclusive.");
        }

        if (count == 1) return 0;

        std::vector<long long> results(count + 1);
        results[1] = 1;
        long long power = 1;

        for (std::size_t index = 2; index < static_cast<std::size_t>(count); index++) {
            power = power * multiplier % modulus;
            results[index] = (results[index - 1] + power * index % modulus) % modulus;
        }

        return results[static_cast<std::size_t>(count - 1)] * ((multiplier + 1) * multiplier % modulus * (multiplier - 1) % modulus * 166374059 % modulus) % modulus;
    }


int main() {

//TEST
  
long long count_1 = 1;
long long multiplier_1 = 2;
long long expected_1 = 0;
long long result_1 = CalculateSumFindFunc(count_1, multiplier_1);
assert(result_1 == expected_1);
//TEST_END

//TEST

long long count_2 = 5;
long long multiplier_2 = 10;
long long expected_2 = 712965;
long long result_2 = CalculateSumFindFunc(count_2, multiplier_2);
assert(result_2 == expected_2);
//TEST_END

//TEST

long long count_3 = 10;
long long multiplier_3 = 20;
long long expected_3 = 662985869;
long long result_3 = CalculateSumFindFunc(count_3, multiplier_3);
assert(result_3 == expected_3);
//TEST_END

//TEST

long long count_4 = 15;
long long multiplier_4 = 25;
long long expected_4 = 526869038;
long long result_4 = CalculateSumFindFunc(count_4, multiplier_4);
assert(result_4 == expected_4);
//TEST_END

//TEST

long long count_5 = 20;
long long multiplier_5 = 30;
long long expected_5 = 484475403;
long long result_5 = CalculateSumFindFunc(count_5, multiplier_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

long long count_6 = 25;
long long multiplier_6 = 35;
long long expected_6 = 215606962;
long long result_6 = CalculateSumFindFunc(count_6, multiplier_6);
assert(result_6 == expected_6);
//TEST_END

//TEST

long long count_7 = 30;
long long multiplier_7 = 40;
long long expected_7 = 290190641;
long long result_7 = CalculateSumFindFunc(count_7, multiplier_7);
assert(result_7 == expected_7);
//TEST_END

//TEST


long long count_8 = 35;
long long multiplier_8 = 45;
long long expected_8 = 794736703;
long long result_8 = CalculateSumFindFunc(count_8, multiplier_8);
assert(result_8 == expected_8);
//TEST_END

//TEST


long long count_9 = 40;
long long multiplier_9 = 50;
long long expected_9 = 774864703;
long long result_9 = CalculateSumFindFunc(count_9, multiplier_9);
assert(result_9 == expected_9);
//TEST_END

//TEST


long long count_10 = -999;
long long multiplier_10 = 10;
try {
    CalculateSumFindFunc(count_10, multiplier_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

long long count_11 = 11;
long long multiplier_11 = -999;
try {
    CalculateSumFindFunc(count_11, multiplier_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


long long count_12 = 99999;
long long multiplier_12 = 89;
try {
    CalculateSumFindFunc(count_12, multiplier_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

long long count_13 = 10;
long long multiplier_13 = 998244353;
try {
    CalculateSumFindFunc(count_13, multiplier_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

long long count_14 = -1;
long long multiplier_14 = 10;
try {
    CalculateSumFindFunc(count_14, multiplier_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

long long count_15 = 10;
long long multiplier_15 = -10;
try {
    CalculateSumFindFunc(count_15, multiplier_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    

    return 0;
}
