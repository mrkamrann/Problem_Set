/*
Link: https://codeforces.com/problemset/problem/1550/E

Julie is given a string str of length len. Each character in this string is either one of the first count lowercase Latin letters or a dollar sign ('$').

Julie needs to replace every dollar sign with one of the first count lowercase Latin letters such that a specific value is maximized.

Hereâ€™s how to determine this value:

Let max_len_i represent the maximum length of a substring in str that consists entirely of the i-th Latin letter. A substring is defined as a contiguous 
sequence of characters in a string. If the i-th letter does not appear in str, then max_len_i is 0.

The value of the string str is the minimum value among max_len_i for all i from 1 to count.

Julie needs to find the maximum possible value of the string str after replacing all dollar signs with appropriate lowercase Latin letters.

Create a C++ Function FindMaximumValidDistance that should return an integer denoting the maximum possible value of the string str after replacing all dollar signs 
with appropriate lowercase Latin letters.

Appropriate error handling using the stdexcept library should be implemented for invalid test cases.

Input Type

A string str consisting of len characters, where each character is either one of the first count lowercase Latin letters or a dollar sign ('$').
An integer count representing the number of the first lowercase Latin letters used.

Input Constraints:

The length of the string str (len) must be between 1 and 2 * 10^5 inclusive.
The number of first lowercase Latin letters (count) must be between 1 and 17 inclusive.
The string str must consist only of the first count lowercase Latin letters and/or the dollar sign ('$') character.

*/

#include <iostream>
#include <vector>
#include <string>
#include <stdexcept>
#include <cassert>

    bool IsValid(int distance, int len, int count, const std::string &str) {

        std::vector<int> last_occurrence(count, len);
        std::vector<std::vector<int>> positions(len + 1, std::vector<int>(count, len + 1));
        
        for (int index = len - 1; index >= 0; --index) {
            if (str[index] != '$') {
                last_occurrence[str[index] - 'a'] = index;
            }
            int current_min = len;
            for (int char_index = 0; char_index < count; ++char_index) {
                positions[index][char_index] = (index + distance <= current_min ? index + distance : positions[index + 1][char_index]);
                current_min = std::min(current_min, last_occurrence[char_index]);
            }
            current_min = len;
            for (int char_index = count - 1; char_index >= 0; --char_index) {
                if (index + distance > current_min) {
                    positions[index][char_index] = positions[index + 1][char_index];
                }
                current_min = std::min(current_min, last_occurrence[char_index]);
            }
        }

        std::vector<int> dp_table(1 << count, len + 1);
        dp_table[0] = 0;

        for (int mask = 0; mask < (1 << count); ++mask) {
            if (dp_table[mask] < len + 1) {
                for (int char_index = 0; char_index < count; ++char_index) {
                    if (!((mask >> char_index) & 1)) {
                        dp_table[mask | (1 << char_index)] = std::min(dp_table[mask | (1 << char_index)], positions[dp_table[mask]][char_index]);
                    }
                }
            }
        }
        return dp_table[(1 << count) - 1] <= len;
    }

    int FindMaximumValidDistance(const std::string &str, int count) {

         int len = str.size();

         if (len < 1 || len > 2 * 100000) {
            throw std::invalid_argument("The length of the string must be between 1 and 200000 inclusive.");
        }
        if (count < 1 || count > 17) {
            throw std::invalid_argument("The number of unique characters must be between 1 and 17 inclusive.");
        }
        for (char character : str) {
            if (character != '$' && (character < 'a' || character >= 'a' + count)) {
                throw std::invalid_argument("The string must consist only of the first 'count' lowercase Latin letters and/or the '$' character.");
            }
        }
        int left = 1;
        int right = len;
        int result = 0;

        while (left <= right) {
            int middle = (left + right) / 2;
            if (IsValid(middle, len, count, str)) {
                result = middle;
                left = middle + 1;
            } else {
                right = middle - 1;
            }
        }

        return result;
    }



int main() {
    
   // TEST
std::string str_1 = "a$a";
int count_1 = 1;
int expected_1 = 3;
int result_1 = FindMaximumValidDistance(str_1, count_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::string str_2 = "aa$a$aa";
int count_2 = 1;
int expected_2 = 7;
int result_2 = FindMaximumValidDistance(str_2, count_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::string str_3 = "a$bc$def$ghijk$lmnop$";
int count_3 = 17;
int expected_3 = 1;
int result_3 = FindMaximumValidDistance(str_3, count_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::string str_4 = "ab$ab$ab$ab";
int count_4 = 2;
int expected_4 = 2;
int result_4 = FindMaximumValidDistance(str_4, count_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::string str_5 = "$$$$$";
int count_5 = 1;
int expected_5 = 5;
int result_5 = FindMaximumValidDistance(str_5, count_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::string str_6 = "abacabadabacaba";
int count_6 = 4;
int expected_6 = 1;
int result_6 = FindMaximumValidDistance(str_6, count_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
std::string str_7 = "a$a$a$a$a$a$a$a$a$a$a$a$a$a$a$a$a";
int count_7 = 1;
int expected_7 = 33;
int result_7 = FindMaximumValidDistance(str_7, count_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::string str_8 = "abcdefghijklmnop";
int count_8 = 16;
int expected_8 = 1;
int result_8 = FindMaximumValidDistance(str_8, count_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::string str_9 = "aaa$aaa$aaa$aaa$aaa$aaa$aaa$aaa$aaa$aaa";
int count_9 = 1;
int expected_9 = 39;
int result_9 = FindMaximumValidDistance(str_9, count_9);
assert(result_9 == expected_9);
// TEST_END

// TEST
std::string str_10 = "";
int count_10 = 1;
try {
    FindMaximumValidDistance(str_10, count_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_11 = "a";
int count_11 = -5445;
try {
    FindMaximumValidDistance(str_11, count_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_12 = "abcdefghijklmnopqrstuvwz";
int count_12 = 18;
try {
    FindMaximumValidDistance(str_12, count_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_13(1e6, 'a');
int count_13 = 1;
try {
    FindMaximumValidDistance(str_13, count_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_14 = "a$b$c";
int count_14 = 2;
try {
    FindMaximumValidDistance(str_14, count_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_15 = "ab$c";
int count_15 = 1;
try {
    FindMaximumValidDistance(str_15, count_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_16 = "abcdefghijklmnopqrstuvwxyz$";
int count_16 = 24;
try {
    FindMaximumValidDistance(str_16, count_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_17 = "ab$c";
int count_17 = -1;
try {
    FindMaximumValidDistance(str_17, count_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_18 = "12345468";
int count_18 = 18;
try {
    FindMaximumValidDistance(str_18, count_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_19 = "ab$c";
int count_19 = 99;
try {
    FindMaximumValidDistance(str_19, count_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
    return 0;
}

