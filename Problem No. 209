/*
Link: https://codeforces.com/contest/1292/problem/D

Cassie has planned everything out, and the condition of Cytus is also perfect.

The time right now... 00:01:12...

It's time.

The system inside A.R.C.'s Library core can be considered as an undirected graph with an infinite number of processing nodes, numbered with all positive integers 
(1,2,3,â€¦). The node with a number x (where x > 1), is directly connected with a node with number x*f(x), where f(x) is the lowest prime divisor of x.

Cassie's mind is divided into num_fragments fragments. Due to more than 500 years of coma, the fragments have been scattered: the i-th fragment is now located at 
the node with a number fragment[i]! (the factorial of fragment[i]).

To maximize the chance of successful awakening, Cassie decides to place the samples in a node P, so that the total length of paths from each fragment to P is the
smallest possible. If there are multiple fragments located at the same node, the path from that node to P needs to be counted multiple times.

In the world of zeros and ones, such a requirement is very simple for Cassie. Not longer than a second later, she has already figured out such a node.

But for a mere human like you, is this still possible?

For simplicity, please answer the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node P.

Create a C++ function CalculateMinimalPathSum that will return a long long denoting the minimal sum of paths from every fragment to the node with the emotion 
samples (a.k.a. node P).

Use appropriate error handling using the std::invalid_argument library for invalid test cases.

Input Type

A vector of integers denoting fragments

Input Constraints

The value of num_fragments should be at least 1 and at most 1,000,000 inclusive.
Each value in fragments should be in the range [0, 5000] inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>



std::vector<std::vector<int>> ComputeCount(int max_val) {
    const int max_size = 5000 + 10;
    std::vector<std::vector<int>> count(max_val, std::vector<int>(max_val, 0));
    for (int i = 1; i < max_val; i++) {
        for (int j = 1; j < max_val; j++) {
            count[i][j] += count[i - 1][j];
        }
        int value = i;
        for (int j = 2; j <= value; j++) {
            while (value % j == 0) {
                value /= j;
                ++count[i][j];
            }
        }
    }
    return count;
}

long long CalculateMinimalPathSum( const std::vector<int>& fragments) {

   int num_fragments = fragments.size();

    if (num_fragments < 1 || num_fragments > 1000000) {
        throw std::invalid_argument("Invalid number of fragments. Must be between 1 and 1000000.");
    }
    for (int fragment : fragments) {
        if (fragment < 0 || fragment > 5000) {
            throw std::invalid_argument("Invalid fragment value. Must be between 0 and 5000.");
        }
    }
    const int max_size = 5000 + 10;
    std::vector<std::vector<int>> count = ComputeCount(max_size);
    std::vector<int> size_vec(max_size, 0), max_vec(max_size, 0), freq_vec(max_size, 0);
    long long answer = 0;

    for (int i = 0; i < num_fragments; i++) {
        ++size_vec[fragments[i]];
    }

    for (int i = 1; i < max_size; i++) {
        for (int j = 1; j <= i; j++) {
            if (count[i][j]) {
                max_vec[i] = j;
                answer += 1LL * size_vec[i] * count[i][j];
            }
        }
    }

    while (true) {
        std::fill(freq_vec.begin(), freq_vec.end(), 0);
        for (int i = 1; i < max_size; i++) {
            freq_vec[max_vec[i]] += size_vec[i];
        }

        int max_index = 2;
        for (int i = 2; i < max_size; i++) {
            if (freq_vec[i] > freq_vec[max_index]) {
                max_index = i;
            }
        }

        if (freq_vec[max_index] * 2 <= num_fragments) {
            break;
        }

        answer += num_fragments - freq_vec[max_index] - freq_vec[max_index];
        for (int i = 1; i < max_size; i++) {
            if (max_vec[i] != max_index) {
                max_vec[i] = 1;
            }
            if (max_vec[i] == 1) {
                continue;
            }
            --count[i][max_index];
            while (max_vec[i] > 1 && !count[i][max_vec[i]]) {
                --max_vec[i];
            }
        }
    }

    return answer;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
   
  //TEST
std::vector<int> fragments_1 = {0};
long long expected_1 = 0; 
long long result_1 = CalculateMinimalPathSum(fragments_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> fragments_2 = {1, 2, 3};
long long expected_2 = 3; 
long long result_2 = CalculateMinimalPathSum(fragments_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> fragments_3 = {5,1,3};
long long expected_3 = 7; 
long long result_3 = CalculateMinimalPathSum(fragments_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> fragments_4 = {1, 2, 5};
long long expected_4 = 6; 
long long result_4 = CalculateMinimalPathSum(fragments_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> fragments_5 = {1, 3, 5, 7, 9};
long long expected_5 = 28; 
long long result_5 = CalculateMinimalPathSum(fragments_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> fragments_6 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
long long expected_6 = 51;
long long result_6 = CalculateMinimalPathSum(fragments_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> fragments_7 = {1,2};
long long expected_7 = 1;
long long result_7 = CalculateMinimalPathSum(fragments_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> fragments_8 = {0};
long long expected_8 = 0;
long long result_8 = CalculateMinimalPathSum(fragments_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> fragments_9 = {10, 20};
long long expected_9 = 51; 
long long result_9 = CalculateMinimalPathSum(fragments_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<int> fragments_10 = {-1, 1, 2}; 
try {
    CalculateMinimalPathSum(fragments_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> fragments_11 = {0, 5001};
try {
    CalculateMinimalPathSum(fragments_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> fragments_12 = {}; 
try {
    CalculateMinimalPathSum(fragments_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> fragments_13(1000001, 0); 
try {
    CalculateMinimalPathSum(fragments_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> fragments_14 = {0, 1, -1}; 
try {
    CalculateMinimalPathSum(fragments_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

    return 0;
}

