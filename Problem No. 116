/*
Link: https://codeforces.com/contest/1270/problem/F
*/

#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>
#include <algorithm> 


    long long AwesomeSubstrings(const std::string& input_string) {

        int string_length = input_string.length();
        
        if (string_length < 1 || string_length > 200000) {
            throw std::invalid_argument("Invalid input string length");
        }
      
        for (int i = 1; i <= string_length; ++i) {
          
            if (input_string[i - 1] != '0' && input_string[i - 1] != '1') {
                throw std::invalid_argument("Invalid character in input string");
            }
        }

        int block_size = static_cast<int>(std::sqrt(string_length));
        std::vector<int> prefix_sum(string_length + 1, 0);
        std::vector<int> transformed_prefix(string_length + 1, 0);
        std::vector<int> stack(string_length + 1, 0);
        int stack_top = 0;
        long long result = 0;

        for (int i = 1; i <= string_length; ++i) {
    
            prefix_sum[i] = prefix_sum[i - 1] + (input_string[i - 1] == '1');
        }

        for (int i = 1; i <= block_size; ++i) {
            for (int j = 0; j <= string_length; ++j) {
                transformed_prefix[j] = i * prefix_sum[j] - j;
            }
            std::sort(transformed_prefix.begin(), transformed_prefix.begin() + string_length + 1);
            for (int j = 0; j <= string_length;) {
                int k = j + 1;
                while (k <= string_length && transformed_prefix[k] == transformed_prefix[j]) ++k;
                result += 1LL * (k - j) * (k - j - 1) / 2;
                j = k;
            }
        }

        for (int i = 1; i <= string_length; ++i) {
            if (input_string[i - 1] == '1') stack[++stack_top] = i;
            for (int j = stack_top; j >= 1 && (stack_top - j + 1) * (block_size + 1) <= i; --j) {
                int left_bound = std::max(i - stack[j] + 1, (stack_top - j + 1) * (block_size + 1));
                int right_bound = i - stack[j - 1];
                if (left_bound <= right_bound) {
                    result += right_bound / (stack_top - j + 1) - (left_bound - 1) / (stack_top - j + 1);
                }
            }
        }

        return result;
    }

#include <cassert>  
  
int main() {
  
// TEST 
std::string input_string_1 = "0";
long long expected_1 = 0; 
long long result_1 = AwesomeSubstrings(input_string_1);
assert(result_1 == expected_1);
//TEST_END
  
// TEST 
std::string input_string_2 = "1";
long long expected_2 = 1;
long long result_2 = AwesomeSubstrings(input_string_2);
assert(result_2 == expected_2);
//TEST_END
  
// TEST 
std::string input_string_3 = "01";
long long expected_3 = 2; 
long long result_3 = AwesomeSubstrings(input_string_3);
assert(result_3 == expected_3);
//TEST_END
  
// TEST 
std::string input_string_4 = "10";
long long expected_4 = 2; 
long long result_4 = AwesomeSubstrings(input_string_4);
assert(result_4 == expected_4);
//TEST_END
  
// TEST 
std::string input_string_5 = "110";
long long expected_5 = 4; 
long long result_5 = AwesomeSubstrings(input_string_5);
assert(result_5 == expected_5);
//TEST_END
  
// TEST 
std::string input_string_6 = "111";
long long expected_6 = 6; 
long long result_6 = AwesomeSubstrings(input_string_6);
assert(result_6 == expected_6);
//TEST_END
  
// TEST 
std::string input_string_7 = "000";
long long expected_7 = 0; 
long long result_7 = AwesomeSubstrings(input_string_7);
assert(result_7 == expected_7);
//TEST_END
  
// TEST 
std::string input_string_8 = "101";
long long expected_8 = 4; 
long long result_8 = AwesomeSubstrings(input_string_8);
assert(result_8 == expected_8);
//TEST_END
  
// TEST 
std::string input_string_9 = "0101";
long long expected_9 = 7;
long long result_9 = AwesomeSubstrings(input_string_9);
assert(result_9 == expected_9);

//TEST_END
  
// TEST 
std::string input_string_10 = "";
try {
    AwesomeSubstrings(input_string_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

// TEST 
std::string input_string_11 = std::string(200001, '0'); 
try {
    AwesomeSubstrings(input_string_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
  
//TEST_END

// TEST 
std::string input_string_12 = "2"; 
try {
    AwesomeSubstrings(input_string_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

// TEST 
std::string input_string_13 = "a";
try {
    AwesomeSubstrings(input_string_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
    return 0;
}
