/*
Link: https://codeforces.com/contest/1270/problem/F

Alex calls a binary string input_string awesome if it has at least 1 symbol '1' and the length of the string is divisible by the number of '1' in it.
In particular, 1, 1010, 111 are awesome, but 0, 110, 01010 aren't.

For a given a binary string input_string. Alex needs to find the count the number of its awesome substrings.

A string a is a substring of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters from the beginning 
and several (possibly, zero or all) characters from the end.

Your task is to return the number of awesome substrings of input_string.

Create a C++ function AwesomeSubstrings that will return a long long denoting the number of awesome substrings.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

A string denoting input_string

Input Constraints:

The length of input_string should be between 1 and 200,000 inclusive.
The input_string should consist only of the characters '0' and '1'.

*/

#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>
#include <algorithm> 


    long long AwesomeSubstrings(const std::string& input_string) {

        int string_length = input_string.length();
        
        if (string_length < 1 || string_length > 200000) {
            throw std::invalid_argument("Invalid input string length");
        }
      
        for (int i = 1; i <= string_length; ++i) {
          
            if (input_string[i - 1] != '0' && input_string[i - 1] != '1') {
                throw std::invalid_argument("Invalid character in input string");
            }
        }

        int block_size = static_cast<int>(std::sqrt(string_length));
        std::vector<int> prefix_sum(string_length + 1, 0);
        std::vector<int> transformed_prefix(string_length + 1, 0);
        std::vector<int> stack(string_length + 1, 0);
        int stack_top = 0;
        long long result = 0;

        for (int i = 1; i <= string_length; ++i) {
    
            prefix_sum[i] = prefix_sum[i - 1] + (input_string[i - 1] == '1');
        }

        for (int i = 1; i <= block_size; ++i) {
            for (int j = 0; j <= string_length; ++j) {
                transformed_prefix[j] = i * prefix_sum[j] - j;
            }
            std::sort(transformed_prefix.begin(), transformed_prefix.begin() + string_length + 1);
            for (int j = 0; j <= string_length;) {
                int k = j + 1;
                while (k <= string_length && transformed_prefix[k] == transformed_prefix[j]) ++k;
                result += 1LL * (k - j) * (k - j - 1) / 2;
                j = k;
            }
        }

        for (int i = 1; i <= string_length; ++i) {
            if (input_string[i - 1] == '1') stack[++stack_top] = i;
            for (int j = stack_top; j >= 1 && (stack_top - j + 1) * (block_size + 1) <= i; --j) {
                int left_bound = std::max(i - stack[j] + 1, (stack_top - j + 1) * (block_size + 1));
                int right_bound = i - stack[j - 1];
                if (left_bound <= right_bound) {
                    result += right_bound / (stack_top - j + 1) - (left_bound - 1) / (stack_top - j + 1);
                }
            }
        }

        return result;
    }

#include <cassert>  
  
int main() {
  
// TEST 
std::string input_string_1 = "0";
long long expected_1 = 0; 
long long result_1 = AwesomeSubstrings(input_string_1);
assert(result_1 == expected_1);
//TEST_END
  
// TEST 
std::string input_string_2 = "1";
long long expected_2 = 1;
long long result_2 = AwesomeSubstrings(input_string_2);
assert(result_2 == expected_2);
//TEST_END
  
// TEST 
std::string input_string_3 = "01";
long long expected_3 = 2; 
long long result_3 = AwesomeSubstrings(input_string_3);
assert(result_3 == expected_3);
//TEST_END
  
// TEST 
std::string input_string_4 = "10";
long long expected_4 = 2; 
long long result_4 = AwesomeSubstrings(input_string_4);
assert(result_4 == expected_4);
//TEST_END
  
// TEST 
std::string input_string_5 = "110";
long long expected_5 = 4; 
long long result_5 = AwesomeSubstrings(input_string_5);
assert(result_5 == expected_5);
//TEST_END
  
// TEST 
std::string input_string_6 = "111";
long long expected_6 = 6; 
long long result_6 = AwesomeSubstrings(input_string_6);
assert(result_6 == expected_6);
//TEST_END
  
// TEST 
std::string input_string_7 = "000";
long long expected_7 = 0; 
long long result_7 = AwesomeSubstrings(input_string_7);
assert(result_7 == expected_7);
//TEST_END
  
// TEST 
std::string input_string_8 = "101";
long long expected_8 = 4; 
long long result_8 = AwesomeSubstrings(input_string_8);
assert(result_8 == expected_8);
//TEST_END
  
// TEST 
std::string input_string_9 = "0101";
long long expected_9 = 7;
long long result_9 = AwesomeSubstrings(input_string_9);
assert(result_9 == expected_9);

//TEST_END
  
// TEST 
std::string input_string_10 = "";
try {
    AwesomeSubstrings(input_string_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

// TEST 
std::string input_string_11 = std::string(200001, '0'); 
try {
    AwesomeSubstrings(input_string_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
  
//TEST_END

// TEST 
std::string input_string_12 = "2"; 
try {
    AwesomeSubstrings(input_string_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

// TEST 
std::string input_string_13 = "a";
try {
    AwesomeSubstrings(input_string_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
    return 0;
}
