/*
Link : https://codeforces.com/contest/360/problem/C
*/

#include <iostream>
#include <vector>
#include <stdexcept>



    int BeautyEqualsK(int max_operations, std::string& input_string)
    {
        int string_length = input_string.size();
      
        if (string_length < 1 || string_length > 2000 || max_operations < 0 || max_operations > 2000) {
            throw std::invalid_argument("Invalid input for string_length or max_operations");
        }
        if (input_string.length() != static_cast<size_t>(string_length)) {
            throw std::invalid_argument("Input string length does not match the provided string_length");
        }
        for (char character : input_string) {
            if (character < 'a' || character > 'z') {
                throw std::invalid_argument("Input string contains invalid characters");
            }
        }

        const int modulus = 1000000007;
        std::vector<std::vector<int>> f_vec(string_length + 1, std::vector<int>(max_operations + 1, 0));
        std::vector<std::vector<int>> g_vec(string_length + 1, std::vector<int>(max_operations + 1, 0));
        f_vec[0][0] = g_vec[0][0] = 1;

        for (int i = 1; i <= string_length; i++) {
            for (int j = 0; j <= max_operations; j++) {
                f_vec[i][j] = static_cast<long long>(g_vec[i - 1][j]) * (input_string[i - 1] - 'a') % modulus;
                for (int k = 0, temp; k < i && (temp = (k + 1) * (string_length - i + 1)) <= j; k++) {
                    f_vec[i][j] = (f_vec[i][j] + static_cast<long long>(f_vec[i - k - 1][j - temp]) * (122 - input_string[i - 1]) % modulus) % modulus;
                }
                g_vec[i][j] = (g_vec[i - 1][j] + f_vec[i][j]) % modulus;
            }
        }

        return g_vec[string_length][max_operations];
    }

#include <cassert>

int main() {
  
   // TEST 
int max_operations_1 = 1;
std::string input_string_1 = "a";
int expected_1 = 25;
int result_1 = BeautyEqualsK(max_operations_1, input_string_1);
assert(result_1 == expected_1);
// TEST_END

// TEST 
int max_operations_2 = 2;
std::string input_string_2 = "ab";
int expected_2 = 74;
int result_2 = BeautyEqualsK(max_operations_2, input_string_2);
assert(result_2 == expected_2);
// TEST_END

// TEST 
int max_operations_3 = 3;
std::string input_string_3 = "abc";
int expected_3 = 173;
int result_3 = BeautyEqualsK(max_operations_3, input_string_3);
assert(result_3 == expected_3);
// TEST_END

// TEST 
int max_operations_4 = 0;
std::string input_string_4 = "abc";
int expected_4 = 6;
int result_4 = BeautyEqualsK(max_operations_4, input_string_4);
assert(result_4 == expected_4);
// TEST_END

// TEST 
int max_operations_5 = 4;
std::string input_string_5 = "abcd";
int expected_5 = 622;
int result_5 = BeautyEqualsK(max_operations_5, input_string_5);
assert(result_5 == expected_5);
// TEST_END

// TEST 
int max_operations_6 = 5;
std::string input_string_6 = "aaaaa";
int expected_6 = 50;
int result_6 = BeautyEqualsK(max_operations_6, input_string_6);
assert(result_6 == expected_6);
// TEST_END

// TEST 
int max_operations_7 = 2;
std::string input_string_7 = "aaabbb";
int expected_7 = 72;
int result_7 = BeautyEqualsK(max_operations_7, input_string_7);
assert(result_7 == expected_7);
// TEST_END

// TEST 
int max_operations_8 = 0;
std::string input_string_8 = "aabbbcc";
int expected_8 = 72;
int result_8 = BeautyEqualsK(max_operations_8, input_string_8);
assert(result_8 == expected_8);
// TEST_END

// TEST 
int max_operations_9 = 3;
std::string input_string_9 = "aabcc";
int expected_9 = 529;
int result_9 = BeautyEqualsK(max_operations_9, input_string_9);
assert(result_9 == expected_9);
// TEST_END

// TEST 
int max_operations_10 = -999;
std::string input_string_10 = "a";
try {
    BeautyEqualsK(max_operations_10, input_string_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int max_operations_11 = 1;
std::string input_string_11 = "";
try {
    BeautyEqualsK(max_operations_11, input_string_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int max_operations_12 = 2001;
std::string input_string_12 = "abc";
try {
    BeautyEqualsK(max_operations_12, input_string_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int max_operations_13 = 1;
std::string input_string_13 = std::string(2001, 'a');
try {
    BeautyEqualsK(max_operations_13, input_string_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
// TEST 
int max_operations_14 = 1;
std::string input_string_14 = "ABCD";
try {
    BeautyEqualsK(max_operations_14, input_string_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END



    return 0;
}


