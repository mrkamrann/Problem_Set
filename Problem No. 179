/*
Link: https://codeforces.com/contest/1767/problem/E

Alice is playing a new gamemode called "Colored Platforms". In this game, there are num_platforms platforms, numbered from 1 to num_platforms, placed one after 
another. There are num_colors colors available in the game, numbered from 1 to num_colors. The i-th platform is colored platform_colors[i].

Alice starts on platform 1 and wants to reach platform num_platforms. In one move, she can jump from some platform i to platforms i+1 or i+2.

All platforms are initially deactivated (including platforms 1 and num_platforms). For each color j, Alice can pay activation_costs[j] coins to activate all 
platforms of that color.

Alice wants to activate some platforms so that she could start on an activated platform 1, jump through some activated platforms and reach an activated platform num_platforms.

What's the smallest amount of coins Alice can spend to achieve that?

Create a C++ Function CalculateMinActivationCost that will return a long long denoting the minimum amount of coins required. 

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A vector of integers platform_colors denoting the colors of each platform.
A vector of integers activation_costs denoting the cost of activating all platforms of each color.

Input Constraints:

The value of num_platforms should be at least 2 and at most 300,000 inclusive.
The value of num_colors should be at least 1 and at most 40 inclusive.
Each value in platform_colors should be at least 1 and at most num_colors inclusive.
Each value in activation_costs should be at least 1 and at most 10^7 inclusive.


*/
#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>
#include <cassert>
#include <numeric>

void AddConnection(std::vector<long long>& color_connections, int platform_a, int platform_b) {
    if (platform_a >= 0 && platform_a < static_cast<int>(color_connections.size()) &&
        platform_b >= 0 && platform_b < static_cast<int>(color_connections.size())) {
        color_connections[platform_a] |= (1ll << (platform_b - 1));
        color_connections[platform_b] |= (1ll << (platform_a - 1));
    }
}

int CalculateMaximumValue(long long state, const std::vector<long long>& color_connections, const std::vector<int>& activation_costs, std::map<long long, int>& memo) {
    if (!state) return 0;
    if (memo.count(state)) return memo[state];
    int active_bit = static_cast<int>(std::log2(state & -state) + 1);
    int result = CalculateMaximumValue(state ^ (1ll << (active_bit - 1)), color_connections, activation_costs, memo);
    if (active_bit < static_cast<int>(color_connections.size()) && !((color_connections[active_bit] >> (active_bit - 1)) & 1)) {
        result = std::max(result, CalculateMaximumValue(state ^ (1ll << (active_bit - 1)) ^ (state & color_connections[active_bit]), color_connections, activation_costs, memo) + activation_costs[active_bit - 1]);
    }
    return memo[state] = result;
}

long long CalculateMinActivationCost(const std::vector<int>& platform_colors, const std::vector<int>& activation_costs) {

     int num_platforms = platform_colors.size(),  num_colors = activation_costs.size();
    if (num_platforms < 2 || num_platforms > 300000 || num_colors < 1 || num_colors > 40) {
        throw std::invalid_argument("num_platforms must be between 2 and 300000; num_colors must be between 1 and 40");
    }

    for (int color : platform_colors) {
        if (color < 1 || color > num_colors) {
            throw std::invalid_argument("platform_colors must be between 1 and num_colors");
        }
    }

    for (int cost : activation_costs) {
        if (cost < 1 || cost > 10000000) {
            throw std::invalid_argument("activation_costs must be between 1 and 10000000");
        }
    }

    std::vector<long long> color_connections(num_colors + 1, 0);
    std::map<long long, int> memo;
    int total_cost = std::accumulate(activation_costs.begin(), activation_costs.end(), 0);

    AddConnection(color_connections, platform_colors[0], platform_colors[0]);
    AddConnection(color_connections, platform_colors[num_platforms - 1], platform_colors[num_platforms - 1]);

    for (int i = 0; i < num_platforms - 1; ++i) {
        AddConnection(color_connections, platform_colors[i], platform_colors[i + 1]);
    }

    return total_cost - CalculateMaximumValue((1ll << num_colors) - 1, color_connections, activation_costs, memo);
}

#include <iostream>
#include <vector>
#include <map>
#include <cmath>
#include <stdexcept>
#include <cassert>
#include <numeric>

int main() {
    
  //TEST
std::vector<int> platform_colors_1 = {1, 2, 1};
std::vector<int> activation_costs_1 = {100000, 200000, 300000};
long long expected_1 = 100000; 
long long result_1 = CalculateMinActivationCost(platform_colors_1, activation_costs_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> platform_colors_2 = {1, 2, 3, 1, 2};
std::vector<int> activation_costs_2 = {500000, 1000000, 1500000, 2000000, 2500000};
long long expected_2 = 1500000; 
long long result_2 = CalculateMinActivationCost(platform_colors_2, activation_costs_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> platform_colors_3 = {1, 1, 1, 1, 1};
std::vector<int> activation_costs_3 = {100000, 100000, 100000, 100000, 100000};
long long expected_3 = 100000; 
long long result_3 = CalculateMinActivationCost(platform_colors_3, activation_costs_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> platform_colors_4 = {2, 2, 2, 2};
std::vector<int> activation_costs_4 = {500000, 500000, 500000, 500000};
long long expected_4 = 500000; 
long long result_4 = CalculateMinActivationCost(platform_colors_4, activation_costs_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> platform_colors_5 = {1, 2, 3, 4, 5};
std::vector<int> activation_costs_5 = {100000, 200000, 300000, 400000, 500000};
long long expected_5 = 900000; 
long long result_5 = CalculateMinActivationCost(platform_colors_5, activation_costs_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> platform_colors_6 = {1, 2};
std::vector<int> activation_costs_6 = {100000, 200000};
long long expected_6 = 300000; 
long long result_6 = CalculateMinActivationCost(platform_colors_6, activation_costs_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> platform_colors_7 = {1, 2, 2, 1};
std::vector<int> activation_costs_7 = {150000, 250000, 250000, 150000};
long long expected_7 = 400000; 
long long result_7 = CalculateMinActivationCost(platform_colors_7, activation_costs_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> platform_colors_8 = {1, 1};
std::vector<int> activation_costs_8 = {1000000, 1000000};
long long expected_8 = 1000000; 
long long result_8 = CalculateMinActivationCost(platform_colors_8, activation_costs_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> platform_colors_9 = {1, 3, 1, 3, 2};
std::vector<int> activation_costs_9 = {500000, 700000, 500000, 700000, 900000};
long long expected_9 = 1200000;
long long result_9 = CalculateMinActivationCost(platform_colors_9, activation_costs_9);
assert(result_9 == expected_9);
//TEST_END



//TEST
std::vector<int> platform_colors_10 = {1, 2, 1};
std::vector<int> activation_costs_10 = {100000}; 
try {
   CalculateMinActivationCost(platform_colors_10, activation_costs_10); 
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_11 = {1};
std::vector<int> activation_costs_11(1e6, 1); 
try {
    CalculateMinActivationCost(platform_colors_11, activation_costs_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_12 = {1, 2};
std::vector<int> activation_costs_12 = {1000000000, 200000};
try {
    CalculateMinActivationCost(platform_colors_12, activation_costs_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_13 = {1, 41000000}; 
std::vector<int> activation_costs_13 = {100000, 200000};
try {
CalculateMinActivationCost(platform_colors_13, activation_costs_13);
 
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_14 = {};
std::vector<int> activation_costs_14 = {100000, 200000};
try {
    CalculateMinActivationCost(platform_colors_14, activation_costs_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_15 = {1, 2};
std::vector<int> activation_costs_15 = {};
try {
    CalculateMinActivationCost(platform_colors_15, activation_costs_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_16 = {1, 2, 3};
std::vector<int> activation_costs_16 = {100000, 200000, -9999}; 
try {
    CalculateMinActivationCost(platform_colors_16, activation_costs_16);  
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_17 = {1, -999999}; 
std::vector<int> activation_costs_17 = {100000, 200000};
try {
    CalculateMinActivationCost(platform_colors_17, activation_costs_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> platform_colors_18(1e6, 1);
std::vector<int> activation_costs_18 = {100000, 20000000}; 
try {
    CalculateMinActivationCost(platform_colors_18, activation_costs_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END



    return 0;
}
