/*
Link: https://codeforces.com/contest/1510/problem/J
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>



bool ProcessSubString(int x, int top, std::vector<int>& stack, std::vector<int>& values, std::vector<int>& result) {
    result.clear();
    for (int i = 1; i <= top; i++) {
        int diff = stack[i] - x - 1;
        if (diff < 0 || diff == 1) return false;
        if ((diff & 1) && x >= 2) {
            result.push_back(2);
            diff -= 3;
        }
        while (diff > 1 && x >= 1) {
            result.push_back(1);
            diff -= 2;
        }
        if (diff) return false;
        if (i != top) result.push_back(x + values[i]);
    }
    return true;
}

std::vector<int> ProcessString(const std::string& str) {

    int length = str.length();
  
    if (length < 1 || length > 100000) {
        throw std::invalid_argument("The length of the string must be between 1 and 100000.");
    }

    for (char character : str) {
        if (character != '#' && character != '_') {
            throw std::invalid_argument("The string must consist only of symbols '#' and '_'.");
        }
    }
    int max_length = 240000;
    std::vector<int> stack(max_length), values(max_length, 0), result;
    int top = 0, last_hash_index = -1;

    for (int i = 0; i < length; i++) {
        if (str[i] == '#') {
            if (i == 0 || str[i - 1] != '#') {
                stack[++top] = i - last_hash_index - 1;
            }
            values[top]++;
            last_hash_index = i;
        }
    }
    stack[++top] = length - last_hash_index;
    stack[1]++;

    if (top == 1) {
        return {};
    }

    for (int i = 0; i <= 5; i++) {
        if (ProcessSubString(i, top, stack, values, result)) {
            return result;
        }
    }

    return {-1};
}

int main() {
    std::string input_string;
    std::cin >> input_string;

    auto result = ProcessString(input_string);

    if (result.empty()) {
        std::cout << 0 << std::endl;
    } else if (result[0] == -1) {
        std::cout << -1 << std::endl;
    } else {
        std::cout << result.size() << std::endl;
        for (int value : result) {
            std::cout << value << " ";
        }
    }

    return 0;
}
