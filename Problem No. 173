/*
Link: https://codeforces.com/contest/1510/problem/J

Binod really likes the culture of Japan. Last year he learned Japanese traditional clothes and visual arts, and now he is trying to find out the secret of the 
Japanese game called Nonogram.

In the one-dimensional version of the game, there is a row of length empty cells, some of which are to be filled with a pen. There is a description of a solution 
called a profile — a sequence of positive integers denoting the lengths of consecutive sets of filled cells. For example, the profile of [4,3,1] means that there 
are sets of four, three, and one filled cells, in that order, with at least one empty cell between successive sets.

Binod found out that for some numbers length and profiles profile there are lots of ways to fill the cells to satisfy the profile. Now he is in the process of 
solving a nonogram consisting of length cells and a profile profile. He has already created a mask of profile — he has filled all the cells that must be filled 
in every solution of the nonogram.

After a break, he lost the source profile profile. He only has length and the mask str. Help Binod find any profile profile with the mask str or say that there 
is no such profile and Binod has made a mistake.

Given a string str — the mask of the source profile profile. The length of str is length. The string str consists of symbols # and _ — denoting filled and e
mpty cells respectively.

If there is no profile with the mask str, return the number -1. Otherwise, k integers of the profile,  k can also be 0.

Create a C++ function FindProfile that will return a vector<int> denoting the profile of the nonogram with the given mask or return {-1} if no such profile exists.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

A string str denoting the mask

Input Constraints

The length of str should be at least 1 and at most 100000 inclusive.
The string str consists of symbols # and _

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>



bool ProcessSubString(int x_val, int top, std::vector<int>& stack, std::vector<int>& values, std::vector<int>& result) {
    result.clear();
    for (int i = 1; i <= top; i++) {
        int diff = stack[i] - x_val - 1;
        if (diff < 0 || diff == 1) return false;
        if ((diff & 1) && x_val >= 2) {
            result.push_back(2);
            diff -= 3;
        }
        while (diff > 1 && x_val >= 1) {
            result.push_back(1);
            diff -= 2;
        }
        if (diff) return false;
        if (i != top) result.push_back(x_val + values[i]);
    }
    return true;
}

std::vector<int> FindProfile(const std::string& str) {

    int length = str.length();
  
    if (length < 1 || length > 100000) {
        throw std::invalid_argument("The length of the string must be between 1 and 100000.");
    }

    for (char character : str) {
        if (character != '#' && character != '_') {
            throw std::invalid_argument("The string must consist only of symbols '#' and '_'.");
        }
    }
    int max_length = 240000;
    std::vector<int> stack(max_length), values(max_length, 0), result;
    int top = 0, last_hash_index = -1;

    for (int i = 0; i < length; i++) {
        if (str[i] == '#') {
            if (i == 0 || str[i - 1] != '#') {
                stack[++top] = i - last_hash_index - 1;
            }
            values[top]++;
            last_hash_index = i;
        }
    }
    stack[++top] = length - last_hash_index;
    stack[1]++;

    if (top == 1) {
        return {};
    }

    for (int i = 0; i <= 5; i++) {
        if (ProcessSubString(i, top, stack, values, result)) {
            return result;
        }
    }

    return {-1};
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
   
  // TEST
std::string str_1 = "#_#_#";
std::vector<int> expected_1 = {1,1,1};
std::vector<int> result_1 = FindProfile(str_1);
 assert(result_1 == expected_1);
// TEST_END

// TEST
std::string str_2 = "#####";
std::vector<int> expected_2 = {5};
std::vector<int> result_2 = FindProfile(str_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::string str_3 = "_____";
std::vector<int> expected_3 = {};
std::vector<int> result_3 = FindProfile(str_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::string str_4 = "_#_#_";
std::vector<int> expected_4 = {-1};
std::vector<int> result_4 = FindProfile(str_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::string str_5 = "#";
std::vector<int> expected_5 = {1};
std::vector<int> result_5 = FindProfile(str_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::string str_6 = "_";
std::vector<int> expected_6 = {};
std::vector<int> result_6 = FindProfile(str_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
std::string str_7 = "##_#__";
std::vector<int> expected_7 = {-1};
std::vector<int> result_7 = FindProfile(str_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::string str_8 = "#__##";
std::vector<int> expected_8 = {-1};
std::vector<int> result_8 = FindProfile(str_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::string str_9 = "##_#_#";
std::vector<int> expected_9 = {2,1,1};
std::vector<int> result_9 = FindProfile(str_9);
assert(result_9 == expected_9);
// TEST_END



// TEST
std::string str_10 = ""; 
try {
    FindProfile(str_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::string str_11 = std::string(100001, '#');
try {
    FindProfile(str_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END



// TEST
std::string str_12 = "#_#_#"; 
try {
    
    FindProfile(str_12);
    assert(true);
} catch(const std::invalid_argument& e) {
    assert(false);
}
// TEST_END
    return 0;
}
