/*
Link: https://codeforces.com/contest/10/problem/D
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


void ReconstructSubsequence(std::vector<int>& previous_index, std::vector<int>& sequence_b, int current_index, std::vector<int>& lis) {
        if (current_index == 0) return;
        ReconstructSubsequence(previous_index, sequence_b, previous_index[current_index], lis);
        lis.push_back(sequence_b[current_index - 1]);
    }


    std::vector<int> CalculateLIS(std::vector<int>& sequence_a, std::vector<int>& sequence_b) {

        if (sequence_a.empty() || sequence_b.empty() || sequence_a.size() > 500 || sequence_b.size() > 500) {
            throw std::invalid_argument("Invalid input size");
        }
        for (int value : sequence_a) {
            if (value < 0 || value > 1e9) {
                throw std::invalid_argument("Invalid value in sequence_a");
            }
        }
        for (int value : sequence_b) {
            if (value < 0 || value > 1e9) {
                throw std::invalid_argument("Invalid value in sequence_b");
            }
        }

        int length_a = static_cast<int>(sequence_a.size());
        int length_b = static_cast<int>(sequence_b.size());
        
        std::vector<int> length_lis(length_b + 1, 0);
        std::vector<int> previous_index(length_b + 1, 0);
        
        for (int i = 0; i < length_a; i++) {
            int max_length_index = 0;
            for (int j = 1; j <= length_b; j++) {
                if (sequence_a[i] == sequence_b[j - 1]) {
                    length_lis[j] = length_lis[max_length_index] + 1;
                    previous_index[j] = max_length_index;
                } else if (sequence_a[i] > sequence_b[j - 1] && length_lis[max_length_index] < length_lis[j]) {
                    max_length_index = j;
                }
            }
        }
        
        int max_length = 0;
        int max_length_end_index = 0;
        for (int i = 1; i <= length_b; i++) {
            if (length_lis[i] > length_lis[max_length_end_index]) {
                max_length_end_index = i;
            }
        }
        
        std::vector<int> lis;
        ReconstructSubsequence(previous_index, sequence_b, max_length_end_index, lis);
        
        return  lis;
    }


int main() {
    
    return 0;
}

