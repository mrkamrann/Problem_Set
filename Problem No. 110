/*
Link: https://codeforces.com/contest/1027/problem/G
*/

#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <vector>

#define ll long long
using namespace std;

struct Data {
    vector<ll> num;
    vector<ll> p;
    vector<ll> swp;
};

// Function to compute divisors of x and store them in `num`
void pre_work(ll x, vector<ll>& num) {
    for (ll i = 1; i * i <= x; i++) {
        if (x % i == 0) {
            num.push_back(i);
            if (i * i != x) num.push_back(x / i);
        }
    }
    sort(num.begin(), num.end());
}

// Function to compute prime factors of x and store them in `p`
void work(ll x, vector<ll>& p) {
    for (ll i = 2; i * i <= x; i++) {
        if (x % i == 0) {
            p.push_back(i);
            while (x % i == 0) x /= i;
        }
    }
    if (x > 1) p.push_back(x);
}

// Function to calculate Euler's Totient function
ll euler(ll x, const vector<ll>& p) {
    ll res = x;
    for (ll prime : p) {
        if (res % prime == 0) res -= res / prime;
    }
    return res;
}

// Function to perform modular multiplication
ll mul(ll a, ll b, ll mod) {
    a %= mod;
    b %= mod;
    ll res = (long double)a * b / mod + 0.5;
    res = a * b - mod * res;
    return (res % mod + mod) % mod;
}

// Function to perform modular exponentiation
ll ksm(ll a, ll b, ll mod) {
    ll ans = 1;
    while (b) {
        if (b & 1) ans = mul(ans, a, mod);
        a = mul(a, a, mod);
        b >>= 1;
    }
    return ans;
}

ll compute_answer(ll n, ll x) {
    Data data;

    // Precompute divisors of n
    pre_work(n, data.num);
    
    // Compute prime factors of n
    work(n, data.p);
    
    ll ans = 0;
    ll er = euler(n, data.p);
    
    // Compute prime factors of euler(n)
    if (er > 1) {
        work(er, data.swp);
    } else {
        data.swp.push_back(1);
    }
    
    // Compute the answer
    for (ll num_i : data.num) {
        ll u, er1;
        u = er1 = euler(num_i, data.p);
        
        if (u > 1) {
            for (ll swp_j : data.swp) {
                while (u % swp_j == 0 && ksm(x, u / swp_j, num_i) == 1) {
                    u /= swp_j;
                }
            }
        }
        
        ans += er1 / u;
    }
    
    return ans;
}

int main() {
    ll n, x;
    cin >> n >> x;
    cout << compute_answer(n, x) << endl;
    return 0;
}
