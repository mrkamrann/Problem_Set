/*
Link: https://codeforces.com/contest/850/problem/E


The presidential election is approaching in Bearland next year, and the excitement is palpable! Currently, there are three candidates: Alice, Bob, and Charlie.

Bearland has a population of len citizens. The election outcome is crucial as it will shape the future of Bearland's citizens for many years. Consequently, each
of the len citizens will randomly and independently choose one of six orders of preference among Alice, Bob, and Charlie with equal probability.

The government of Bearland has devised a function to help determine the election outcome based on voter preferences. Specifically, this 
function is f(x1,x2.....xn) : {0,1}^n -> {0,1} and takes len boolean numbers as input and returns a boolean number. The function also follows 
this property: f(1 - x1, 1 - x2, ..., 1 - xn) = 1 - f(x1, x2, ..., xn).

There will be three rounds of voting between each pair of candidates: Alice and Bob, Bob and Charlie, and Charlie and Alice. In each round, x_i will be equal 
to 1 if the i-th citizen prefers the first candidate to the second candidate in that round, and 0 otherwise. After this, y = f(x1, x2, ..., xn) will be calculated. If y = 1, the first candidate wins the round. If y = 0, the second candidate wins the round.

Define the probability that one candidate wins two of the three rounds as p. The value p·6^len is always an integer. 
Print this integer value modulo 1000000007.

You are given a string of length 2^len of zeros and ones, representing function f. Let bk(x) be the k-th bit in the binary representation of x. 
The i-th (0-based) digit of this string shows the return value of f(b1(i), b2(i), ..., bn(i)).

It is guaranteed that f(1 - x1, 1 - x2, ..., 1 - xn) = 1 - f(x1, x2, ..., xn) for any values of x1, x2, ..., xn.

Return one number — the answer to the problem.

Create a C++ Function DetermineElectionOutcome that will return a long long denoting the probability integer value modulo 1000000007.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An Integer denoting len
A string denoting str

Input Constraints:

The value of len should be at least 1 and at most 20 inclusive.
The length of the string should be 2^len.
The string should only contain zeros and ones.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


long long DetermineElectionOutcome(int len, const std::string& str) {


    if (len < 1 || len > 20) {
        throw std::invalid_argument("len out of range");
    }
    if (str.length() != (1 << len)) {
        throw std::invalid_argument("str length mismatch");
    }
    for (char character : str) {
        if (character != '0' && character != '1') {
            throw std::invalid_argument("str contains invalid characters");
        }
    }
    long long modulus = 1000000007;
    std::vector<long long> count(1 << len, 0);
    std::vector<long long> temp(1 << len, 0);

    for (int i = 0; i < (1 << len); i++) {
        count[i] = (str[i] == '1');
    }

    for (int i = 0; i < len; i++) {
        for (int j = 0; j < (1 << len); j++) {
            temp[j] = count[j];
            temp[j] += (2 * count[j ^ (1 << i)]);
            temp[j] %= modulus;
        }
        for (int j = 0; j < (1 << len); j++) {
            count[j] = temp[j];
        }
    }

    long long result = 0;
    for (int i = 0; i < (1 << len); i++) {
        if (str[i] == '0') {
            result += count[i];
            result %= modulus;
        }
    }

    result *= 3;
    result %= modulus;

    return result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
   
//TEST
int len_1 = 1;
std::string str_1 = "01";
long long expected_1 = 6;
long long result_1 = DetermineElectionOutcome(len_1, str_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int len_2 = 2;
std::string str_2 = "0011";
long long expected_2 = 36;
long long result_2 = DetermineElectionOutcome(len_2, str_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int len_3 = 3;
std::string str_3 = "00001111";
long long expected_3 = 216;
long long result_3 = DetermineElectionOutcome(len_3, str_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
int len_4 = 4;
std::string str_4 = "0101010101010101";
long long expected_4 = 1296;
long long result_4 = DetermineElectionOutcome(len_4, str_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int len_5 = 5;
std::string str_5 = "01010101010101010101010101010101";
long long expected_5 = 7776;
long long result_5 = DetermineElectionOutcome(len_5, str_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int len_6 = 6;
std::string str_6 = "0101010101010101010101010101010101010101010101010101010101010101";
long long expected_6 = 46656;
long long result_6 = DetermineElectionOutcome(len_6, str_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int len_7 = 7;
std::string str_7 = "01010101010101010101010101010101010010101010101010101010101010101011010101010101010101010101010101010101010101010101010101010101";
long long expected_7 = 222012;
long long result_7 = DetermineElectionOutcome(len_7, str_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int len_8 = 2;
std::string str_8 = "0000";
long long expected_8 = 0;
long long result_8 = DetermineElectionOutcome(len_8, str_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int len_9 = 1;
std::string str_9 = "11";
long long expected_9 = 0;
long long result_9 = DetermineElectionOutcome(len_9, str_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
int len_10 = 0; 
std::string str_10 = "0";
try {
    DetermineElectionOutcome(len_10, str_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_11 = 21;
std::string str_11 = "0";
try {
    DetermineElectionOutcome(len_11, str_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_12 = 3; 
std::string str_12 = "000111"; 
try {
    DetermineElectionOutcome(len_12, str_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_13 = 4; 
std::string str_13 = "0101A10101010101";
try {
    DetermineElectionOutcome(len_13, str_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_14 = 2; 
std::string str_14 = "01010";
try {
    DetermineElectionOutcome(len_14, str_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_15 = 3;
std::string str_15 = "00-0111";
try {
    DetermineElectionOutcome(len_15, str_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_16 = 2;
std::string str_16 = "101";
try {
    DetermineElectionOutcome(len_16, str_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_17 = 1; 
std::string str_17 = "02";
try {
    DetermineElectionOutcome(len_17, str_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_18 = 2; 
std::string str_18(1e6,'0');
try {
    DetermineElectionOutcome(len_18, str_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_19 = -1; 
std::string str_19 = "01";
try {
    DetermineElectionOutcome(len_19, str_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END



    return 0;
}

