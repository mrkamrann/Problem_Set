/*
Link : https://leetcode.com/problems/split-array-with-same-average/description/ 

Julie has an integer vector named nums.

Julie wants to split nums into two non-empty vectors vector_a and vector_b such that the average of vector_a is equal to the average of vector_b.

Return true if it is possible for Julie to split the vector in this way and false otherwise.

Note that for a vector vec, average(vec) is calculated as the sum of all the elements of vec divided by the number of elements in vec.

Create a C++ class Solution that will contain a function splitVectorSameAverage that will return an integer denoting the minimum number of trips required.

Use appropriate error handling using the stdexcept library for the invalid test cases.


Input Type:

A vector<int> denoting nums.

Input Constraints:

The length of nums must be at least 1 and at most 30 inclusive.
Each value in nums must be between 0 and 10,000 inclusive.

*/

#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

class Solution {
    int total_sum, num_elements;
    int power_of_two[24];
    
public:
    std::vector<std::vector<int>> MakeSubset(std::vector<int>& nums, int left_index, int right_index) {
        int max_combinations = 1 << (right_index - left_index);
        std::vector<std::vector<int>> subsets;

        for (int i = 0; i < max_combinations; i++) {
            int subset_sum = 0;
            int num_subset_elements = 0;

            for (int j = left_index; j < right_index; j++) {
                if (i & power_of_two[j - left_index]) {
                    subset_sum += nums[j];
                    num_subset_elements++;
                }
            }

            int value = subset_sum * num_elements - (num_subset_elements * total_sum);
            subsets.push_back({value, num_subset_elements});
        }

        return subsets;
    }

    int SearchSubset(const std::vector<std::vector<int>>& subsets, int target_value) {
        int index = subsets.size();
        int left = 0, right = subsets.size() - 1;

        while (left <= right) {
            int middle = left + (right - left) / 2;
            if (subsets[middle][0] >= target_value) {
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }

        while (left >= 0 && left < subsets.size() && subsets[left][0] == target_value) {
            index = left;
            left--;
        }

        return index;
    }

    bool SplitVectorSameAverage(std::vector<int>& nums) {
      
        if (nums.size() < 1 || nums.size() > 30) {
            throw std::invalid_argument("nums length must be between 1 and 30 inclusive.");
        }

        for (int num : nums) {
            if (num < 0 || num > 10'000) {
                throw std::invalid_argument("Each value in nums must be between 0 and 10,000 inclusive.");
            }
        }

        num_elements = nums.size();
        if (num_elements < 2) {
            return false;
        }

        power_of_two[0] = 1;
        for (int i = 1; i < 24; i++) {
            power_of_two[i] = power_of_two[i - 1] << 1;
        }

        total_sum = 0;
        for (int num : nums) {
            total_sum += num;
        }

        int mid_index = num_elements / 2;
        std::vector<std::vector<int>> left_subsets = MakeSubset(nums, 0, mid_index);
        std::vector<std::vector<int>> right_subsets = MakeSubset(nums, mid_index, num_elements);

        std::sort(right_subsets.begin(), right_subsets.end());

        for (const std::vector<int>& left_subset : left_subsets) {
            int index = SearchSubset(right_subsets, -left_subset[0]);

            while (index < right_subsets.size() && right_subsets[index][0] == -left_subset[0]) {
                if (left_subset[1] + right_subsets[index][1] < num_elements && left_subset[1] + right_subsets[index][1] > 0) {
                    return true;
                }
                index++;
            }
        }

        return false;
    }
};

int main(){

Solution solution;
  //TEST
std::vector<int> nums_1 = {1};
bool expected_1 = false;
bool result_1 = solution.SplitVectorSameAverage(nums_1);
assert(result_1 == expected_1);

//TEST_END

//TEST
std::vector<int> nums_2 = {1, 2};
bool expected_2 = false;
bool result_2 = solution.SplitVectorSameAverage(nums_2);
assert(result_2 == expected_2);

//TEST_END

//TEST
std::vector<int> nums_3 = {1, 2, 3, 4, 5, 6, 7, 8};
bool expected_3 = true;
bool result_3 = solution.SplitVectorSameAverage(nums_3);
assert(result_3 == expected_3);

//TEST_END

//TEST
std::vector<int> nums_4 = {3, 1, 4, 2, 5};
bool expected_4 = true;
bool result_4 = solution.SplitVectorSameAverage(nums_4);
assert(result_4 == expected_4);

//TEST_END

//TEST
std::vector<int> nums_5 = {5, 3, 11, 19, 10};
bool expected_5 = false;
bool result_5 = solution.SplitVectorSameAverage(nums_5);
assert(result_5 == expected_5);

//TEST_END

//TEST
std::vector<int> nums_6 = {6, 2, 8, 4, 3, 9};
bool expected_6 = true;
bool result_6 = solution.SplitVectorSameAverage(nums_6);
assert(result_6 == expected_6);

//TEST_END

//TEST
std::vector<int> nums_7 = {10, 1, 2, 3, 9, 8, 7};
bool expected_7 = false;
bool result_7 = solution.SplitVectorSameAverage(nums_7);
assert(result_7 == expected_7);

//TEST_END

//TEST
std::vector<int> nums_8 = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
bool expected_8 = true;
bool result_8 = solution.SplitVectorSameAverage(nums_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
std::vector<int> nums_9 = {10000, 9999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
bool expected_9 = true;
bool result_9 = solution.SplitVectorSameAverage(nums_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
std::vector<int> nums_10 = {};
try {
    solution.SplitVectorSameAverage(nums_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> nums_11 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
try {
    solution.SplitVectorSameAverage(nums_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> nums_12 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}; 
bool expected_12 = true;
bool result_12 = solution.SplitVectorSameAverage(nums_12);
assert(result_12 == expected_12);

//TEST_END

//TEST
std::vector<int> nums_13 = {-1990, -2, -4};
try {
    solution.SplitVectorSameAverage(nums_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<int> nums_14 = {1, 2, 3, 10001}; 
try {
    solution.SplitVectorSameAverage(nums_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
  return 0;
}


