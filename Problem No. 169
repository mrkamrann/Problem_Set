/*
Link: https://codeforces.com/contest/1436/problem/F

In the kingdom of Multisetland, Ronaldo, a great mathematician, was given a multiset s. Ronaldo needs to find the sum of the product of elements of all pairs 
of subsets a and b such that:

b is a proper subset of a.
The size of b is one less than the size of a.
The greatest common divisor (GCD) of all elements in a is equal to one.
Your task is to help Ronaldo by calculating the sum of ∑x∈a x * ∑x∈b x for all such pairs a and b, modulo 998244353.

Given an  integer num_elements : the number of different values in the multiset s.
And, a 2D vector frequencies of length num_elements next each of frequencies[i] contains two integers value and frequency. 
Element value appears in the multiset s frequency times. All value are different.

Output:

Return the required sum, modulo 998244353.

Create a C++ Function CalculateSubsetSum that will return a long long denoting the sum of products for the given conditions.

Use appropriate error handling using the std::invalid_argument library for invalid test cases.

Input Type:

A vector<vector<int>> denoting frequencies

Input Constraints:

num_elements should be in the range [1, 10^5] inclusive.
The length of frequencies should be exactly num_elements.
Each value of frequencies[i][0] should be in the range [1, 10^5] inclusive.
Each value of frequencies[i][1] should be in the range [1, 10^9] inclusive.
All frequencies[i][0] are distinct

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

long long FastPower(long long base, long long exponent) {
    long long result = 1;
    
    int modulus = 998244353, max_len = 100000;
  
    if (exponent < 0) return 0;
    while (exponent) {
        if (exponent & 1) {
            result = result * base % modulus;
        }
        base = base * base % modulus;
        exponent >>= 1;
    }
    return result;
}

long long CalculateSubsetSum(const std::vector<std::vector<int>>& frequencies) {

   int num_elements = frequencies.size();

    if (num_elements <= 0 || num_elements > 100000) {
        throw std::invalid_argument("Invalid number of elements");
    }
  
    int modulus = 998244353, max_len = 100000;
  
    std::vector<int> freq(max_len, 0);
    std::vector<bool> visited(max_len, false);
  
     
  
    for (int i = 0; i < num_elements; ++i) {
        int element = frequencies[i][0];
        int frequency = frequencies[i][1];
        if (element < 1 || element > max_len || frequency < 1 || frequency > 1000000000) {
            throw std::invalid_argument("Invalid frequency pair values");
        }
          if (visited[element]) {
            throw std::invalid_argument("Duplicate elements found in the input");
        }
        visited[element] = true;
        freq[element] = frequency;
    }

    std::vector<long long> result_freq(max_len, 0);
    for (int i = max_len - 1; i >= 1; --i) {
        long long count = 0;
        long long sum = 0;
        for (int j = i; j < max_len; j += i) {
            count += freq[j];
            sum = (sum + 1LL * freq[j] * j) % modulus;
        }
        for (int j = i; j < max_len; j += i) {
            if (freq[j]) {
                if (count >= 2) {
                    result_freq[i] = (result_freq[i] + 1LL * freq[j] * j % modulus * (sum - j) % modulus * (FastPower(2, count - 2) + (count - 2) % modulus * FastPower(2, count - 3) % modulus) % modulus) % modulus;
                    result_freq[i] = (result_freq[i] + (count - 1) % modulus * freq[j] % modulus * j % modulus * j % modulus * FastPower(2, count - 2) % modulus) % modulus;
                }
            }
            if (j > i) {
                result_freq[i] = (result_freq[i] - result_freq[j] + modulus) % modulus;
            }
        }
    }

    return (result_freq[1] + modulus) % modulus;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
   
//TEST
    std::vector<std::vector<int>> frequencies_1 = {{1, 1}, {2, 2}, {4, 3}};
    long long expected_1 = 9904;
    long long result_1 = CalculateSubsetSum(frequencies_1);
    assert(result_1 == expected_1);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_2 = {{10, 100}, {9, 999}, {500, 500}};
    long long expected_2 = 845554317;
    long long result_2 = CalculateSubsetSum(frequencies_2);
    assert(result_2 == expected_2);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_3 = {{1, 1}, {4, 1}, {100, 1}};
    long long expected_3 = 32276;
    long long result_3 = CalculateSubsetSum(frequencies_3);
    assert(result_3 == expected_3);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_4 = {{2, 5}, {3, 10}, {4, 15}};
    long long expected_4 = 297558360;
    long long result_4 = CalculateSubsetSum(frequencies_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_5 = {{1, 1000000000}, {2, 999999999}, {3, 500000000}};
    long long expected_5 = 808761941;
    long long result_5 = CalculateSubsetSum(frequencies_5);
    assert(result_5 == expected_5);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_6 = {{1, 1}};
    long long expected_6 = 0;
    long long result_6 = CalculateSubsetSum(frequencies_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_7 = {{10, 10}, {20, 20}, {30, 30}};
    long long expected_7 = 0;
    long long result_7 = CalculateSubsetSum(frequencies_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_8 = {{5, 5}, {6, 6}, {7, 7}};
    long long expected_8 = 507393449;
    long long result_8 = CalculateSubsetSum(frequencies_8);
    assert(result_8 == expected_8);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_9 = {{1000, 1000}, {2000, 2000}, {3000, 3000}};
    long long expected_9 = 0;
    long long result_9 = CalculateSubsetSum(frequencies_9);
    assert(result_9 == expected_9);
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_10 = {{-5, 1}, {2, 2}, {1, 3}, {1, 2}};
    long long expected_10 = 0;
    try {
        CalculateSubsetSum(frequencies_10);
        assert(false); 
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_11 = {{1, -1}, {2, 2}, {1, 3}};
    long long expected_11 = 0;
    try {
        CalculateSubsetSum(frequencies_11);
        assert(false); 
    } catch(const std::invalid_argument& e) {
        assert(true); 
    }
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_12 = {{1, 1}, {2, 2}, {1, 3}};
    long long expected_12 = 0;
    try {
        CalculateSubsetSum(frequencies_12);
        assert(false); 
    } catch(const std::invalid_argument& e) {
        assert(true); 
    }
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_13 = {{0, 1}, {2, 2}, {1, 3}};
    long long expected_13 = 0;
    try {
        CalculateSubsetSum(frequencies_13);
        assert(false); 
    } catch(const std::invalid_argument& e) {
        assert(true); 
    }
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_14 = {{1, 1}, {2, 2}, {1, 3}};
    long long expected_14 = 0;
    try {
        CalculateSubsetSum(frequencies_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true); 
    }
    //TEST_END

    //TEST
    std::vector<std::vector<int>> frequencies_15 = {{-1, -1}, {2, 2}, {1, 3}};
    long long expected_15 = 0;
    try {
        CalculateSubsetSum(frequencies_15);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

//TEST
std::vector<std::vector<int>> frequencies_16 = {{1, 1}, {-2, -2}, {1, 3}};
long long expected_16 = 0;
try {
    CalculateSubsetSum(frequencies_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_17 = {{1, 1}, {2, 2}, {-1, -3}};
long long expected_17 = 0;
try {
    CalculateSubsetSum(frequencies_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_18 = {{1, 1}, {2, 2}, {0, 3}};
long long expected_18 = 0;
try {
    CalculateSubsetSum(frequencies_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_19 = {{1, 1}, {2, 2}, {1, 1000000001}};
long long expected_19 = 0;
try {
    CalculateSubsetSum(frequencies_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_20(1e6, std::vector<int>(2, 1));
long long expected_20 = 0;
try {
    CalculateSubsetSum(frequencies_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_21 = {{1, 1}, {-66666, 2}, {1, 3}};
long long expected_21 = 0;
try {
    CalculateSubsetSum(frequencies_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_22 = {{1, 1}, {2, 2}, {100001, 3}};
long long expected_22 = 0;
try {
    CalculateSubsetSum(frequencies_22);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> frequencies_23 = {{1, -999999}, {2, 2}};
long long expected_23 = 0;
try {
    CalculateSubsetSum(frequencies_23);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
   return 0;
}


