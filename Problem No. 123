/*
Link: https://codeforces.com/contest/93/problem/E

Harry very much likes a multiplayer role-playing game WineAge II. Who knows, perhaps that might be the reason for his poor performance at the university. 
As any person who plays the game, he is interested in equipping his hero with as good a weapon and outfit as possible.

One day, as he was reading the game's forum yet again, he discovered a very interesting fact. As it turns out, each weapon in the game is characterized with 
k different numbers: a_1, ..., a_k. They are called hit indicators and according to the game developers' plan they are pairwise coprime.

The damage that is inflicted during a hit depends not only on the weapon's characteristics, but also on the hero's strength parameter. Thus, if the hero's strength
equals initial_value, then the inflicted damage will be calculated as the number of numbers on the segment  1 to n, that aren't divisible by any hit indicator a_i.

Recently, having fulfilled another quest, Harry found a new Lostborn sword. He wants to know how much damage he will inflict upon his enemies if he uses it.

Given two integers initial_value and hit_count. They are the indicators of Harry's hero's strength and the number of hit indicators which is denoted by a 
vector named factors with hit_count number of integers. They are the Lostborn sword's hit indicators. The given hit_count numbers are pairwise coprime.


Return a single number — the damage that will be inflicted by Harry's hero when he uses his new weapon.

Create a C++ function NewWeaponDamage that will return a long long denoting the calculated damage.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

A vector<int> denoting factors
An integer denoting initial_value

Input Constraints:

The value of initial_value should be between 1 and 10^13 inclusive.
The value of hit_count should be between 1 and 100 inclusive.
Each value in factors should be between 1 and 1000 inclusive, and are pairwise coprime.

*/

#include <iostream>
#include <algorithm>
#include <vector>
#include <stdexcept>
#include <numeric>
#include <cassert>

long long HelperFunction(long long multiplier, int index, const std::vector<int>& factors, std::vector<std::vector<long long>>& memo) {
    if (multiplier == 0 || index < 0) return multiplier;
    if (multiplier < 50000 && memo[index][multiplier]) return memo[index][multiplier];
    long long result = HelperFunction(multiplier, index - 1, factors, memo) - HelperFunction(multiplier / factors[index], index - 1, factors, memo);
    if (multiplier < 50000) memo[index][multiplier] = result;
    return result;
}

bool ArePairwiseCoprime(const std::vector<int>& factors) {
  
    int factor_count = factors.size();
    for (int i = 0; i < factor_count; ++i) {
        for (int j = i + 1; j < factor_count; ++j) {
            if (std::gcd(factors[i], factors[j]) != 1) {
                return false;
            }
        }
    }
    return true;
}

long long NewWeaponDamage(std::vector<int>& factors, long long initial_value) {
    if (factors.size() < 1 || factors.size() > 100) throw std::invalid_argument("Number of factors out of valid range");
    if (initial_value < 1 || initial_value > 1e13) throw std::invalid_argument("Initial value out of valid range");

    for (const int factor : factors) {
        if (factor < 1 || factor > 1000) throw std::invalid_argument("Factor out of valid range");
    }

    if (!ArePairwiseCoprime(factors)) {
        throw std::invalid_argument("Factors are not pairwise coprime");
    }

    int factor_count = factors.size();
    std::sort(factors.begin(), factors.end());

    std::vector<std::vector<long long>> memo(factor_count, std::vector<long long>(50000, 0));

    return HelperFunction(initial_value, factor_count - 1, factors, memo);
}

#include <iostream>
#include <algorithm>
#include <vector>
#include <stdexcept>
#include <numeric>
#include <cassert>

int main() {
   
  //TEST
std::vector<int> factors_1 = {2, 3, 5};
long long initial_value_1 = 1;
long long expected_1 = 1;
long long result_1 = NewWeaponDamage(factors_1, initial_value_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> factors_2 = {7, 11, 13};
long long initial_value_2 = 10;
long long expected_2 = 9;
long long result_2 = NewWeaponDamage(factors_2, initial_value_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> factors_3 = {17, 19};
long long initial_value_3 = 1000;
long long expected_3 = 893;
long long result_3 = NewWeaponDamage(factors_3, initial_value_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> factors_4 = {23, 29, 31};
long long initial_value_4 = 12345;
long long expected_4 = 11034;
long long result_4 = NewWeaponDamage(factors_4, initial_value_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> factors_5 = {37, 41};
long long initial_value_5 = 9876;
long long expected_5 = 9376;
long long result_5 = NewWeaponDamage(factors_5, initial_value_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> factors_6 = {43, 47, 53};
long long initial_value_6 = 67890;
long long expected_6 = 63677;
long long result_6 = NewWeaponDamage(factors_6, initial_value_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> factors_7 = {59, 61};
long long initial_value_7 = 1112131415;
long long expected_7 = 1075359079;
long long result_7 = NewWeaponDamage(factors_7, initial_value_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> factors_8 = {67, 71};
long long initial_value_8 = 313;
long long expected_8 = 305;
long long result_8 = NewWeaponDamage(factors_8, initial_value_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> factors_9 = {73, 79, 83};
long long initial_value_9 = 9876543210;
long long expected_9 = 9502062351;
long long result_9 = NewWeaponDamage(factors_9, initial_value_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<int> factors_10 = {1};
long long initial_value_10 = 0; 
try {
    NewWeaponDamage(factors_10, initial_value_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_11 = {1};
long long initial_value_11 = 10000000000001; 
try {
    NewWeaponDamage(factors_11, initial_value_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_12 = {0};
long long initial_value_12 = 10;
try {
    NewWeaponDamage(factors_12, initial_value_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_13 = {1001};
long long initial_value_13 = 10;
try {
    NewWeaponDamage(factors_13, initial_value_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_14 = {2, 4}; 
long long initial_value_14 = 10;
try {
    NewWeaponDamage(factors_14, initial_value_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_15 = {-5}; 
long long initial_value_15 = 10;
try {
    NewWeaponDamage(factors_15, initial_value_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_16 = {3};
long long initial_value_16 = -10; 
try {
    NewWeaponDamage(factors_16, initial_value_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> factors_17 = {1, 3, 7}; 
long long initial_value_17 = -1; 
try {
    NewWeaponDamage(factors_17, initial_value_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}

