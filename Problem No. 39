/*
Link : https://leetcode.com/problems/gcd-sort-of-an-array/description/

Jimmy faced a challenging task with an integer vector nums. He needed to determine if he could sort nums in non-decreasing order using a special swapping operation. This operation allowed him to swap elements 
nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1, where gcd(nums[i], nums[j]) denotes the greatest common divisor of nums[i] and nums[j].

Jimmy pondered over whether he could achieve the sorted order through these swaps. It was a puzzle that required careful consideration of the vector's elements and 
their relationships through their greatest common divisors.

Create a C++ Function GcdSort that will return true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise. 

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type

vector<int> denoting nums

Input Constraints:

1.The length of nums  should be at least 1 and at most 30000 inclusive.
2.Each element nums[i] should be in the range [2, 10^5] inclusive.


*/
#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

struct PrimeFactorization {
    std::vector<int> smallest_prime_factor;

    PrimeFactorization(int len) {
        smallest_prime_factor.resize(len);
        for (int i = 2; i < len; ++i) smallest_prime_factor[i] = i;
        for (int i = 2; i * i < len; i++) {
            if (smallest_prime_factor[i] != i) continue;
            for (int j = i * i; j < len; j += i)
                if (smallest_prime_factor[j] > i) smallest_prime_factor[j] = i;
        }
    }

    std::vector<int> GetPrimeFactors(int size) {
        std::vector<int> prime_factors;
        while (size > 1) {
            prime_factors.push_back(smallest_prime_factor[size]);
            size /= smallest_prime_factor[size];
        }
        return prime_factors;
    }
};

class DisjointSet {
    std::vector<int> parent;
public:
    DisjointSet(int len) {
        parent.resize(len);
        for (int i = 0; i < len; i++) parent[i] = i;
    }
    int Find(int node_x) {
        if (node_x == parent[node_x]) return node_x;
        return parent[node_x] = Find(parent[node_x]); 
    }
    void Union(int node_u, int node_v) {
        int parent_node_u = Find(node_u);
        int parent_node_v = Find(node_v);
        if (parent_node_u != parent_node_v) parent[parent_node_u] = parent_node_v;
    }
};


    bool GcdSort(std::vector<int>& nums) {
        if (nums.size() < 1 || nums.size() > 30000) {
        throw std::invalid_argument("Length of nums should be between 1 and 30000 inclusive.");
    }

 
    for (int num : nums) {
        if (num < 2 || num > 100000) {
            throw std::invalid_argument("Each element in nums should be between 2 and 100000 inclusive.");
        }
    }
        int len = nums.size();
        int max_num = *std::max_element(nums.begin(), nums.end());
        PrimeFactorization prime_factor_arr(max_num + 1);

        DisjointSet union_find(max_num + 1);
        for (int element_1 : nums)
            for (int element_2 : prime_factor_arr.GetPrimeFactors(element_1))
                union_find.Union(element_1, element_2);

        std::vector<int> sorted_arr(nums);
        std::sort(sorted_arr.begin(), sorted_arr.end());
        for (int i = 0; i < len; ++i)
            if (union_find.Find(nums[i]) != union_find.Find(sorted_arr[i]))
                return false;
        return true;
    }



int main(){

// TEST
std::vector<int> nums_1 = {4,6,15,35};
bool expected_1 = true;
bool result_1 = GcdSort(nums_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::vector<int> nums_2 = {20,50,9,63};
bool expected_2 = false;
bool result_2 = GcdSort(nums_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::vector<int> nums_3 = {2,3,6,7,4,12,21,39};
bool expected_3 = true;
bool result_3 = GcdSort(nums_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::vector<int> nums_4 = {2,3,5,7};
bool expected_4 = true;
bool result_4 = GcdSort(nums_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::vector<int> nums_5 = {13, 17, 19, 23};
bool expected_5 = true;
bool result_5 = GcdSort(nums_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::vector<int> nums_6 = {2, 4, 6, 8, 10};
bool expected_6 = true;
bool result_6 = GcdSort(nums_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
std::vector<int> nums_7 = {3, 6, 9, 12};
bool expected_7 = true;
bool result_7 = GcdSort(nums_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::vector<int> nums_8 = {11, 13, 17, 19};
bool expected_8 = true;
bool result_8 = GcdSort(nums_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::vector<int> nums_9 = {5, 25, 125, 625};
bool expected_9 = true;
bool result_9 = GcdSort(nums_9);
assert(result_9 == expected_9);
// TEST_END

// TEST
std::vector<int> nums_10 = {};

try {
    GcdSort(nums_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

// TEST_END

// TEST
std::vector<int> nums_11 = {1000000009};

try {
    GcdSort(nums_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

// TEST_END

// TEST
std::vector<int> nums_12 = {-999};

try {
    GcdSort(nums_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

// TEST_END
  
// TEST
std::vector<int> nums_13(1000000, 1);

try {
    GcdSort(nums_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

// TEST_END


  return 0;
}
