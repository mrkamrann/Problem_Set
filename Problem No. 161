/*
Link : https://codeforces.com/contest/1473/problem/F

You are given an integer num_nodes and two sequences node_values and node_capacities.

Let's call a set of integers S such that S⊆{1,2,3,…,num_nodes} strange, if, for every element i of S, the following condition is met: for every j∈[1,i−1], 
if node_values[j] divides node_values[i], then j is also included in S. An empty set is always strange.

The cost of the set S is ∑i∈S node_capacities[i]. You have to calculate the maximum possible cost of a strange set.

Return one number — the maximum cost of a strange set.

Create a C++ Function FindMaxFlow that will return a long long denoting the maximum cost of a strange set.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

A vector<int> node_values
A vector<int> node_capacities

Input Constraints:

The value of num_nodes should be at least 1 and at most 3000 inclusive.
Both node_values and node_capacities should be of size num_nodes.
Each value of node_values[i] should be at least 1 and at most 100 inclusive.
Each value of node_capacities[i] should be at least -10^5 and at most 10^5 inclusive.

*/

#include <iostream>
#include <vector>
#include <queue>
#include <stdexcept>
#include <cassert>

void AddEdge(int source, int destination, int capacity, int& edge_index, std::vector<long long>& capacities, std::vector<std::vector<std::pair<int, int>>>& adjacency_list) {
    edge_index++;
    capacities[edge_index * 2] = capacity;
    adjacency_list[source].push_back({destination, edge_index + edge_index});
    adjacency_list[destination].push_back({source, edge_index + edge_index + 1});
}

long long DepthFirstSearch(int node, long long flow, int end, std::vector<long long>& capacities, std::vector<std::vector<std::pair<int, int>>>& adjacency_list, std::vector<int>& depths) {
    if (node == end) {
        return flow;
    }
    long long total_flow = 0, partial_flow = 0;
    for (size_t i = 0; i < adjacency_list[node].size(); i++) {
        int neighbor = adjacency_list[node][i].first;
        int edge = adjacency_list[node][i].second;
        if (!capacities[edge] || depths[neighbor] != depths[node] + 1) {
            continue;
        }
        partial_flow = DepthFirstSearch(neighbor, std::min(flow, capacities[edge]), end, capacities, adjacency_list, depths);
        capacities[edge] -= partial_flow;
        capacities[edge ^ 1] += partial_flow;
        flow -= partial_flow;
        total_flow += partial_flow;
    }
    if (!total_flow) {
        depths[node] = 0;
    }
    return total_flow;
}

bool BreadthFirstSearch(int start, int end, int num_nodes, std::vector<int>& depths, std::vector<long long>& capacities, std::vector<std::vector<std::pair<int, int>>>& adjacency_list) {
    std::fill(depths.begin(), depths.end(), 0);
    std::queue<int> queue;
    queue.push(start);
    depths[start] = 1;
    while (!queue.empty()) {
        int node = queue.front();
        queue.pop();
        for (size_t i = 0; i < adjacency_list[node].size(); i++) {
            int neighbor = adjacency_list[node][i].first;
            int edge = adjacency_list[node][i].second;
            if (!capacities[edge] || depths[neighbor]) {
                continue;
            }
            queue.push(neighbor);
            depths[neighbor] = depths[node] + 1;
        }
    }
    return depths[end];
}

long long FindMaxFlow(const std::vector<int>& node_values, const std::vector<int>& node_capacities) {

    int num_nodes = node_values.size();

    if (num_nodes < 1 || num_nodes > 3000) {
        throw std::invalid_argument("Invalid number of nodes");
    }

     if (num_nodes != node_capacities.size()) {

        throw std::invalid_argument("Invalid size of node_capacities");
    }

    for (int value : node_values) {
        if (value < 1 || value > 100) {
            throw std::invalid_argument("Invalid node value");
        }
    }
    for (int capacity : node_capacities) {
        if (capacity < -100000 || capacity > 100000) {
            throw std::invalid_argument("Invalid node capacity");
        }
    }

    int start = num_nodes;
    int end = num_nodes + 1;
    int edge_index = 0;
    std::vector<std::vector<std::pair<int, int>>> adjacency_list(num_nodes + 2);
    std::vector<long long> capacities(600500, 0);
    std::vector<int> depths(num_nodes + 2, 0), last_node(101, -1);
    long long result = 0;

    for (int i = 0; i < num_nodes; i++) {
        if (node_capacities[i] > 0) {
            AddEdge(start, i, node_capacities[i], edge_index, capacities, adjacency_list);
            result += node_capacities[i];
        } else {
            AddEdge(i, end, -node_capacities[i], edge_index, capacities, adjacency_list);
        }
        for (int j = 1; j <= 100; j++) {
            if (!(node_values[i] % j) && last_node[j] != -1) {
                AddEdge(i, last_node[j], 1000000000, edge_index, capacities, adjacency_list);
            }
        }
        last_node[node_values[i]] = i;
    }

    while (BreadthFirstSearch(start, end, num_nodes, depths, capacities, adjacency_list)) {
        result -= DepthFirstSearch(start, 1000000000000000000LL, end, capacities, adjacency_list, depths);
    }

    return result;
}

#include <iostream>
#include <vector>
#include <queue>
#include <stdexcept>
#include <cassert>

int main() {
  
  //TEST
std::vector<int> node_values_1 = {1, 2, 3};
std::vector<int> node_capacities_1 = {10, 20, 30};
long long expected_1 = 60;
long long result_1 = FindMaxFlow(node_values_1, node_capacities_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> node_values_2 = {1};
std::vector<int> node_capacities_2 = {100};
long long expected_2 = 100;
long long result_2 = FindMaxFlow(node_values_2, node_capacities_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> node_values_3 = {5, 10, 15, 20};
std::vector<int> node_capacities_3 = {1, 2, 3, 4};
long long expected_3 = 10;
long long result_3 = FindMaxFlow(node_values_3, node_capacities_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> node_values_4 = {100, 100, 100};
std::vector<int> node_capacities_4 = {100, 100, 100};
long long expected_4 = 300;
long long result_4 = FindMaxFlow(node_values_4, node_capacities_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> node_values_5 = {1, 1, 1};
std::vector<int> node_capacities_5 = {-100000, 0, 100000};
long long expected_5 = 0;
long long result_5 = FindMaxFlow(node_values_5, node_capacities_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> node_values_6 = {10, 20, 30, 40};
std::vector<int> node_capacities_6 = {5, -5, 15, 10};
long long expected_6 = 25;
long long result_6 = FindMaxFlow(node_values_6, node_capacities_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> node_values_7 = {10, 10, 10, 10};
std::vector<int> node_capacities_7 = {10, 10, 10, 10};
long long expected_7 = 40;
long long result_7 = FindMaxFlow(node_values_7, node_capacities_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> node_values_8 = {100, 99, 98, 97};
std::vector<int> node_capacities_8 = {1, 2, 3, 4};
long long expected_8 = 10;
long long result_8 = FindMaxFlow(node_values_8, node_capacities_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> node_values_9 = {50, 50, 50, 50, 50};
std::vector<int> node_capacities_9 = {100, 200, 300, 400, 500};
long long expected_9 = 1500;
long long result_9 = FindMaxFlow(node_values_9, node_capacities_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<int> node_values_10 = {};
std::vector<int> node_capacities_10 = {};
try {
    FindMaxFlow(node_values_10, node_capacities_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_11 = {1, 2, 3};
std::vector<int> node_capacities_11 = {10, 20};
try {
    FindMaxFlow(node_values_11, node_capacities_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_12 = {1, 2};
std::vector<int> node_capacities_12 = {10, 20, 30};
try {
    FindMaxFlow(node_values_12, node_capacities_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_13 = {0};
std::vector<int> node_capacities_13 = {10};
try {
    FindMaxFlow(node_values_13, node_capacities_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_14 = {-1};
std::vector<int> node_capacities_14 = {10};
try {
    FindMaxFlow(node_values_14, node_capacities_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_15 = {1, 2, 3};
std::vector<int> node_capacities_15 = {10, 20, 300000};
try {
    FindMaxFlow(node_values_15, node_capacities_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_16 = {1, 2, 101};
std::vector<int> node_capacities_16 = {10, 20, 30};
try {
    FindMaxFlow(node_values_16, node_capacities_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_17 = {1};
std::vector<int> node_capacities_17 = {-1000001};
try {
    FindMaxFlow(node_values_17, node_capacities_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> node_values_18 = {1, 2, 3, 4, 5};
std::vector<int> node_capacities_18 = {10, 20, 30, 40, 500000};
try {
    FindMaxFlow(node_values_18, node_capacities_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
    return 0;
}

