/*
Link: https://codeforces.com/contest/364/problem/D

Julie offered her sister Jane  find the gcd of some set of numbers denoted by a vector values of length len.

Gcd is a positive integer g_val, such that all number from the set are evenly divisible by g_val and there isn't such h_val (h_val > g_val), that all numbers 
of the set are evenly divisible by h_val.

Unfortunately Jane couldn't cope with the task and Julie offered her to find the ghd of the same subset of numbers.

Ghd is a positive integer g_val, such that at least half of numbers from the set are evenly divisible by g_val and there isn't such h_val (h_val > g_val) 
that at least half of the numbers from the set are evenly divisible by h_val.

Your task is to return the Ghd of the given vector values.

Create a C++ Function FindGhd that will return a long long denoting Ghd of the given vector values.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type:

vector<long long> denoting values

Input Constraints:

The length of values(len) should be at least 1 and at most 10^5 inclusive.
Each value of values[i] should be in the range [1, 10^12] inclusive.

*/


#include <stdexcept>
#include <vector>
#include <iostream>
#include <algorithm>
#include <functional>
#include <numeric>
#include <random>
#include <ctime>


long long FindGhd(std::vector<long long>& values) {
  
    int len = values.size();
    if(len < 1 || len > 100000){
        throw std::invalid_argument("The length of values should be at least 1 and at most 1e5.");
    }
    for(int i = 0; i < len; ++i) {
        if(values[i] > 1e12 || values[i] < 1) {
            throw std::invalid_argument("The value of values[i] should be at least 1 and at most 1e12.");
        }
    }

    long long maximum_gcd = 1;

    std::function<void(long long)> CalculateGcd = [&](long long index) {
        std::vector<long long> gcd_values(len);
        for (long long i = 0; i < len; ++i) {
            gcd_values[i] = std::gcd(values[i], values[index]);
        }
        std::sort(gcd_values.begin(), gcd_values.end());

        std::vector<long long> unique_gcds;
        std::vector<long long> gcd_counts;
        for (int i = 0; i < len; ++i) {
            if (i == 0 || gcd_values[i] != gcd_values[i - 1]) {
                unique_gcds.push_back(gcd_values[i]);
                gcd_counts.push_back(1);
            } else {
                gcd_counts.back()++;
            }
        }

        for (size_t i = 0; i < unique_gcds.size(); ++i) {
            long long count = gcd_counts[i];
            for (size_t j = i + 1; j < unique_gcds.size(); ++j) {
                if (unique_gcds[j] % unique_gcds[i] == 0) {
                    count += gcd_counts[j];
                }
            }
            if (count * 2 >= len) {
                maximum_gcd = std::max(maximum_gcd, unique_gcds[i]);
            }
        }
    };

    std::srand((unsigned)std::time(nullptr));
    std::random_shuffle(values.begin(), values.end());
    for (int i = 0; i < 13; ++i) {
        CalculateGcd(std::rand() % len);
    }

    return maximum_gcd;
}

#include <cassert>

int main() {
  
// TEST
std::vector<long long> values_1 = {10, 15, 25};
long long expected_1 = 5;
long long result_1 = FindGhd(values_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::vector<long long> values_2 = {20, 40, 60, 80};
long long expected_2 = 40;
long long result_2 = FindGhd(values_2);
 assert(result_2 == expected_2);
// TEST_END

// TEST
std::vector<long long> values_3 = {123456789, 987654321};
long long expected_3 = 987654321;
long long result_3 = FindGhd(values_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::vector<long long> values_4 = {1, 3, 9, 27};
long long expected_4 = 9;
long long result_4 = FindGhd(values_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::vector<long long> values_5 = {7, 14, 28, 56, 112};
long long expected_5 = 28;
long long result_5 = FindGhd(values_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::vector<long long> values_6 = {1000000000000, 500000000000, 250000000000};
long long expected_6 = 500000000000;
long long result_6 = FindGhd(values_6);
 assert(result_6 == expected_6);
// TEST_END

// TEST
std::vector<long long> values_7 = {100, 200, 300, 400, 500, 600};
long long expected_7 = 200;
long long result_7 = FindGhd(values_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::vector<long long> values_8 = {6,2,3,4,5,6};
long long expected_8 = 3;
long long result_8 = FindGhd(values_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::vector<long long> values_9 = {333333333333, 666666666666, 999999999999};
long long expected_9 = 333333333333;
long long result_9 = FindGhd(values_9);
assert(result_9 == expected_9);
// TEST_END

// TEST
try {
    std::vector<long long> values_10 = {}; 
    long long result_10 = FindGhd(values_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_11(100001, 1000000000000); 
    long long result_11 = FindGhd(values_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_12 = {0, 1, 2}; 
    long long result_12 = FindGhd(values_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_13 = {10, 20, -30}; 
    long long result_13 = FindGhd(values_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_14 = {1000000000001, 2000000000000};
    long long result_14 = FindGhd(values_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_15 = {-1, -2, -3}; 
    long long result_15 = FindGhd(values_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_16(0, 1); 
    long long result_16 = FindGhd(values_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_17 = {10, -10}; 
    long long result_17 = FindGhd(values_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
try {
    std::vector<long long> values_18 = {0}; 
    long long result_18 = FindGhd(values_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END


    return 0;
}
