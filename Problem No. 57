/*

Link: https://leetcode.com/problems/maximize-score-after-n-operations/description/ 

Jimmy was a young programmer, always eager to solve new challenges. One day, he came across a fascinating problem involving a vector of positive integers.

Jimmy was given nums, a vector of positive integers of size 2 * len. He had to perform len operations on this vector.

In the ith operation (1-indexed), Jimmy would:

Choose two elements, num_1 and num_2.
Receive a score of i * gcd(num_1, num_2).
Remove num1 and num2 from nums.
His goal was to return the maximum score he could receive after performing len operations.

The function gcd(num_1, num_2) is the greatest common divisor of num_1 and num_2.

Create a C++ Function MaxScore that will return an integer denoting the maximum score he could receive after performing len operations.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type:

A vector<int> denoting nums.

Input Constraints:

The length of nums is 2 * len.
1 <= len <= 7.
Each element in nums should be between 1 and 10^6 inclusive.

*/

#include <vector>
#include <map>
#include <stdexcept>
#include <cassert>
#include <algorithm>


    bool IsBitSet(int& number, int bit_index) {
        return (number & (1 << bit_index)) != 0;
    }

    void SetBit(int& number, int bit_index) {
        number = number | (1 << bit_index);
    }

    int Solve(std::vector<int>& nums, std::map<int, int>& memo, int visited, int operation) {
        if (memo.count(visited)) {
            return memo[visited];
        }
        
        int max_score = 0;
        for (int i = 0; i < nums.size() - 1; i++) {
            if (IsBitSet(visited, i)) continue;
            for (int j = i + 1; j < nums.size(); j++) {
                if (IsBitSet(visited, j)) continue;
                
                int new_visited = visited;
                SetBit(new_visited, i);
                SetBit(new_visited, j);
                
                int current_score = operation * std::__gcd(nums[i], nums[j]);
                int next_max_score = Solve(nums, memo, new_visited, operation + 1);
                int total_score = current_score + next_max_score;
                max_score = std::max(max_score, total_score);
            }
        }
        return memo[visited] = max_score;
    }

    int MaxScore(std::vector<int>& nums) {
        if (nums.size() < 2 || nums.size() > 14) {
            throw std::invalid_argument("The length of nums must be 2 * len, where 1 <= len <= 7.");
        }
        for (int value : nums) {
            if (value < 1 || value > 1000000) {
                throw std::invalid_argument("Each element in nums should be between 1 and 10^6 inclusive.");
            }
        }

        int visited = 0;
        std::map<int, int> memo;
        int answer = Solve(nums, memo, visited, 1);
        return answer;
    }



int main(){

    //TEST
    std::vector<int> nums_1 = {3,1,2};
    int expected_1 = 1; 
    int result_1 = MaxScore(nums_1);
    assert(result_1 == expected_1);
    //TEST_END
  
    //TEST
    std::vector<int> nums_2 = {4,6,2,1,3};
    int expected_2 = 8; 
    int result_2 = MaxScore(nums_2);
    assert(result_2 == expected_2);
    //TEST_END

    //TEST
    std::vector<int> nums_3 = {4,1};
    int expected_3 = 1; 
    int result_3 = MaxScore(nums_3);
    assert(result_3 == expected_3);
    //TEST_END

    //TEST
    std::vector<int> nums_4 = {1,9};
    int expected_4 = 1; 
    int result_4 = MaxScore(nums_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    std::vector<int> nums_5 = {5,9,4,3,1,2};
    int expected_5 = 14;
    int result_5 = MaxScore(nums_5);
    assert(result_5 == expected_5);
    //TEST_END

    //TEST
    std::vector<int> nums_6 = {3,6,8,7,5,4,2,1,8};
    int expected_6 = 46; 
    int result_6 = MaxScore(nums_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    std::vector<int> nums_7 = {1,2,3,5};
    int expected_7 = 3; 
    int result_7 = MaxScore(nums_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    std::vector<int> nums_8 = {3,11,2,4,1};
    int expected_8 = 5; 
    int result_8 = MaxScore(nums_8);
    assert(result_8 == expected_8);
    //TEST_END

    //TEST
    std::vector<int> nums_9 = {3,6,69,4,2,1,5};
    int expected_9 = 14; 
    int result_9 = MaxScore(nums_9);
    assert(result_9 == expected_9);
    //TEST_END

    //TEST
    std::vector<int> nums_10 = {-5};
    try{
        MaxScore(nums_10);
        assert(false);
    }
    catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_11 = {4, 4, 2,1,2,3,4,5,6,7,8,9,10, 11, 12,15,8,9};
    try {
        MaxScore(nums_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_12 = {-9,-8};
    try {
        MaxScore(nums_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_13 = {};
    try {
        MaxScore(nums_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_14 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15};
    try {
        MaxScore(nums_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_15 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, -1};
    try {
        MaxScore(nums_15);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_16 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 100000000, 11, 12, 14};
    try {
        MaxScore(nums_16);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_17 = {1};
    try {
        MaxScore(nums_17);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_18 = {0, 1, 2, -1};
    try {
        MaxScore(nums_18);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_19 = {3, 2, 0};
    try {
        MaxScore(nums_19);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_20 = {0, 1, 2, 4};
    try {
        MaxScore(nums_20);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_21 = {0, 2};
    try {
        MaxScore(nums_21);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_22 = {-1, 0};
    try {
        MaxScore(nums_22);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_23 = {0, 1, 2, 3, 4, -5, 6, 7, 8, 9, 10, 11, 12};
    try {
        MaxScore(nums_23);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<int> nums_24(1000, 22);
    try {
        MaxScore(nums_24);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    return 0;
}


