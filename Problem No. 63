/*
Link : https://leetcode.com/problems/number-of-squareful-arrays/description/

Jimmy was a young programmer, always eager to solve new challenges. One day, he encountered an intriguing problem involving permutations of numbers, and he decided to take on the challenge.

Jimmy was given an integer vector nums. His task was to determine how many different permutations of nums are "squareful." A vector is considered squareful if the sum of every pair of adjacent elements 
in the permutation is a perfect square.

For instance, if nums = [1, 17, 8], a valid squareful permutation would be [1, 8, 17] because 1 + 8 = 9 (which is a perfect square) and 8 + 17 = 25 (which is also a perfect square).

However, not every permutation meets this criterion, and Jimmy's goal was to find out exactly how many permutations do.

Two permutations perm1 and perm2 are considered different if there is at least one index i such that perm1[i] != perm2[i].

Create a C++ class Solution that will contain a function NumSquarefulPerms that will return an integer denoting he number of permutations of nums that are squareful.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type:

A vector<int> denoting nums.

Input Constraints:

The length of nums should be between 1 and 12 inclusive.
Each element in nums should be between 0 and 10^9 inclusive.

*/


#include <vector>
#include <cmath>
#include <cstring>
#include <map>
#include <stdexcept>
#include <cassert>

class Solution {
public:
  
    int dp_arr[(1 << 12) + 7][14];
    int num_count;
    std::vector<int> arr;

    int Solve(int mask, int last) {
        if (mask == (1 << num_count) - 1) {
            return 1;
        }
        if (dp_arr[mask][last] != -1) {
            return dp_arr[mask][last];
        }
        int answer = 0;
        if (last == num_count) {
            for (int i = 0; i < num_count; i++) {
                answer += Solve(mask | (1 << i), i);
            }
        } else {
            for (int i = 0; i < num_count; i++) {
                if (!(mask & (1 << i))) {
                    int value = arr[i] + arr[last];
                    int square_root = std::sqrt(value);
                    if (square_root * square_root == value) {
                        answer += Solve(mask | (1 << i), i);
                    }
                }
            }
        }
        return dp_arr[mask][last] = answer;
    }

    int NumSquarefulPerms(std::vector<int>& nums) {
        if (nums.size() < 1 || nums.size() > 12) {
            throw std::invalid_argument("Invalid input: Length of nums should be between 1 and 12 inclusive.");
        }
        for (int num : nums) {
            if (num < 0 || num > 1000000000) {
                throw std::invalid_argument("Invalid input: Each element in nums should be between 0 and 10^9 inclusive.");
            }
        }

        std::memset(dp_arr, -1, sizeof(dp_arr));
        arr = nums;
        num_count = static_cast<int>(arr.size());
        std::map<int, int> count_map;
        for (int i = 0; i < num_count; i++) {
            count_map[arr[i]]++;
        }
        std::vector<long long> factorial(14, 0);
        factorial[0] = 1;
        for (int i = 1; i < 14; i++) {
            factorial[i] = factorial[i - 1] * i;
        }
        long long answer = Solve(0, num_count);
        for (auto& entry : count_map) {
            answer /= factorial[entry.second];
        }
        return answer;
    }
};


int main(){
  
Solution obj;
  
//TEST

std::vector<int> nums_1 = {1, 17, 8};
int expected_1 = 2;
int result_1 = obj.NumSquarefulPerms(nums_1);
assert(result_1 == expected_1);
//TEST_END

//TEST

std::vector<int> nums_2 = {2, 2, 2};
int expected_2 = 1;
int result_2 = obj.NumSquarefulPerms(nums_2);
assert(result_2 == expected_2);
//TEST_END

//TEST

std::vector<int> nums_3 = {4, 5, 6, 10};
int expected_3 = 0; 
int result_3 = obj.NumSquarefulPerms(nums_3);
assert(result_3 == expected_3);
//TEST_END

//TEST

std::vector<int> nums_4 = {2,2,2};
int expected_4 = 1;
int result_4 = obj.NumSquarefulPerms(nums_4);
assert(result_4 == expected_4);
//TEST_END

//TEST

std::vector<int> nums_5 = {3,6,10,6,19};
int expected_5 = 6; 
int result_5 = obj.NumSquarefulPerms(nums_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

std::vector<int> nums_6 = {0, 0, 25, 16, 0, 4,12};
int expected_6 = 12;
int result_6 = obj.NumSquarefulPerms(nums_6);
assert(result_6 == expected_6);
//TEST_END

//TEST

std::vector<int> nums_7 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
int expected_7 = 0; 
int result_7 = obj.NumSquarefulPerms(nums_7);
assert(result_7 == expected_7);
//TEST_END

//TEST

std::vector<int> nums_8 = {2, 7, 14, 15};
int expected_8 = 0; 
int result_8 = obj.NumSquarefulPerms(nums_8);
assert(result_8 == expected_8);
//TEST_END

//TEST

std::vector<int> nums_9 = {0, 1, 4, 9, 16, 25};
int expected_9 = 0; 
int result_9 = obj.NumSquarefulPerms(nums_9);
assert(result_9 == expected_9);
//TEST_END


//TEST

std::vector<int> nums_10 = {};
try {
    obj.NumSquarefulPerms(nums_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::vector<int> nums_11 = {1, -1};
try {
    obj.NumSquarefulPerms(nums_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> nums_12 = {1, 1000000001};
try {
    obj.NumSquarefulPerms(nums_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> nums_13 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
try {
    obj.NumSquarefulPerms(nums_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  return 0;
}
