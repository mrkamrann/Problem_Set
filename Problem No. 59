/*
Link: https://leetcode.com/problems/maximum-profit-in-job-scheduling/description/

Jimmy was a young programmer, always eager to solve new challenges. One day, he came across an interesting problem involving job scheduling.

Jimmy was given job_count jobs, where every job is scheduled to be done from start_time[i] to end_time[i], obtaining a profit of profit[i].

He was provided with three vectors: start_time, end_time, and profit. His task was to return the maximum profit he could achieve such that no two jobs in the 
subset have overlapping time ranges.

If he chose a job that ends at time X, he would be able to start another job that starts at time X.

Create a C++ Function JobScheduling that will return an integer denoting the maximum profit. 

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type:

A vector<int> denoting start_time.
A vector<int> denoting end_time.
A vector<int> denoting profit.

Input Constraints:

The length of start_time, end_time, and profit should all be equal, and between 1 and 5 * 10^4 inclusive.
Each element in start_time should be less than each corresponding element in end_time, and both should be between 1 and 10^9 inclusive.
Each element in profit should be between 1 and 10^4 inclusive.

*/


#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>
#include <cmath>


    int JobScheduling(std::vector<int>& start_time, std::vector<int>& end_time, std::vector<int>& profit) {
        
        if (start_time.size() != profit.size()  || start_time.size() != end_time.size() || end_time.size() != profit.size() || profit.size() > 50000 || profit.size() < 1) {
    throw std::invalid_argument("Invalid input: Sizes of start_time, end_time, and profit must be equal and between 1 and 50000 inclusive.");
}

for (int i = 0; i < start_time.size(); ++i) {
    if (start_time[i] >= end_time[i] || start_time[i] < 1 || end_time[i] > 1000000000 || end_time[i] < 1 ||start_time[i] > 1000000000) {
        throw std::invalid_argument("Invalid input: Each element in start_time should be less than its corresponding element in end_time, and both should be between 1 and 1000000000 inclusive.");
    }
}

for (int i = 0; i < profit.size(); ++i) {
    if (profit[i] < 1 || profit[i] > 10000) {
        throw std::invalid_argument("Invalid input: Each element in profit should be between 1 and 10000 inclusive.");
    }
}

        int len = start_time.size();
        
        std::vector<std::vector<int>> arr(len);
        
        for (int i = 0; i < len; i++)
        {
            int start = start_time[i];
            int end = end_time[i];
            int profitt = profit[i];
            arr[i] = {end, start, profitt};
        }
        
        std::sort(arr.begin(), arr.end());
        
        std::vector<int> dp_arr(len, 0);
        
        dp_arr[0] = arr[0][2];
        
        for (int i = 1; i < len; i++)
        {
            int include = arr[i][2];
            
            int low = 0;
            int high = len - 1;
            int last_idx = -1;
            
            while (low <= high)
            {
                int mid = low + (high - low) / 2;
                
                if (arr[mid][0] <= arr[i][1])
                {
                    last_idx = mid;
                    low = mid + 1;
                } 
                else {
                    high = mid - 1;
                }
            }
            
            if (last_idx != -1)
            {
                include += dp_arr[last_idx];
            }
            
            int exclude = dp_arr[i - 1];
            
            dp_arr[i] = std::max(include, exclude);
        }
        
        return dp_arr[len - 1];
    }


int main(){
  
//TEST
std::vector<int> start_time_1 = {1, 2, 3, 4, 6};
std::vector<int> end_time_1 = {3, 5, 10, 6, 9};
std::vector<int> profit_1 = {20, 20, 100, 70, 60};
int expected_1 = 150;
int result_1 = JobScheduling(start_time_1, end_time_1, profit_1);
assert(result_1 == expected_1);

//TEST_END

//TEST

std::vector<int> start_time_2 = {1, 2, 3, 3};
std::vector<int> end_time_2 = {3, 4, 5, 6};
std::vector<int> profit_2 = {50, 10, 40, 70};
int expected_2 = 120;
int result_2 = JobScheduling(start_time_2, end_time_2, profit_2);
assert(result_2 == expected_2);

//TEST_END

//TEST

std::vector<int> start_time_3 = {1, 2, 3, 4, 6};
std::vector<int> end_time_3 = {3, 5, 6, 6, 9};
std::vector<int> profit_3 = {20, 20, 100, 70, 60};
int expected_3 = 180;
int result_3 = JobScheduling(start_time_3, end_time_3, profit_3);
assert(result_3 == expected_3);

//TEST_END

//TEST

std::vector<int> start_time_4 = {1, 3, 5, 6, 7};
std::vector<int> end_time_4 = {2, 5, 6, 7, 8};
std::vector<int> profit_4 = {50, 20, 20, 100, 200};
int expected_4 = 390;
int result_4 = JobScheduling(start_time_4, end_time_4, profit_4);
assert(result_4 == expected_4);

//TEST_END

//TEST

std::vector<int> start_time_5 = {1};
std::vector<int> end_time_5 = {2};
std::vector<int> profit_5 = {50};
int expected_5 = 50;
int result_5 = JobScheduling(start_time_5, end_time_5, profit_5);
assert(result_5 == expected_5);

//TEST_END

//TEST

std::vector<int> start_time_6 = {1, 3, 5, 7, 9};
std::vector<int> end_time_6 = {2, 4, 6, 8, 10};
std::vector<int> profit_6 = {5, 10, 20, 30, 40};
int expected_6 = 105;
int result_6 = JobScheduling(start_time_6, end_time_6, profit_6);
assert(result_6 == expected_6);

//TEST_END

//TEST

std::vector<int> start_time_7 = {1, 2, 3};
std::vector<int> end_time_7 = {4, 5, 6};
std::vector<int> profit_7 = {10, 20, 30};
int expected_7 = 30;
int result_7 = JobScheduling(start_time_7, end_time_7, profit_7);
assert(result_7 == expected_7);

//TEST_END

//TEST

std::vector<int> start_time_8 = {1, 3, 6};
std::vector<int> end_time_8 = {2, 5, 7};
std::vector<int> profit_8 = {50, 100, 200};
int expected_8 = 350;
int result_8 = JobScheduling(start_time_8, end_time_8, profit_8);
assert(result_8 == expected_8);

//TEST_END

//TEST

std::vector<int> start_time_9 = {1, 5, 6, 9};
std::vector<int> end_time_9 = {4, 6, 7, 10};
std::vector<int> profit_9 = {10, 40, 50, 60};
int expected_9 = 160;
int result_9 = JobScheduling(start_time_9, end_time_9, profit_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
std::vector<int> start_time_10 = {1, 2, 3};
std::vector<int> end_time_10 = {4, 5};
std::vector<int> profit_10 = {10, 20, 30};
try {
    JobScheduling(start_time_10, end_time_10, profit_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> start_time_11 = {4, 3, 5};
std::vector<int> end_time_11 = {2, 6, 6};
std::vector<int> profit_11 = {10, 20, 30};
try {
    JobScheduling(start_time_11, end_time_11, profit_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> start_time_12 = {-1, 2, 3};
std::vector<int> end_time_12 = {4, 5, 6};
std::vector<int> profit_12 = {10, 20, 30};
try {
    JobScheduling(start_time_12, end_time_12, profit_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> start_time_13 = {1, 2, 3};
std::vector<int> end_time_13 = {4, 1000000001, 6};
std::vector<int> profit_13 = {10, 20, 30};
try {
    JobScheduling(start_time_13, end_time_13, profit_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> start_time_14 = {1, 2, 3};
std::vector<int> end_time_14 = {4, 5, 6};
std::vector<int> profit_14 = {10, -20, 30};
try {
    JobScheduling(start_time_14, end_time_14, profit_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> start_time_15 = {};
std::vector<int> end_time_15 = {};
std::vector<int> profit_15 = {};
try {
    JobScheduling(start_time_15, end_time_15, profit_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
  
//TEST

std::vector<int> start_time_16(1e6,1);
std::vector<int> end_time_16(1e6,1);
std::vector<int> profit_16(1e6,1);
try {
    JobScheduling(start_time_16, end_time_16, profit_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

  return 0;
}
