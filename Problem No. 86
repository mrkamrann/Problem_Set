/*
Link: https://leetcode.com/problems/find-minimum-diameter-after-merging-two-trees/

Julie is given two undirected trees with len_n and len_m nodes, numbered from 0 to len_n - 1 and from 0 to len_m - 1, respectively. 
Julie is provided with two 2D integer vectors edges_1 and edges_2 of lengths len_n - 1 and len_m - 1, respectively, where edges_1[i] = [a_i, b_i] indicates 
that there is an edge between nodes a_i and b_i in the first tree and edges_2[i] = [u_i, v_i] indicates that there is an edge between nodes u_i and v_i in the 
second tree.

Julie must connect one node from the first tree with another node from the second tree with an edge.

Return the minimum possible diameter of the resulting tree.

The diameter of a tree is the length of the longest path between any two nodes in the tree.

Create a C++ Function MinimumDiameterAfterMerge that will return an integer denoting the minimum possible diameter of the resulting tree.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

A vector<vector<int>> denoting edges_1
A vector<vector<int>> denoting edges_2

Input Constraints

The values of len_n and len_m should be in the range [1, 100000] inclusive.
The length of edges_1 should be exactly len_n - 1.
The length of edges_2 should be exactly len_m - 1.
Each value of edges_1[i][0] and edges_1[i][1] should be in the range [0, len_n - 1] inclusive.
Each value of edges_2[i][0] and edges_2[i][1] should be in the range [0, len_m - 1] inclusive.


*/

#include <vector>
#include <stdexcept>
#include <algorithm>
#include <queue>
#include <cassert>

    void DepthFirstSearch(int node, int parent, std::vector<int> &node_depth, std::vector<std::vector<int>> &adjacency_list) {
        for (std::vector<int>::iterator neighbor_itr = adjacency_list[node].begin(); neighbor_itr != adjacency_list[node].end(); ++neighbor_itr) {
            if (*neighbor_itr == parent) {
                continue;
            }
            node_depth[*neighbor_itr] = node_depth[node] + 1;
            DepthFirstSearch(*neighbor_itr, node, node_depth, adjacency_list);
        }
    }

    int CalculateDiameter(std::vector<std::vector<int>> &edges) {
        int number_of_nodes = edges.size() + 1;
        std::vector<std::vector<int>> adjacency_list(number_of_nodes);

        for (std::vector<std::vector<int>>::iterator edge_itr = edges.begin(); edge_itr != edges.end(); ++edge_itr) {
            adjacency_list[(*edge_itr)[0]].push_back((*edge_itr)[1]);
            adjacency_list[(*edge_itr)[1]].push_back((*edge_itr)[0]);
        }

        std::vector<int> node_depth(number_of_nodes, 0);
        DepthFirstSearch(0, -1, node_depth, adjacency_list);

        int farthest_node = 0;
        for (int node_index = 0; node_index < number_of_nodes; ++node_index) {
            if (node_depth[node_index] > node_depth[farthest_node]) {
                farthest_node = node_index;
            }
        }

        std::fill(node_depth.begin(), node_depth.end(), 0);
        DepthFirstSearch(farthest_node, -1, node_depth, adjacency_list);

        return *std::max_element(node_depth.begin(), node_depth.end());
    }

    int CalculateMinHeight(std::vector<std::vector<int>> &edges) {
        int number_of_nodes = edges.size() + 1;
        std::vector<std::vector<int>> adjacency_list(number_of_nodes);
        std::vector<int> node_degree(number_of_nodes, 0);

        for (std::vector<std::vector<int>>::iterator edge_itr = edges.begin(); edge_itr != edges.end(); ++edge_itr) {
            adjacency_list[(*edge_itr)[0]].push_back((*edge_itr)[1]);
            adjacency_list[(*edge_itr)[1]].push_back((*edge_itr)[0]);
            node_degree[(*edge_itr)[0]]++;
            node_degree[(*edge_itr)[1]]++;
        }

        std::queue<int> node_queue;
        for (int node_index = 0; node_index < number_of_nodes; ++node_index) {
            if (node_degree[node_index] == 1) {
                node_queue.push(node_index);
            }
        }

        int steps = 0;
        while (number_of_nodes > 2) {
            int queue_size = node_queue.size();
            number_of_nodes -= queue_size;
            while (queue_size--) {
                int current_node = node_queue.front();
                node_queue.pop();
                for (std::vector<int>::iterator neighbor_itr = adjacency_list[current_node].begin(); neighbor_itr != adjacency_list[current_node].end(); ++neighbor_itr) {
                    node_degree[*neighbor_itr]--;
                    if (node_degree[*neighbor_itr] == 1) {
                        node_queue.push(*neighbor_itr);
                    }
                }
            }
            steps++;
        }

        return number_of_nodes == 2 ? steps + 1 : steps;
    }

    int MinimumDiameterAfterMerge(std::vector<std::vector<int>> &edges_1, std::vector<std::vector<int>> &edges_2) {
       
       int len_n = edges_1.size()+1;
       int len_m = edges_2.size()+1;

        if (len_n < 1 || len_n > 100000) {
        throw std::invalid_argument("The value of len_n should be in the range [1, 100000] inclusive.");
    }
    if (len_m < 1 || len_m > 100000) {
        throw std::invalid_argument("The value of len_m should be in the range [1, 100000] inclusive.");
    }
    if (edges_1.size() != len_n - 1) {
        throw std::invalid_argument("The length of edges_1 should be exactly len_n - 1.");
    }
    if (edges_2.size() != len_m - 1) {
        throw std::invalid_argument("The length of edges_2 should be exactly len_m - 1.");
    }
    for (const std::vector<int>&edge : edges_1) {
        if (edge[0] < 0 || edge[0] >= len_n || edge[1] < 0 || edge[1] >= len_n) {
            throw std::invalid_argument("Each value of edges_1[i][0] and edges_1[i][1] should be in the range [0, len_n - 1] inclusive.");
        }
    }
    for (const std::vector<int>&edge : edges_2) {
        if (edge[0] < 0 || edge[0] >= len_m || edge[1] < 0 || edge[1] >= len_m) {
            throw std::invalid_argument("Each value of edges_2[i][0] and edges_2[i][1] should be in the range [0, len_m - 1] inclusive.");
        }
    }
        int min_height_1 = CalculateMinHeight(edges_1);
        int min_height_2 = CalculateMinHeight(edges_2);
        int diameter_1 = CalculateDiameter(edges_1);
        int diameter_2 = CalculateDiameter(edges_2);

        return std::max({min_height_1 + min_height_2 + 1, diameter_1, diameter_2});
    }

int main(){
  
// TEST 
std::vector<std::vector<int>> edges_1_1 = {{0, 1}, {1, 2}};
std::vector<std::vector<int>> edges_2_1 = {{0, 1}, {1, 2}};
int expected_1 = 3;
int result_1 = MinimumDiameterAfterMerge(edges_1_1, edges_2_1);
assert(result_1 == expected_1);
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_2 = {{0, 1}, {1, 2}, {2, 3}};
std::vector<std::vector<int>> edges_2_2 = {{0, 1}, {1, 2}};
int expected_2 = 4;
int result_2 = MinimumDiameterAfterMerge(edges_1_2, edges_2_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_1_3 = {{0, 1}, {1, 2}, {2, 3}};
std::vector<std::vector<int>> edges_2_3 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
int expected_3 = 5;
int result_3 = MinimumDiameterAfterMerge(edges_1_3, edges_2_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_1_4 = {{0, 1}};
std::vector<std::vector<int>> edges_2_4 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}};
int expected_4 = 5;
int result_4 = MinimumDiameterAfterMerge(edges_1_4, edges_2_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_1_5 = {{0, 1}, {1, 2}};
std::vector<std::vector<int>> edges_2_5 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
int expected_5 = 4;
int result_5 = MinimumDiameterAfterMerge(edges_1_5, edges_2_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_1_6 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_6 = {{0, 1}};
int expected_6 = 4;
int result_6 = MinimumDiameterAfterMerge(edges_1_6, edges_2_6);
assert(result_6 == expected_6);
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_7 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_7 = {{0, 1}, {1, 2}, {2, 3}};
int expected_7 = 5;
int result_7 = MinimumDiameterAfterMerge(edges_1_7, edges_2_7);
assert(result_7 == expected_7);
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_8 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_8 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
int expected_8 = 5;
int result_8 = MinimumDiameterAfterMerge(edges_1_8, edges_2_8);
assert(result_8 == expected_8);
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_9 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}};
std::vector<std::vector<int>> edges_2_9 = {{0, 1}, {1, 2}, {2, 3}};
int expected_9 = 6;
int result_9 = MinimumDiameterAfterMerge(edges_1_9, edges_2_9);
assert(result_9 == expected_9);
// TEST_END

  
// TEST 

std::vector<std::vector<int>> edges_1_10 = {};
std::vector<std::vector<int>> edges_2_10 = {{0, -1}, {1, 2}};
try {
    MinimumDiameterAfterMerge(edges_1_10, edges_2_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 

std::vector<std::vector<int>> edges_1_11 = {{0, 4491}, {1, 2}};
std::vector<std::vector<int>> edges_2_11 = {};
try {
    MinimumDiameterAfterMerge(edges_1_11, edges_2_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_12 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_12 = {{0, 1}, {1, -542}, {2, 3}, {3, -454}, {4, -5}};
try {
    MinimumDiameterAfterMerge(edges_1_12, edges_2_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_13(1e6, std::vector<int>(2,4));
std::vector<std::vector<int>> edges_2_13 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
try {
    MinimumDiameterAfterMerge(edges_1_13, edges_2_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_14 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_14(1e6, std::vector<int>(2,4));
try {
    MinimumDiameterAfterMerge(edges_1_14, edges_2_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_15 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_15 = {{0, 1}, {1, 1000000}, {2, 3}};
try {
    MinimumDiameterAfterMerge(edges_1_15, edges_2_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_16 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_16 = {{0, 1}, {1, -11112}, {2, 3}};
try {
    MinimumDiameterAfterMerge(edges_1_16, edges_2_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<std::vector<int>> edges_1_17 = {{0, 1}, {1, -445782}, {2, 3}, {3, 4}};
std::vector<std::vector<int>> edges_2_17 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
try {
    MinimumDiameterAfterMerge(edges_1_17, edges_2_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  

  return 0;
}
