/*
Link : https://leetcode.com/problems/peaks-in-array/description/ 

Jimmy is working with vectors and has a special interest in identifying peak elements. A peak element in a vector is one that is greater than its neighboring elements.

A peak in an vector arr is an element that is greater than its previous and next element in arr.

Here's what Jimmy is dealing with:

He has an integer vector nums.
He receives a series of queries in a 2D integer vector queries.
Each query can be of two types:

Type 1: queries[i] = [1, left[i], right[i]] - Jimmy needs to count the number of peak elements in the subarray nums[left[i]..right[i]].
Type 2: queries[i] = [2, index[i], value[i]] - Jimmy needs to update the element at position index[i] in nums to the new value value[i].
He needs to return a vector answer containing the results of the queries of the first type in order.

Remember:

The first and the last elements of a vector or a subvector cannot be peaks.


Input Type:

vector<int> denoting nums
vector<vector<int>> denoting queries

Input Constraints:

1.Length of nums should be at least 3 and at most 10^5.
2.Each element in nums should be within the range from 1 to 10^5.
3.The length of queries should be at least 1 and at most 10^5.
4.Each element in queries should consist of exactly 3 integers.
5.For queries[i][0] == 1, queries[i][1] and queries[i][2] should be within the range from 0 to nums.length - 1, and queries[i][1] should be less than or equal to queries[i][2].
6.For queries[i][0] == 2, queries[i][1] should be within the range from 0 to nums.length - 1, and queries[i][2] should be within the range from 1 to 10^5.

*/
