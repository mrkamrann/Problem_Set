/*

Link: https://leetcode.com/problems/minimum-reverse-operations/description/

Julie is given an integer len and an integer position representing a vector vec of length len where all elements are set to 0's, except 
position which is set to 1. She is also given an integer vector restricted_vec containing restricted positions. Julie can perform the following operation on vec:

Reverse a subarray with size sub_len if the single 1 is not set to a position in restricted_vec.

Return an integer vector answer with len results where the ith result is the minimum number of operations needed to bring the single 1 to position i in vec
or -1 if it is impossible.

Create a C++ Function MinReverseOperations that will return a vector<int> denoting the vector answer.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type:

An integer denoting len
An integer denoting position
A vector<int> denoting restricted_vec
An integer denoting sub_len

Input Constraints:

The value of len should be at least 1 and at most 100,000 inclusive.
The value of position should be in the range [0, len - 1] inclusive.
The length of restricted_vec should be at most len - 1 inclusive.
Each value of restricted_vec[i] should be in the range [0, len - 1] inclusive.
The value of sub_len should be in the range [1, len] inclusive.
The value of restricted_vec[i] should not be equal to position.
All values in restricted_vec should be unique.

*/

#include <vector>
#include <queue>
#include <stdexcept>
#include <cassert>


    std::vector<int> MinReverseOperations(int len, int position, std::vector<int>& restricted_vec, int sub_len) {

        if (len < 1 || len > 100000){
           throw std::invalid_argument("The value of len should be at least 1 and at most 100,000 inclusive.");
        }

        if (position < 0 || position >= len){
          throw std::invalid_argument("The value of position should be in the range [0, len - 1] inclusive.");
        } 

        if (restricted_vec.size() > static_cast<std::size_t>(len - 1)){
           throw std::invalid_argument("The length of restricted_vec should be at most len - 1 inclusive.");
        }

        if (sub_len < 1 || sub_len > len){
            throw std::invalid_argument("The value of sub_len should be in the range [1, len] inclusive.");
         }
        
        std::vector<bool> restricted_set(len, false);
        for (std::size_t i = 0; i < restricted_vec.size(); ++i) {

            if (restricted_vec[i] < 0 || restricted_vec[i] >= len) {
                throw std::invalid_argument("Each value of restricted_vec[i] should be in the range [0, len - 1] inclusive.");
            }
            if (restricted_vec[i] == position) {
                throw std::invalid_argument("The value of restricted_vec[i] should not be equal to position.");
            }
            if (restricted_set[restricted_vec[i]]) {
                throw std::invalid_argument("All values in restricted_vec should be unique.");
            }
            restricted_set[restricted_vec[i]] = true;
        }
        
        std::vector<int> result(len, -1);
        result[position] = 0;
        if (sub_len == 1) return result;

        std::vector<bool> visited(len, false);
        std::queue<int> queue;

        visited[position] = true;
        queue.push(position);

        while (!queue.empty()) {
            int current_pos = queue.front();
            queue.pop();

            int start_pos, end_pos, location;

            start_pos = current_pos;
            end_pos = current_pos + sub_len - 1;
            if (end_pos >= len) {
                start_pos -= end_pos - len + 1;
                end_pos = len - 1;
            }

            while (start_pos >= 0 && current_pos - start_pos < end_pos - current_pos) {
                location = end_pos + start_pos - current_pos;
                if (restricted_set[location]) {
                    --start_pos;
                    --end_pos;
                    continue;
                }
                if (visited[location]) break;
                visited[location] = true;
                result[location] = result[current_pos] + 1;
                queue.push(location);
                --start_pos;
                --end_pos;
            }

            start_pos = current_pos - sub_len + 1;
            end_pos = current_pos;
            if (start_pos < 0) {
                end_pos -= start_pos;
                start_pos = 0;
            }

            while (end_pos < len && current_pos - start_pos > end_pos - current_pos) {
                location = end_pos + start_pos - current_pos;
                if (restricted_set[location]) {
                    ++start_pos;
                    ++end_pos;
                    continue;
                }
                if (visited[location]) break;
                visited[location] = true;
                result[location] = result[current_pos] + 1;
                queue.push(location);
                ++start_pos;
                ++end_pos;
            }

            start_pos = current_pos - (sub_len - 1) / 2;
            end_pos = current_pos + sub_len / 2;
            if (sub_len & 1) {
                ++start_pos;
                ++end_pos;
            }

            if (end_pos >= len) {
                start_pos -= end_pos - len + 1;
                end_pos = len - 1;
            }
            if (start_pos < 0) {
                end_pos -= start_pos;
                start_pos = 0;
            }

            while (start_pos <= current_pos && end_pos < len && current_pos - start_pos < end_pos - current_pos) {
                location = end_pos + start_pos - current_pos;
                if (restricted_set[location]) {
                    ++start_pos;
                    ++end_pos;
                    continue;
                }
                if (visited[location]) break;
                visited[location] = true;
                result[location] = result[current_pos] + 1;
                queue.push(location);
                ++start_pos;
                ++end_pos;
            }

            start_pos = current_pos - (sub_len - 1) / 2 - 1;
            end_pos = current_pos + sub_len / 2 - 1;
            if (end_pos >= len) {
                start_pos -= end_pos - len + 1;
                end_pos = len - 1;
            }
            if (start_pos < 0) {
                end_pos -= start_pos;
                start_pos = 0;
            }

            while (end_pos >= current_pos && start_pos >= 0 && current_pos - start_pos > end_pos - current_pos) {
                location = end_pos + start_pos - current_pos;
                if (restricted_set[location]) {
                    --start_pos;
                    --end_pos;
                    continue;
                }
                if (visited[location]) break;
                visited[location] = true;
                result[location] = result[current_pos] + 1;
                queue.push(location);
                --start_pos;
                --end_pos;
            }
        }

        return result;
    }

  int main(){
    
// TEST 
int len_1 = 1;
int position_1 = 0;
std::vector<int> restricted_vec_1 = {};
int sub_len_1 = 1;
std::vector<int> expected_1 = {0};
std::vector<int> result_1 = MinReverseOperations(len_1, position_1, restricted_vec_1, sub_len_1);
assert(result_1 == expected_1);
// TEST_END

// TEST 
int len_2 = 5;
int position_2 = 2;
std::vector<int> restricted_vec_2 = {1, 3};
int sub_len_2 = 2;
std::vector<int> expected_2 = {-1,-1,0,-1,-1};
std::vector<int> result_2 = MinReverseOperations(len_2, position_2, restricted_vec_2, sub_len_2);
assert(result_2 == expected_2);
// TEST_END

// TEST 
int len_3 = 10;
int position_3 = 4;
std::vector<int> restricted_vec_3 = {2, 5, 7};
int sub_len_3 = 3;
std::vector<int> expected_3 = {-1,-1,-1,-1,0,-1,1,-1,2,-1};
std::vector<int> result_3 = MinReverseOperations(len_3, position_3, restricted_vec_3, sub_len_3);
assert(result_3 == expected_3);
// TEST_END

// TEST 
int len_4 = 8;
int position_4 = 0;
std::vector<int> restricted_vec_4 = {1, 2, 3, 4, 5, 6, 7};
int sub_len_4 = 4;
std::vector<int> expected_4 = {0,-1,-1,-1,-1,-1,-1,-1};
std::vector<int> result_4 = MinReverseOperations(len_4, position_4, restricted_vec_4, sub_len_4);
assert(result_4 == expected_4);
// TEST_END

// TEST 
int len_5 = 7;
int position_5 = 6;
std::vector<int> restricted_vec_5 = {0, 1, 2, 3, 4, 5};
int sub_len_5 = 7;
std::vector<int> expected_5 = {-1,-1,-1,-1,-1,-1,0};
std::vector<int> result_5 = MinReverseOperations(len_5, position_5, restricted_vec_5, sub_len_5);
assert(result_5 == expected_5);
// TEST_END

// TEST 
int len_6 = 15;
int position_6 = 7;
std::vector<int> restricted_vec_6 = {1, 3, 5, 9, 11, 13};
int sub_len_6 = 4;
std::vector<int> expected_6 = {-1,-1,-1,-1,1,-1,1,0,1,-1,1,-1,-1,-1,-1};
std::vector<int> result_6 = MinReverseOperations(len_6, position_6, restricted_vec_6, sub_len_6);
assert(result_6 == expected_6);
// TEST_END

// TEST 
int len_7 = 9;
int position_7 = 8;
std::vector<int> restricted_vec_7 = {0, 2, 4, 6};
int sub_len_7 = 2;
std::vector<int> expected_7 = {-1,-1,-1,-1,-1,-1,-1,1,0};
std::vector<int> result_7 = MinReverseOperations(len_7, position_7, restricted_vec_7, sub_len_7);
assert(result_7 == expected_7);
// TEST_END
    
// TEST 
int len_8 = 20;
int position_8 = 10;
std::vector<int> restricted_vec_8 = {0, 5, 15};
int sub_len_8 = 5;
std::vector<int> expected_8 = {-1,-1,2,-1,2,-1,1,-1,1,-1,0,-1,1,-1,1,-1,2,-1,2,-1};
std::vector<int> result_8 = MinReverseOperations(len_8, position_8, restricted_vec_8, sub_len_8);
assert(result_8 == expected_8);
// TEST_END

// TEST 
int len_9 = 12;
int position_9 = 6;
std::vector<int> restricted_vec_9 = {1, 4, 8, 11};
int sub_len_9 = 3;
std::vector<int> expected_9 = {-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1};
std::vector<int> result_9 = MinReverseOperations(len_9, position_9, restricted_vec_9, sub_len_9);
assert(result_9 == expected_9);
// TEST_END

// TEST 
int len_10 = 0;
int position_10 = 0;
std::vector<int> restricted_vec_10 = {};
int sub_len_10 = 1;
try {
    MinReverseOperations(len_10, position_10, restricted_vec_10, sub_len_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_11 = 10;
int position_11 = -1;
std::vector<int> restricted_vec_11 = {};
int sub_len_11 = 5;
try {
    MinReverseOperations(len_11, position_11, restricted_vec_11, sub_len_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_12 = 10;
int position_12 = 10;
std::vector<int> restricted_vec_12 = {};
int sub_len_12 = 5;
try {
    MinReverseOperations(len_12, position_12, restricted_vec_12, sub_len_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_13 = 10;
int position_13 = 0;
std::vector<int> restricted_vec_13 = {0};
int sub_len_13 = 5;
try {
    MinReverseOperations(len_13, position_13, restricted_vec_13, sub_len_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_14 = 10;
int position_14 = 0;
std::vector<int> restricted_vec_14 = {0, 0};
int sub_len_14 = 5;
try {
    MinReverseOperations(len_14, position_14, restricted_vec_14, sub_len_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_15 = 10;
int position_15 = 0;
std::vector<int> restricted_vec_15 = {1, 2, 3};
int sub_len_15 = 0;
try {
    MinReverseOperations(len_15, position_15, restricted_vec_15, sub_len_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_16 = 10;
int position_16 = 0;
std::vector<int> restricted_vec_16 = {1, 2, 3};
int sub_len_16 = 11;
try {
    MinReverseOperations(len_16, position_16, restricted_vec_16, sub_len_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_17 = 10;
int position_17 = 5;
std::vector<int> restricted_vec_17 = {-1, 3, 4};
int sub_len_17 = 5;
try {
    MinReverseOperations(len_17, position_17, restricted_vec_17, sub_len_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_18 = 10;
int position_18 = 5;
std::vector<int> restricted_vec_18 = {3, 4, 10};
int sub_len_18 = 5;
try {
    MinReverseOperations(len_18, position_18, restricted_vec_18, sub_len_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
    
// TEST 
int len_19 = -99;
int position_19 = 0;
std::vector<int> restricted_vec_19 = {};
int sub_len_19 = 1;
try {
    MinReverseOperations(len_19, position_19, restricted_vec_19, sub_len_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
int len_20 = 10;
int position_20 = -99;
std::vector<int> restricted_vec_20 = {};
int sub_len_20 = -2;
try {
    MinReverseOperations(len_20, position_20, restricted_vec_20, sub_len_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_21 = 10;
int position_21 = 5;
std::vector<int> restricted_vec_21 = {-1, 3, 4};
int sub_len_21 = -55;
try {
    MinReverseOperations(len_21, position_21, restricted_vec_21, sub_len_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_22 = -10;
int position_22 = 5;
std::vector<int> restricted_vec_22 = {-3, -499, -6};
int sub_len_22 = -1;
try {
    MinReverseOperations(len_22, position_22, restricted_vec_22, sub_len_22);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_23 = 10;
int position_23 = 999999;
std::vector<int> restricted_vec_23 = {-1, -2, -3};
int sub_len_23 = 5;
try {
    MinReverseOperations(len_23, position_23, restricted_vec_23, sub_len_23);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_24 = -10;
int position_24 = -95;
std::vector<int> restricted_vec_24 = {-1, -2, -3};
int sub_len_24 = -98985;
try {
    MinReverseOperations(len_24, position_24, restricted_vec_24, sub_len_24);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

    return 0;
  }
