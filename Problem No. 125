/*
Link : https://codeforces.com/problemset/problem/370/E

Jack received an impressive list of summer reading books at school. Unlike other modern schoolchildren, Jack loves reading, so he read some book each day of 
the summer.

As Jack was reading books, he was making notes in the Reader's Diary. Each day he wrote the order number of the book he was reading. The books in the list are 
numbered starting from 1 and Jack was reading them in the order they go in the list. Jack never reads a new book until he finishes reading the previous one. 
Unfortunately, Jack wasn't accurate and some days he forgot to note the number of the book and the notes for those days remained empty.

As Jack knows that the literature teacher will want to check the Reader's Diary, so he needs to restore the lost records. Jack is sure that he spends at least 
two and at most five days for each book. Jack finished reading all the books he had started. Assume that the reading list contained many books. So many, in fact, 
that it is impossible to read all of them in a summer. Help Jack find a way to restore the lost records If it is possible  to restore the diary records,
Jack prefers the one that shows the maximum number of read books.

You are given an integer num_days — the number of summer days. and a vector records containing num_days integers records1, records2, ... records_num_days — the records 
in the diary in the order they were written.
If Jack forgot to write the number of the book on the i-th day, then records_i equals 0.


If it is impossible to correctly fill the blanks in the diary (the diary may contain mistakes initially), return -1.

Otherwise, return  the maximum number of books Jack could have read in the summer if we stick to the diary. 

Create a C++ Function RestoreDiary that will return a vector of integers representing the correctly inserted records.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type: 

A vector<int> denoting records

Input Constraints: 

The value of num_days should be at least 2 and at most 2·10^5 inclusive.
Each value of records[i] should be in the range [0, 10^5] inclusive.

*/


#include <vector>
#include <stdexcept>
#include <cassert>

int RestoreDiary(const std::vector<int>& records) {

    int num_days = records.size();

    if (num_days < 2 || num_days > 200000) {
        throw std::invalid_argument("Number of days is out of valid range");
    }
    for (int record : records) {
        if (record < 0 || record > 100000) {
            throw std::invalid_argument("Record is out of valid range");
        }
    }

    std::vector<int> answer(num_days, 0);
    std::vector<int> visited(num_days, 0);
    std::vector<std::pair<int, int>> upper(num_days, {0, 0}), lower(num_days, {0, 0});

    if (records[0] > 1) {
        return -1;
    }

    upper[0] = {1, 1};
    lower[0] = {1, 1};

    for (int i = 1; i < num_days; i++) {
        upper[i] = upper[i - 1];
        lower[i] = lower[i - 1];

        if (++upper[i].second > 2) {
            upper[i].first++;
            upper[i].second = 1;
        }
        if (++lower[i].second > 5) {
            lower[i].first++;
            lower[i].second = 1;
        }

        if (records[i]) {
            if (upper[i].first < records[i] || lower[i].first > records[i]) {
                return -1;
            }
            if (lower[i].first < records[i]) {
                lower[i].first = records[i];
                lower[i].second = 1;
            }
            if (upper[i].first > records[i]) {
                upper[i].first = records[i];
                upper[i].second = 2;
            }
        }
    }

    answer[num_days - 1] = upper[num_days - 1].first;
    if (upper[num_days - 1].second == 1) {
        answer[num_days - 1]--;
    }
    visited[answer[num_days - 1]]++;

    for (int i = num_days - 2; i >= 0; i--) {
        answer[i] = std::min(answer[i + 1], upper[i].first);
        if (visited[answer[i]] == 5) {
            answer[i]--;
        }
        visited[answer[i]]++;
    }

    for (int i = 0; i < num_days; i++) {
        if (lower[i].first > answer[i]) {
            return -1;
        }
    }
    if (answer[0] == -1) {
        return -1;
    }
    return answer.back();
}

#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
    

    return 0;
}
