/*
Link : https://codeforces.com/problemset/problem/747/F

Dave likes hexadecimal notation and considers a positive integer in hexadecimal notation interesting if each digit and each letter in it appears no more than frequency times. For example, if frequency = 3, then integers 13a13322, aaa, abcdef0123456789 are interesting, but numbers aaaa, abababab, and 1000000 are not interesting.

Your task is to find the count-th smallest interesting integer for Dave in hexadecimal notation. The integer should not contain leading zeros.

You are given two integers count and frequency  â€” the number of the required integer and the maximum number of times some integer or letter can appear 
in an interesting integer.

Return in the hexadecimal notation the only string that is the count-th smallest interesting integer for Dave.

Create a C++ Function FindCounthHex that will return a string denoting the count-th smallest interesting integer for Dave.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

An integer denoting count
An integer denoting frequency

Input Constraints

The value of count should be at least 1 and at most 2*10^9 inclusive.
The value of frequency should be at least 1 and at most 10 inclusive.

*/

#include <iostream>
#include <vector>
#include <cstring>
#include <stdexcept>
#include <cassert>
#include <limits>


long long CalculateCombinations(std::vector<std::vector<long long>>& combinations, int n_val, int r_val) {
    if (r_val == 0 || r_val == n_val) return 1;
    if (combinations[n_val][r_val] != -1) return combinations[n_val][r_val];
    return combinations[n_val][r_val] = ((long long)CalculateCombinations(combinations, n_val - 1, r_val) + CalculateCombinations(combinations, n_val - 1, r_val - 1)) % 1000000007;
}

long long Calculate(std::vector<std::vector<long long>>& combinations, int length, bool is_end, const std::vector<long long>& limits) {
    std::vector<std::vector<long long>> f_vec(22, std::vector<long long>(250, 0));
    f_vec[0][length] = 1;
     int max_n = 205;
     int max_l = 25;
     int digits = 16;
    for (int i = 1; i <= digits; i++) {
        for (int j = 0; j <= length; j++) {
            if (f_vec[i - 1][j] != 0) {
                for (int k = 0; k <= limits[i] && k <= j; k++) {
                    f_vec[i][j - k] += f_vec[i - 1][j] * combinations[j][k];
                    if (f_vec[i][j - k] < 0) {
                        f_vec[i][j - k] = std::numeric_limits<long long>::max();
                    }
                }
            }
        }
    }
    return is_end ? f_vec[digits][0] / digits * 15 : f_vec[digits][0];
}

std::string FindCounthHex(long long count, long long frequency) {
  
    if (count < 1 || frequency < 1 || count > 2000000000 || frequency > 10) {
        throw std::invalid_argument("Input values are out of bounds.");
    }

     int max_n = 205;
     int max_l = 25;
     int digits = 16;
  
    std::vector<std::vector<long long>> combinations(max_n, std::vector<long long>(max_n, -1));
    for (int i = 0; i < max_n; i++) {
        for (int j = 0; j <= i; j++) {
            combinations[i][j] = CalculateCombinations(combinations, i, j);
        }
    }

    std::vector<long long> limits(max_l);
    for (int i = 1; i <= digits; i++) {
        limits[i] = frequency;
    }

    int length;
    for (length = 1; length < 100; length++) {
        long long result = Calculate(combinations, length, true, limits);
        if (result >= count) break;
        count -= result;
    }

    std::string result;
    for (int i = 1; i <= length; i++) {
        for (int j = 1; j <= digits; j++) {
            if (i != 1 || j != 1) {
                limits[j]--;
                long long partial_result = Calculate(combinations, length - i, false, limits);
                if (partial_result >= count) {
                    result += (j < 11 ? static_cast<char>(j + 47) : static_cast<char>(j + 86));
                    break;
                }
                count -= partial_result;
                limits[j]++;
            }
        }
    }
    return result;
}

#include <iostream>
#include <vector>
#include <cstring>
#include <stdexcept>
#include <cassert>
#include <limits>

int main() {
    
  //TEST
long long count_1 = 1;
long long frequency_1 = 1;
std::string expected_1 = "1";
std::string result_1 = FindCounthHex(count_1, frequency_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
long long count_2 = 5;
long long frequency_2 = 2;
std::string expected_2 = "5";
std::string result_2 = FindCounthHex(count_2, frequency_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
long long count_3 = 10;
long long frequency_3 = 3;
std::string expected_3 = "a";
std::string result_3 = FindCounthHex(count_3, frequency_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
long long count_4 = 15;
long long frequency_4 = 4;
std::string expected_4 = "f";
std::string result_4 = FindCounthHex(count_4, frequency_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
long long count_5 = 20;
long long frequency_5 = 5;
std::string expected_5 = "14";
std::string result_5 = FindCounthHex(count_5, frequency_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
long long count_6 = 100;
long long frequency_6 = 6;
std::string expected_6 = "64";
std::string result_6 = FindCounthHex(count_6, frequency_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
long long count_7 = 500;
long long frequency_7 = 7;
std::string expected_7 = "1f4";
std::string result_7 = FindCounthHex(count_7, frequency_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
long long count_8 = 1000;
long long frequency_8 = 8;
std::string expected_8 = "3e8";
std::string result_8 = FindCounthHex(count_8, frequency_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
long long count_9 = 2000;
long long frequency_9 = 9;
std::string expected_9 = "7d0";
std::string result_9 = FindCounthHex(count_9, frequency_9);
assert(result_9 == expected_9);
//TEST_END

 
//TEST
long long count_10 = 0; 
long long frequency_10 = 1;
try {
    FindCounthHex(count_10, frequency_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long count_11 = 1;
long long frequency_11 = 0; 
try {
    FindCounthHex(count_11, frequency_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long count_12 = 2 * 10000000000 + 1; 
long long frequency_12 = 1;
try {
    FindCounthHex(count_12, frequency_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
  
long long count_13 = 1;
long long frequency_13 = 11; 
try {
    FindCounthHex(count_13, frequency_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

  
//TEST
long long count_14 = -999999; 
long long frequency_14 = 1;
try {
    FindCounthHex(count_14, frequency_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long count_15 = 1;
long long frequency_15 = -9999; 
try {
    FindCounthHex(count_15, frequency_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
