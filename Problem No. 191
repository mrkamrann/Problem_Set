/*
Link: https://codeforces.com/problemset/problem/1548/C

Three little pigs from all over the world are meeting for a convention! Every minute, a triple of 3 new pigs arrives on the convention floor. After the 
convention_minutes-th minute, the convention ends.

The big bad wolf has learned about this convention, and he has an attack plan. At some minute in the convention, he will arrive and eat exactly pigs_eaten pigs.
Then he will get away.

The wolf wants Gregor to help him figure out the number of possible attack plans that involve eating exactly pigs_eaten pigs for various values
of pigs_eaten. Two attack plans are considered different if they occur at different times or if the sets of little 
pigs to eat are different.

Note that all queries are independent, that is, the wolf does not eat the little pigs, he only makes plans!

You are given convention_minutes, the number of minutes the convention lasts

You are also given a vector pigs_eaten_per_query of length query_count contains a single integer pigs_eaten , the number of pigs the wolf will eat in the i-th 
query.

You should return query_count integers, with line i representing the number of attack plans if the wolf wants to eat pigs_eaten pigs. 
Since each query answer can be large, output each answer modulo 10^9 + 7.

Create a C++ function CalculateAttackPlans that will return a vector of integers denoting the number of possible attack plans for each query.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

An integer denoting convention_minutes.
An integer denoting query_count.
A vector<int> denoting pigs_eaten_per_query.

Input Constraints:

The value of convention_minutes should be in the range [1, 10^6] inclusive.
The value of query_count should be in the range [1, 2 * 10^5] inclusive.
The value of pigs_eaten_per_query[i] should be in the range [1, 3 * convention_minutes] inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int ComputeInverse(int value, int modulus) {
    int result = 1;
    int power = modulus - 2;
    while (power) {
        if (power & 1) {
            result = static_cast<long long>(result) * value % modulus;
        }
        value = static_cast<long long>(value) * value % modulus;
        power >>= 1;
    }
    return result;
}

std::vector<int> CalculateAttackPlans(int convention_minutes, int query_count, const std::vector<int>& pigs_eaten_per_query) {
    if (convention_minutes < 1 || convention_minutes > 1000000) {
        throw std::invalid_argument("convention_minutes out of range");
    }
    if (query_count < 1 || query_count > 200000) {
        throw std::invalid_argument("query_count out of range");
    }
    for (int pigs_eaten : pigs_eaten_per_query) {
        if (pigs_eaten < 1 || pigs_eaten > 3 * convention_minutes) {
            throw std::invalid_argument("pigs_eaten_per_query value out of range");
        }
    }

    int max_pigs = convention_minutes * 3;
    int modulus = 1000000007;
    std::vector<int> result_vec(max_pigs + 10);
    std::vector<int> inverse_vec(max_pigs + 10);
    const int inverse_three = ComputeInverse(3, modulus);

    result_vec[0] = ++convention_minutes;
    convention_minutes *= 3;
    int bm_val = static_cast<long long>(convention_minutes) * (convention_minutes - 1) / 2 % modulus;
    result_vec[1] = static_cast<long long>(bm_val - convention_minutes + modulus) * inverse_three % modulus;
    inverse_vec[1] = 1;

    for (int i = 2; i <= convention_minutes; ++i) {
        inverse_vec[i] = static_cast<long long>(modulus - modulus / i) * inverse_vec[modulus % i] % modulus;
    }

    for (int i = 2; i < convention_minutes; ++i) {
        bm_val = static_cast<long long>(bm_val) * inverse_vec[i + 1] % modulus * (convention_minutes - i) % modulus;
        result_vec[i] = (bm_val + (modulus - 3LL) * result_vec[i - 1] - result_vec[i - 2]) % modulus * inverse_three % modulus;
    }

    std::vector<int> results;
    for (int pigs_eaten : pigs_eaten_per_query) {
        results.push_back(result_vec[pigs_eaten]);
    }

    return results;
}

int main() {
    int convention_minutes;
    int query_count;
    std::cin >> convention_minutes >> query_count;

    std::vector<int> pigs_eaten_per_query(query_count);
    for (int i = 0; i < query_count; ++i) {
        std::cin >> pigs_eaten_per_query[i];
    }

    std::vector<int> results = ComputeValues(convention_minutes, query_count, pigs_eaten_per_query);
    for (int result : results) {
        std::cout << result << std::endl;
    }

    return 0;
}
