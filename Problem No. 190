/*
Link: https://codeforces.com/problemset/problem/1956/E1

Babar is fighting with num_monsters, located in a circle. These monsters are numbered from 1 to num_monsters, and the i-th (1 ≤ i ≤ num_monsters) monster's 
current energy level is energy_levels[i].

Since the monsters are too strong, Babar decided to fight with them using the Attack Your Neighbour spell. When Babar uses this spell, the following actions 
happen in the following order one by one:

The 1-st monster attacks the 2-nd monster;
The 2-nd monster attacks the 3-rd monster;
...
The (num_monsters−1)-th monster attacks the num_monsters-th monster;
The num_monsters-th monster attacks the 1-st monster.

When the monster with energy level x attacks the monster with the energy level y, the energy level of the defending monster becomes max(0, y−x) 
(the energy level of the attacking monster remains equal to x).

Babar is going to use this spell 10^100 times and deal with the monsters that will still have a non-zero energy level himself. 
He wants you to determine which monsters will have a non-zero energy level once he will use the described spell 10^100 times.

Input

You are given num_monsters integers energy_levels[0], energy_levels[1], ..., energy_levels[num_monsters−1] (0 ≤ energy_levels[i] ≤ 2⋅10^5) — the current 
energy levels of monsters.

Return m integers i_1, i_2, ..., i_m (1 ≤ i_1 < i_2 < ... < i_m ≤ num_monsters) — the indices of these monsters in increasing order. 
If m=0, output {-1}.

Create a C++ function SurvivingMonsters that will return a vector<int> denoting the number of monsters with non-zero energy level after 10^100 uses of the spell.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

vector<int> representing energy_levels.

Input Constraints:

The value of num_monsters should be in the range [2, 2⋅10^5] inclusive.
The value of energy_levels[i] should be in the range [0, 2⋅10^5] inclusive.

*/

#include <vector>
#include <cstdio>
#include <stdexcept>
#include <cassert>

std::vector<int> SurvivingMonsters(const std::vector<int>& energy_levels) {
   
    int num_monsters = energy_levels.size();
  
    if (num_monsters < 2 || num_monsters > 200000) {
        throw std::invalid_argument("num_monsters out of range");
    }

    for (int energy : energy_levels) {
        if (energy < 0 || energy > 200000) {
            throw std::invalid_argument("energy level out of range");
        }
    }

    std::vector<int> local_levels(num_monsters + 1);
  
    for(int i = 0; i < num_monsters; ++i)
    {
      local_levels[i+1] = energy_levels[i];
    }

    for (int iteration = 1; iteration <= 1000; ++iteration) {
        for (int index = 1; index <= num_monsters; ++index) {
            local_levels[index % num_monsters + 1] = std::max(0, local_levels[index % num_monsters + 1] - local_levels[index]);
        }
    }

    for (int index = 1; index <= num_monsters; ++index) {
        if (local_levels[index] && local_levels[index % num_monsters + 1]) {
            local_levels[index % num_monsters + 1] = 0;
        }
    }

    std::vector<int> results;
    for (int index = 1; index <= num_monsters; ++index) {
        if (local_levels[index]) {
            results.push_back(index);
        }
    }
    if(results.size() == 0) return {-1};
    return results;
}

#include <vector>
#include <cstdio>
#include <stdexcept>
#include <cassert>

int main() {
   
//TEST
std::vector<int> energy_levels_1 = {1, 2, 3, 4, 5};
std::vector<int> expected_1 = {2, 4};
std::vector<int> result_1 = SurvivingMonsters(energy_levels_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> energy_levels_2 = {0, 0, 0, 0, 0};
std::vector<int> expected_2 = {-1};
std::vector<int> result_2 = SurvivingMonsters(energy_levels_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> energy_levels_3 = {200000, 199999, 150000, 100000};
std::vector<int> expected_3 = {1, 3};
std::vector<int> result_3 = SurvivingMonsters(energy_levels_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> energy_levels_4 = {1, 0, 3, 0, 5};
std::vector<int> expected_4 = {3, 5};
std::vector<int> result_4 = SurvivingMonsters(energy_levels_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> energy_levels_5 = {0, 1, 2, 0, 3, 4, 0};
std::vector<int> expected_5 = {2, 5};
std::vector<int> result_5 = SurvivingMonsters(energy_levels_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> energy_levels_6 = {100, 0, 0, 50, 75};
std::vector<int> expected_6 = {1, 4};
std::vector<int> result_6 = SurvivingMonsters(energy_levels_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> energy_levels_7 = {0, 0, 0, 1, 0};
std::vector<int> expected_7 = {4};
std::vector<int> result_7 = SurvivingMonsters(energy_levels_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> energy_levels_8 = {2, 2, 2, 2, 2, 2};
std::vector<int> expected_8 = {1, 3, 5};
std::vector<int> result_8 = SurvivingMonsters(energy_levels_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> energy_levels_9 = {1000, 1000, 1000, 1000, 1000};
std::vector<int> expected_9 = {3,5};
std::vector<int> result_9 = SurvivingMonsters(energy_levels_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<int> energy_levels_10 = {-5, 1, 2, 3, 4};
try {
    SurvivingMonsters(energy_levels_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> energy_levels_11 = {1, 2, 3, 1000000008, 5};
try {
    SurvivingMonsters(energy_levels_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> energy_levels_12 = {1, 2, 3, 4, -999999};
try {
    SurvivingMonsters(energy_levels_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> energy_levels_13(1e6, 5);
try {
    SurvivingMonsters(energy_levels_13); 
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST
std::vector<int> energy_levels_14 = {};
try {
    SurvivingMonsters(energy_levels_14); 
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
