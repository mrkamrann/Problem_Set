/*

Once upon a time, in the land of Algorithms, there existed a vector of integers known as numbers. Alongside this vector, dwelled two powerful integers, lower and upper, guarding the gates of a mystical realm called the range.

The mission was clear: to count the number of range sums that lay within the boundaries of lower and upper, inclusive. But what exactly were these "range sums"? Imagine traversing the vector numbers from one index to another, summing up all the elements encountered on the way. This sum, my friend, is what we call a "Range sum". Mathematically, Range sum is RangeSum(i,j)  defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

Return a C++ Function CountRangeSum to count all these range sums that fell within the kingdom of [lower, upper]. 


Input types:

A vector<int> representing the elements of the vector numbers.
Two integers representing the lower and upper bounds, denoted as lower and upper, respectively.

Input Constraints:

The size of the vector numbers should be at least 1 and at most 10^5.
Each element in the vector numbers should be an integer within the range [-10^8, 10^8].
The values of lower and upper should be integers within the range inclusive [-10^5, 10^5], where lower is less than or equal to upper.

*/

#include <vector>
#include <algorithm>
#include <utility>
#include <cassert>

struct FenwickTree {
    std::vector<int> bit;  
    int size;

    FenwickTree(int size) {
        this->size = size;
        bit.assign(size, 0);
    }

    FenwickTree(std::vector<int> array) : FenwickTree(array.size()) {
        for (size_t i = 0; i < array.size(); i++)
            Add(i, array[i]);
    }

    int GetSum(int right) {
        int result = 0;
        for (; right >= 0; right = (right & (right + 1)) - 1)
            result += bit[right];
        return result;
    }

    int GetSum(int left, int right) {
        return GetSum(right) - GetSum(left - 1);
    }

    void Add(int index, int delta) {
        for (; index < size; index = index | (index + 1))
            bit[index] += delta;
    }
};

int CountRangeSum(std::vector<int>& numbers, int lower, int upper) {
       
    int length = numbers.size();
  
    if (length < 1 || length > 100000) {
        throw std::invalid_argument("Invalid size of numbers");
    }
    if (lower > upper || lower < -100000 || upper > 100000 || upper < -100000 || lower > 100000) {
        throw std::invalid_argument("Invalid bounds");
    }
    std::vector<std::pair<long, int>> sum_index_pairs;
    int count = 0;
    long current_sum = 0;

    for (int i = 0; i < length; i++) {
        if (numbers[i] > 10000000 || numbers[i] < -10000000) {
            throw std::invalid_argument("Out of range value in numbers");
        }
        current_sum += numbers[i];
        sum_index_pairs.push_back(std::make_pair(current_sum, i));
    }
    std::sort(sum_index_pairs.begin(), sum_index_pairs.end());

    FenwickTree tree(length);
    int left = 0, right = 0;
    for (int i = 0; i < length; i++) {
        while (right < length && (sum_index_pairs[i].first - sum_index_pairs[right].first) >= static_cast<long>(lower)) {
            tree.Add(sum_index_pairs[right].second, 1);
            right++;
        }
        while (left < length && (sum_index_pairs[i].first - sum_index_pairs[left].first) > static_cast<long>(upper)) {
            tree.Add(sum_index_pairs[left].second, -1);
            left++;
        }

        count += tree.GetSum(sum_index_pairs[i].second - 1);
        if (sum_index_pairs[i].first >= lower && sum_index_pairs[i].first <= upper)
            count++;
    }

    return count;
}


int main(){
  
   //TEST

    std::vector<int> numbers_1 = {-2,5,-1};
    int lower_1 = -2;
    int upper_1 = 2;
    int expected_1 = 3;
    int result_1 = CountRangeSum(numbers_1, lower_1, upper_1);
    assert(result_1== expected_1);

  //TEST_END
  
   //TEST
  
    std::vector<int> numbers_2 = {0, 0, 0, 0};
    int lower_2 = -1;
    int upper_2 = 1;
    int expected_2 = 10;
    int result_2 = CountRangeSum(numbers_2, lower_2, upper_2);
    assert(result_2 == expected_2);
  
   //TEST_END

    //TEST
  
    std::vector<int> numbers_3 = {-3, -2, 0, 3};
    int lower_3 = -1;
    int upper_3 = 3;
    int expected_3 = 4;
    int result_3 = CountRangeSum(numbers_3, lower_3, upper_3);
    assert(result_3 == expected_3);
  
  //TEST_END

    //TEST
  
    std::vector<int> numbers_4 = {5, -5, 0, 0, 0};
    int lower_4 = -3;
    int upper_4 = 3;
    int expected_4 = 10;
    int result_4 = CountRangeSum(numbers_4, lower_4, upper_4);
    assert(result_4 == expected_4);
  
  //TEST_END

    //TEST
    std::vector<int> numbers_5 = {-1, 0, -1, 0, -1};
    int lower_5 = -2;
    int upper_5 = 2;
    int expected_5 = 14;
    int result_5 = CountRangeSum(numbers_5, lower_5, upper_5);
    assert(result_5 == expected_5);
  
   //TEST_END
  
  //TEST
    std::vector<int> numbers_6 = {0};
    int lower_6 = 0;
    int upper_6 = 0;
    int expected_6 = 1;
    int result_6 = CountRangeSum(numbers_6, lower_6, upper_6);
    assert(result_6 == expected_6);
  
   //TEST_END
  
  //TEST
  
 
    std::vector<int> numbers_7 = {};
    int lower_7 = 49;
    int upper_7 = 95;
    try {
        CountRangeSum(numbers_7, lower_7, upper_7);
        assert(false); 
    } 
    catch (const std::invalid_argument& e) {
        assert(true);
    } 
  
  //TEST_END
  

   //TEST
  
    
        std::vector<int> numbers_8(100000001, 1); 
        int lower_8 = -2;
        int upper_8 = 2;     
    try {
         CountRangeSum(numbers_8, lower_8, upper_8);
        assert(false); 
    } 
   catch (const std::invalid_argument& e) {
        assert(true);
    }
  
  //TEST_END

   //TEST
    
        std::vector<int> numbers_9 = {-2, 5, -1};
        int lower_9 = 3;
        int upper_9 = 2;
        try {
          CountRangeSum(numbers_9, lower_9, upper_9);
        assert(false);
          
    }
  catch (const std::invalid_argument& e) {
        assert(true);
    }
  
  //TEST_END

   //TEST
    
        std::vector<int> numbers_10 = {-2, 5, -1};
        int lower_10 = -1000000000;
        int upper_10 = 2;
        try {
          CountRangeSum(numbers_10, lower_10, upper_10);
        assert(false); 
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
  
  //TEST_END

    //TEST
   
        std::vector<int> numbers_11 = {-2, 5, -1};
        int lower_11 = -2;
        int upper_11 = 1000000000;
         try {
           CountRangeSum(numbers_11, lower_11, upper_11);
        assert(false); 
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
  
  //TEST_END

    //TEST
    
        std::vector<int> numbers_12 = {-2, 5, -1};
        int lower_12 = -1000000000;
        int upper_12 = 1000000000;
      try 
        {
          CountRangeSum(numbers_12, lower_12, upper_12);
        assert(false); 
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
  
//TEST_END
   
 return 0;
  
}










