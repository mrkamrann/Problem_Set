/*
Link: https://codeforces.com/contest/1067/problem/E

Let's define the rank of an undirected graph as the rank of its adjacency matrix in R^(num_nodes × num_nodes).

Given a tree, each edge of this tree will be deleted with probability 1/2, and all these deletions are independent. Let E be the expected rank of the resulting 
forest. Find E · 2^(num_nodes-1) modulo 998244353 (it is easy to show that E · 2^(num_nodes-1) is an integer).

You are given a 2D vector of size num_nodes - 1 where num_nodes — the number of vertices,  contain two integers u and v — indices of vertices connected by edge.

Return one long long — the answer to the problem.

Create a C++ function CalculateExpectedRank that will return a long long denoting the answer to the problem.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An Integer denoting num_nodes
A vector<vector<int>> edges

Input Constraints:

The value of num_nodes should be at least 1 and at most 5 * 10^5 inclusive.
The length of edges should be equal to num_nodes - 1
Each edge should connect distinct nodes within the range [1, num_nodes].

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

void DepthFirstSearch(int node, int parent, const std::vector<std::vector<int>> &adjacency_list, std::vector<int> &function_values, long long &result) {
  
    int multiplier = 1;
    int modulo = 998244353;
  
    int inverse_modulo = (modulo + 1) >> 1;
  
    for (size_t i = 0; i < adjacency_list[node].size(); ++i) {
        int neighbor = adjacency_list[node][i];
        if (neighbor != parent) {
            DepthFirstSearch(neighbor, node, adjacency_list, function_values, result);
            multiplier = static_cast<long long>(multiplier) * inverse_modulo % modulo * (modulo + 2 - function_values[neighbor]) % modulo;
        }
    }
    result += modulo + 1 - multiplier;
    function_values[node] = multiplier;
}

long long CalculateExpectedRank(int num_nodes, const std::vector<std::vector<int>> &edges) {

 
    if (num_nodes < 1 || num_nodes > 500000) {
        throw std::invalid_argument("Invalid number of nodes");
    }
  
    if (num_nodes -  1 != edges.size()) {
        throw std::invalid_argument("The length of edges should be equal to num_nodes - 1");
    }
  
    for (size_t i = 0; i < edges.size(); ++i) {

        int u_val = edges[i][0];
        int v_val = edges[i][1];
        if (u_val < 1 || u_val > num_nodes || v_val < 1 || v_val > num_nodes || u_val == v_val) {
            throw std::invalid_argument("Invalid edge");
        }
    }
  
    int modulo = 998244353;
    int inverse_modulo = (modulo + 1) >> 1;
  
    std::vector<std::vector<int>> adjacency_list(num_nodes + 1);
    std::vector<int> function_values(num_nodes + 1, 0);
    long long result = 0;

   for (const std::vector<int> &edge : edges) {
     
        adjacency_list[edge[0]].push_back(edge[1]);
        adjacency_list[edge[1]].push_back(edge[0]);
    }

    DepthFirstSearch(1, 0, adjacency_list, function_values, result);

    for (int i = 0; i < num_nodes; ++i) {
        result = result * 2 % modulo;
    }

    return result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
    
  //TEST
int num_nodes_1 = 3;
std::vector<std::vector<int>> edges_1 = {{1, 2}, {2, 3}};
long long expected_1 = 6;
long long result_1 = CalculateExpectedRank(num_nodes_1, edges_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int num_nodes_2 = 1;
std::vector<std::vector<int>> edges_2 = {};
long long expected_2 = 0;
long long result_2 = CalculateExpectedRank(num_nodes_2, edges_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int num_nodes_3 = 4;
std::vector<std::vector<int>> edges_3 = {{1, 2}, {2, 3}, {3, 4}};
long long expected_3 = 18;
long long result_3 = CalculateExpectedRank(num_nodes_3, edges_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
int num_nodes_4 = 5;
std::vector<std::vector<int>> edges_4 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
long long expected_4 = 46;
long long result_4 = CalculateExpectedRank(num_nodes_4, edges_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int num_nodes_5 = 2;
std::vector<std::vector<int>> edges_5 = {{1, 2}};
long long expected_5 = 2;
long long result_5 = CalculateExpectedRank(num_nodes_5, edges_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int num_nodes_6 = 6;
std::vector<std::vector<int>> edges_6 = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}};
long long expected_6 = 62;
long long result_6 = CalculateExpectedRank(num_nodes_6, edges_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int num_nodes_7 = 7;
std::vector<std::vector<int>> edges_7 = {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {3, 7}};
long long expected_7 = 246;
long long result_7 = CalculateExpectedRank(num_nodes_7, edges_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int num_nodes_8 = 8;
std::vector<std::vector<int>> edges_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}};
long long expected_8 = 626;
long long result_8 = CalculateExpectedRank(num_nodes_8, edges_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int num_nodes_9 = 10;
std::vector<std::vector<int>> edges_9 = {{1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {1, 10}};
long long expected_9 = 1022;
long long result_9 = CalculateExpectedRank(num_nodes_9, edges_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
int num_nodes_10 = 0;
std::vector<std::vector<int>> edges_10 = {};
try {
    CalculateExpectedRank(num_nodes_10, edges_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_nodes_11 = 3;
std::vector<std::vector<int>> edges_11 = {{1, 1}, {2, 2}};
try {
    CalculateExpectedRank(num_nodes_11, edges_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_nodes_12 = 4;
std::vector<std::vector<int>> edges_12 = {{-9999, 2}, {2, 3}, {4, 5}};
try {
    CalculateExpectedRank(num_nodes_12, edges_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_nodes_13 = 3;
std::vector<std::vector<int>> edges_13 = {{1, 4}, {2, 5}};
try {
    CalculateExpectedRank(num_nodes_13, edges_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_nodes_14 = -999;
std::vector<std::vector<int>> edges_14 = {{1,4}};
try {
    CalculateExpectedRank(num_nodes_14, edges_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST
int num_nodes_15 = 1e6;
std::vector<std::vector<int>> edges_15 = {{1,4}};
try {
    CalculateExpectedRank(num_nodes_15, edges_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
    return 0;
}
