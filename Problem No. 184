/*
Link: https://codeforces.com/contest/1096/problem/E

Henry loves playing games and has recently discovered a game called TopScore. In this soccer-like game, there are players players doing penalty shoot-outs. 
The winner is the one who scores the most. In case of ties, one of the top-scorers will be declared the winner randomly with equal probability.

They have just finished the game and now are waiting for the result. But there's a tiny problem! The judges have lost the paper of scores! Fortunately, they have 
calculated the sum of the scores before they got lost, and also for some of the players, they have remembered a lower bound on how much they scored. However, 
the information about the bounds is private, so Henry only got to know his bound.

According to the available data, he knows that his score is at least player_score and the sum of the scores is score_sum.

Thus the final state of the game can be represented in the form of a sequence of players integers scores_1, scores_2, ..., scores_p (0 ≤ scores_i) — players' 
scores. Henry is player number 1, so scores_1 ≥ player_score. Also, scores_1 + scores_2 + ... + scores_p = score_sum. Two states are considered different if there 
exists some position i such that the value of scores_i differs in these states.

Once again, Henry doesn't know the exact scores (he doesn't know his exact score as well). So he considers each of the final states to be equally probable to achieve.

Help Henry find the probability of him winning.

It can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0, P ≤ Q. Report the value of P * Q^(-1) (mod 998244353).

Your are given three integers players, score_sum, and player_score  — the number of players, the sum of scores of all players, and Henry's score, respectively.

Return a single number — the probability of Henry winning.

It can be shown that it is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0, P ≤ Q. Report the value of P * Q^(-1) (mod 998244353).

Create a C++ function CalculateWinningProbability that will return a long long denoting the probability of Henry winning.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An Integer denoting players
An Integer denoting score_sum
An Integer denoting player_score

Input Constraints

The value of players should be at least 1 and at most 100 inclusive.
The value of score_sum should be at least 0 and at most 5000 inclusive.
The value of player_score should be at least 0 and at most score_sum inclusive.
*/


#include <vector>
#include <tuple>
#include <iostream>
#include <stdexcept>
#include <cassert>



std::tuple<std::vector<long long>, std::vector<long long>, std::vector<long long>> ComputeInversesAndFactorials(int max_value) {
    std::vector<long long> inverses(max_value + 1, 1);
    std::vector<long long> factorial(max_value + 1, 1);
    std::vector<long long> factorial_inv(max_value + 1, 1);
    const long long modulus = 998244353;
    for (int i = 2; i <= max_value; ++i) {
        inverses[i] = (modulus - modulus / i) * inverses[modulus % i] % modulus;
        factorial[i] = factorial[i - 1] * i % modulus;
        factorial_inv[i] = factorial_inv[i - 1] * inverses[i] % modulus;
    }

    return std::make_tuple(inverses, factorial, factorial_inv);
}

long long CalculateWinningProbability(int players, int score_sum, int player_score) {
    if (players < 1 || players > 100) {
        throw std::invalid_argument("Invalid number of players.");
    }
    if (player_score < 0 || player_score > score_sum) {
        throw std::invalid_argument("Invalid player score.");
    }
    if (score_sum > 5000) {
        throw std::invalid_argument("Invalid score sum.");
    }
    const long long modulus = 998244353;
    std::tuple<std::vector<long long>, std::vector<long long>, std::vector<long long>> computed_values = ComputeInversesAndFactorials(5100);
    std::vector<long long> inverses = std::get<0>(computed_values);
    std::vector<long long> factorial = std::get<1>(computed_values);
    std::vector<long long> factorial_inv = std::get<2>(computed_values);
  
    long long result = 0;

    for (int i = 1; i <= players && score_sum - player_score * i >= 0; ++i) {
        long long term = (i & 1 ? 1 : -1) * factorial[score_sum - player_score * i + players - 1] % modulus;
        term = term * factorial_inv[score_sum - player_score * i] % modulus;
        term = term * factorial_inv[i] % modulus;
        term = term * factorial_inv[players - i] % modulus;
        result = (result + term) % modulus;
    }

    result = (result % modulus + modulus) % modulus;
    result = result * factorial[players - 1] % modulus;
    result = result * factorial[score_sum - player_score] % modulus;
    result = result * factorial_inv[score_sum - player_score + players - 1] % modulus;

    return result;
}

int main() {
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);

    int players, score_sum, player_score;
    std::cin >> players >> score_sum >> player_score;

    if (players < 1 || players > 100) {
        throw std::invalid_argument("Invalid number of players.");
    }
    if (player_score < 0 || player_score > score_sum) {
        throw std::invalid_argument("Invalid player score.");
    }
    if (score_sum > 5000) {
        throw std::invalid_argument("Invalid score sum.");
    }

    long long result = CalculateResult(players, score_sum, player_score);
    std::cout << result;

    return 0;
}
