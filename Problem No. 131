/*
Link: https://codeforces.com/problemset/problem/840/C

Rohan was walking through a public park a year ago when he found an vector of len numbers on a bench. He believes that a permutation p of this vector is 
correct if, for all 1 ≤ i < len, the condition found[p[i]] * found[p[i + 1]] is not a perfect square holds true. Rohan wants to determine the number of 
correct permutations modulo 10^9 + 7.

Input data contains a single integer len  — the length of the vector.

Also given len integers found_1, found_2, ..., found_len  — the found vector.

Return a single number — the number of correct permutations modulo 10^9 + 7.

Create a C++ function NumberOfPermutations that will return an integer denoting the number of correct permutations.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A vector<int> denoting found

Input Constraints:

The length of found should be at least 1 and at most 300 inclusive.
Each value of found should be in the range [1, 10^9] inclusive.

*/


#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

void Process(std::vector<int>& found) {
    for (int& number : found) {
        for (int j = 2; j * j <= number; ++j) {
            while (number % (j * j) == 0) {
                number /= (j * j);
            }
        }
    }
    std::sort(found.begin(), found.end());
}

int NumberOfPermutations(std::vector<int>& found) {
    int len = found.size();

    if (len < 1 || len > 300) {
        throw std::invalid_argument("Invalid length of found vector");
    }
    for (int num : found) {
        if (num < 1 || num > 1e9) {
            throw std::invalid_argument("Invalid element in found vector");
        }
    }

    Process(found);

    const int modulus = 1e9 + 7;

    std::vector<std::vector<std::vector<int>>> dp_table(2, std::vector<std::vector<int>>(303, std::vector<int>(303, 0)));
    int current_index = 0;
    int start = 0;

    dp_table[0][0][0] = 1;

    for (int i = 1; i <= len; ++i) {
        int current = found[i - 1];

        if (i > 1 && current != found[i - 2]) {
            for (int j = 0; j <= i; ++j) {
                for (int k = 1; k <= start; ++k) {
                    dp_table[current_index ^ 1][j][0] = (dp_table[current_index ^ 1][j][0] + dp_table[current_index ^ 1][j][k]) % modulus;
                    dp_table[current_index ^ 1][j][k] = 0;
                }
            }
            start = 0;
        }

        for (int j = 0; j <= i; ++j) {
            for (int k = 0; k <= start && k <= j; ++k) {
                if (j && k) {
                    dp_table[current_index][j][k] = (dp_table[current_index][j][k] + 1LL * dp_table[current_index ^ 1][j - 1][k - 1] * (2 * start - k + 1) % modulus) % modulus;
                }
                dp_table[current_index][j][k] = (dp_table[current_index][j][k] + 1LL * dp_table[current_index ^ 1][j + 1][k] * (j + 1 - k) % modulus) % modulus;
                dp_table[current_index][j][k] = (dp_table[current_index][j][k] + 1LL * dp_table[current_index ^ 1][j][k] * (i - (2 * start - k) - (j - k)) % modulus) % modulus;
            }
        }

        current_index ^= 1;
        ++start;
        for (int row_index = 0; row_index < dp_table[current_index].size(); ++row_index) {
            std::fill(dp_table[current_index][row_index].begin(), dp_table[current_index][row_index].end(), 0);
        }
    }

    return dp_table[current_index ^ 1][0][0];
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

int main() {
  
  
//TEST

std::vector<int> found_1 = {1};
int expected_1 = 1;
int result_1 = NumberOfPermutations(found_1);
assert(result_1 == expected_1);
//TEST_END

//TEST


std::vector<int> found_2 = {2, 3};
int expected_2 = 2;
int result_2 = NumberOfPermutations(found_2);
assert(result_2 == expected_2);
//TEST_END

//TEST


std::vector<int> found_3 = {4, 5, 6};
int expected_3 = 6;
int result_3 = NumberOfPermutations(found_3);
assert(result_3 == expected_3);
//TEST_END

//TEST


std::vector<int> found_4 = {7, 8, 9, 10};
int expected_4 = 24;
int result_4 = NumberOfPermutations(found_4);
assert(result_4 == expected_4);
//TEST_END

//TEST


std::vector<int> found_5 = {1, 1, 2, 2, 3};
int expected_5 = 48;
int result_5 = NumberOfPermutations(found_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

std::vector<int> found_6 = {9, 9, 9, 9, 9, 9, 9};
int expected_6 = 0;
int result_6 = NumberOfPermutations(found_6);
assert(result_6 == expected_6);
//TEST_END

//TEST

std::vector<int> found_7 = {10, 10, 10, 10, 10, 10, 10, 10, 10};
int expected_7 = 0;
int result_7 = NumberOfPermutations(found_7);
assert(result_7 == expected_7);
//TEST_END

//TEST


std::vector<int> found_8 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
int expected_8 = 122400;
int result_8 = NumberOfPermutations(found_8);
assert(result_8 == expected_8);
//TEST_END

//TEST

std::vector<int> found_9 = {1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000};
int expected_9 = 2880;
int result_9 = NumberOfPermutations(found_9);
assert(result_9 == expected_9);
//TEST_END

//TEST


std::vector<int> found_10 = {};
try {
    NumberOfPermutations(found_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> found_11(301, 1); 
try {
     NumberOfPermutations(found_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::vector<int> found_12 = {0}; 
try {
     NumberOfPermutations(found_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> found_13 = {1, 1000000001};
try {
     NumberOfPermutations(found_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> found_14 = {-999, 5, 6};
try {
    NumberOfPermutations(found_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


    return 0;
}
