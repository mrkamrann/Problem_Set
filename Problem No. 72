/*
Link : https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/description/

Julie, a skilled mathematician and problem solver, was faced with an intriguing challenge one rainy afternoon. She received a vector nums containing exactly 2 * len 
integers.Julie's task was to split this vector into two smaller vectors of length len each Julie needs to partition nums into two vectors of length len to minimize 
the absolute  difference of the sums of the vectors. To partition nums, Julie should put each element of nums into one of the two vectors.

Create a C++ Function MinimumDifference that will return an integer denoting the minimum possible absolute difference.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type:

A vector<int> denoting nums

Input Constraints:

The length of nums should be exactly 2 * len.
The values for len should be in the range [1, 15] inclusive.
Each value of nums[i] should be in the range [-10^7, 10^7] inclusive.

*/

#include <vector>
#include <stdexcept>
#include <cassert>
#include <algorithm>
#include <numeric>


    int MinimumDifference(std::vector<int>& nums) {

        int len = nums.size();

        if (len % 2 != 0 || len < 2 || len > 30) {
            throw std::invalid_argument("The length of nums should be exactly 2 * len, where len is in the range [1, 15] inclusive.");
        }

        int half_len = len / 2;

        for (int i = 0; i < len; i++) {
            if (nums[i] < -10000000 || nums[i] > 10000000) {
                throw std::invalid_argument("Each value of nums[i] should be in the range [-10000000, 10000000] inclusive.");
            }
        }

        std::vector<std::vector<int>> left_sum(half_len + 1), right_sum(half_len + 1);
        int count_limit_mask = (1 << half_len) - 1;

        for (int i = 0; i <= count_limit_mask; i++) {
            int left_size = 0;
            int left_sum_value = 0;
            int right_sum_value = 0;

            for (int j = 0; j < half_len; j++) {
                if (i & (1 << j)) {
                    left_size++;
                    left_sum_value += nums[j];
                    right_sum_value += nums[j + half_len];
                }
            }

            left_sum[left_size].push_back(left_sum_value);
            right_sum[left_size].push_back(right_sum_value);
        }

        int total_sum = std::accumulate(nums.begin(), nums.end(), 0);
        int min_difference = std::min(abs(total_sum - 2 * left_sum[half_len][0]), abs(total_sum - 2 * right_sum[half_len][0]));

        for (int right_size = 0; right_size <= half_len; right_size++) {
            std::sort(right_sum[right_size].begin(), right_sum[right_size].end());
        }

        for (int left_size = 1; left_size < half_len; left_size++) {
            for (int left_sum_value : left_sum[left_size]) {
                int desired_right_sum = (total_sum - 2 * left_sum_value) / 2;
                int right_size = half_len - left_size;
                std::vector<int>& right_sums = right_sum[right_size];

                std::vector<int>::iterator itr = std::lower_bound(right_sums.begin(), right_sums.end(), desired_right_sum);
                if (itr != right_sums.end()) {
                    min_difference = std::min(min_difference, abs(total_sum - 2 * left_sum_value - 2 * (*itr)));
                }
                if (itr != right_sums.begin()) {
                    itr--;
                    min_difference = std::min(min_difference, abs(total_sum - 2 * left_sum_value - 2 * (*itr)));
                }
            }
        }

        return min_difference;
}


int main() {
  
//TEST
std::vector<int> nums_1 = {1, 2, 3, 4};
int expected_1 = 0;
int result_1 = MinimumDifference(nums_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> nums_2 = {-36,36};
int expected_2 = 72;
int result_2 = MinimumDifference(nums_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> nums_3 = {0, 0, 0, 0};
int expected_3 = 0;
int result_3 = MinimumDifference(nums_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> nums_4 = {3,9,7,3};
int expected_4 = 2;
int result_4 = MinimumDifference(nums_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> nums_5 = {-5, 5, -5, 5, -5, 5};
int expected_5 = 10;
int result_5 = MinimumDifference(nums_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> nums_6 = {100, 100, 50, -50, 25, 25, 10, -10};
int expected_6 = 0;
int result_6 = MinimumDifference(nums_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> nums_7 = {9999999, -9999999, 5000000, -5000000, 0, 999, 1, -10000};
int expected_7 = 9000;
int result_7 = MinimumDifference(nums_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> nums_8 = {5, 4, 3, 2, 1, 0, -1, -2, -3, 777, -5, -6, -7, -8, -9, -1000};
int expected_8 = 167;
int result_8 = MinimumDifference(nums_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> nums_9 = {10000000, -10000000, 9999999, -9999999, 8888888, -8888888, 7777777, -7777777};
int expected_9 = 0;
int result_9 = MinimumDifference(nums_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<int> nums_10 = {1};
try {
   
    MinimumDifference(nums_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_11 = {1, 2, 3};
try {
    
    MinimumDifference(nums_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_12 = {-10000000,-999999999};
try {
   
    MinimumDifference(nums_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_13 = {10000001, -10000001, 10000002, -10000002};
try {
    MinimumDifference(nums_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_14 = {1, 2, 3, 4, 5};
try {
   
    MinimumDifference(nums_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_15 = {};
try {
  
    MinimumDifference(nums_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_16 = {1, 2, 3};
try {
   
    MinimumDifference(nums_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_17 = {-10000000, 1000000000, -9999999, 9999999};
try {
   
    MinimumDifference(nums_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> nums_18(1e4,1);
try {
    MinimumDifference(nums_18);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
