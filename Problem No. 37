/*

Link : https://leetcode.com/problems/making-a-large-island/description/

Jimmy was a young programmer, always eager to solve new challenges. One day, he came across a fascinating problem while working on a grid-based puzzle.

Jimmy was given a binary matrix called grid of size len x len, where each cell was either a 0 or a 1. His task was to transform this grid to maximize the size of
an island. An island, he knew, was a group of 1s connected in any of the four cardinal directions: up, down, left, and right.

To make this happen, Jimmy was allowed to change at most one 0 in the grid to a 1. His goal was to find out the largest possible island size he could achieve 
with this single transformation.

With a twinkle in his eye, Jimmy sat down at his computer, ready to dive into the code and discover the optimal solution to this intriguing puzzle.

Help Jimmy create a C++ function LargestIsland that will return the size of the largest island in grid after applying this operation.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type:

vector<vector<int>> denoting the 2D vector grid

Input Constraints:

1.The length of grid (denoted as len) should be at least 1 and at most 500 inclusive.
2.Each row grid[i] should have a length of len.
3.Each cell grid[i][j] is either 0 or 1.

*/


#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

class DisjointSet {
public:
    std::vector<int> parent, size;

    DisjointSet(int total_elements) {
        parent.resize(total_elements + 1);
        size.resize(total_elements + 1);
        for (int i = 0; i <= total_elements; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int FindUltimateParent(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = FindUltimateParent(parent[node]);
    }

    void UnionBySize(int element_u, int element_v) {
        int ultimate_parent_u = FindUltimateParent(element_u);
        int ultimate_parent_v = FindUltimateParent(element_v);
        if (ultimate_parent_u == ultimate_parent_v) return;
        if (size[ultimate_parent_u] < size[ultimate_parent_v]) {
            parent[ultimate_parent_u] = ultimate_parent_v;
            size[ultimate_parent_v] += size[ultimate_parent_u];
        } else {
            parent[ultimate_parent_v] = ultimate_parent_u;
            size[ultimate_parent_u] += size[ultimate_parent_v];
        }
    }
};

    int LargestIsland(std::vector<std::vector<int>>& grid) {
       
        if (grid.size() < 1 || grid.size() > 500) {
        throw std::invalid_argument("The length of the grid should be at least 1 and at most 500 inclusive.");
    }

    size_t len = grid.size();
    for (size_t i = 0; i < len; ++i) {
        if (grid[i].size() != len) {
            throw std::invalid_argument("Each row in the grid should have a length equal to the length of the grid.");
        }
    }

  
    for (size_t i = 0; i < len; ++i) {
        for (size_t j = 0; j < grid[i].size(); ++j) {
            if (grid[i][j] != 0 && grid[i][j] != 1) {
                throw std::invalid_argument("Each cell in the grid should be either 0 or 1.");
            }
        }
    }
      
        int grid_size = grid.size();
        DisjointSet disjoint_set(grid_size * grid_size);
        std::vector<std::pair<int, int>> directions = {{0, 1}, {0, -1}, {1, 0}, { -1, 0}};
        
        for (int row = 0; row < grid_size; row++) {
            for (int col = 0; col < grid_size; col++) {
                if (grid[row][col] == 1) {
                    for (std::pair<int, int> direction : directions) {
                        int adjacent_row = direction.first + row;
                        int adjacent_col = direction.second + col;
                        if (adjacent_row >= 0 && adjacent_row < grid_size && adjacent_col >= 0 && adjacent_col < grid_size && grid[adjacent_row][adjacent_col] == 1) {
                            disjoint_set.UnionBySize(grid_size * adjacent_row + adjacent_col, grid_size * row + col);
                        }
                    }
                }
            }
        }

        int largest_island = 0;
        for (int row = 0; row < grid_size; row++) {
            for (int col = 0; col < grid_size; col++) {
                if (grid[row][col] == 0) {
                    std::set<int> unique_parents;
                    for (std::pair<int, int> direction : directions) {
                        int adjacent_row = direction.first + row;
                        int adjacent_col = direction.second + col;
                        if (adjacent_row >= 0 && adjacent_row < grid_size && adjacent_col >= 0 && adjacent_col < grid_size && grid[adjacent_row][adjacent_col] == 1) {
                            unique_parents.insert(disjoint_set.FindUltimateParent(grid_size * adjacent_row + adjacent_col));
                        }
                    }
                    int current_island_size = 1;
                    for (int parent : unique_parents) {
                        current_island_size += disjoint_set.size[parent];
                    }
                    largest_island = std::max(largest_island, current_island_size);
                }
            }
        }
        for (int index = 0; index < grid_size * grid_size; index++) {
            largest_island = std::max(largest_island, disjoint_set.size[disjoint_set.FindUltimateParent(index)]);
        }
        return largest_island;
    }

int main(){
  
  // TEST
std::vector<std::vector<int>> grid_1 = {{0,1,0},{1,0,1},{0,1,0}};
int expected_1 = 5;
int result_1 = LargestIsland(grid_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::vector<std::vector<int>> grid_2 = {{0,1,1,0},{0,0,0,1},{0,1,1,0},{1,0,0,1}};
int expected_2 = 6;
int result_2 = LargestIsland(grid_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::vector<std::vector<int>> grid_3 = {{0}};
int expected_3 = 1;
int result_3 = LargestIsland(grid_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::vector<std::vector<int>> grid_4 = {{1}};
int expected_4 = 1;
int result_4 = LargestIsland(grid_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::vector<std::vector<int>> grid_5 = {{1,0}, {1,0}};
int expected_5 = 3;
int result_5 = LargestIsland(grid_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::vector<std::vector<int>> grid_6 = {};
try {
    LargestIsland(grid_6);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> grid_7 = {{1,1,0,0,0},{0,0,1,0,1},{1,1,1,1,1},{0,0,1,1,1},{0,0,0,1,0}};
int expected_7 = 14;
int result_7 = LargestIsland(grid_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::vector<std::vector<int>> grid_8 = {{2,0},{1,5}};
try {
    LargestIsland(grid_8);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> grid_9 = { {0, 0},{-1000000001, -1000000001}};
try {
    LargestIsland(grid_9);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> grid_10 = { {0, 0}, {1}};
try {
    LargestIsland(grid_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> grid_11 = { {0, 0}, {1, 1}, {2, 2}, {3, 3}, {4, 4}, {4,4}};
try {
    LargestIsland(grid_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> grid_12(1000, std::vector<int>(1000,0));
try {
    LargestIsland(grid_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

  return 0;
}

