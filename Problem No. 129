/*
Link: https://codeforces.com/problemset/problem/771/D
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <stdexcept>
#include <cassert>

int Minimum(int a_val, int b_val) {
    return a_val < b_val ? a_val : b_val;
}

int CalculateR(int o_index, int v_count, int k_count, int x_count, const std::vector<std::vector<int>>& count_matrix) {
    return o_index - Minimum(count_matrix[o_index][0], v_count) - Minimum(count_matrix[o_index][1], k_count) - Minimum(count_matrix[o_index][2], x_count);
}

int Solve(int len, const std::string& str) {
    if (len < 1 || len > 75) {
        throw std::invalid_argument("Invalid string length");
    }
   
    for (char character : str) {
        if (character < 'A' || character > 'Z') {
            throw std::invalid_argument("Invalid character in string");
        }
    }
    
    std::vector<std::vector<int>> positions(len + 1, std::vector<int>(3, 0));
    std::vector<std::vector<int>> counts(len + 1, std::vector<int>(3, 0));
    int v_count = 0, k_count = 0, x_count = 0;

    for (int i = 1; i <= len; ++i) {
        for (int j = 0; j < 3; ++j) counts[i][j] = counts[i - 1][j];
        if (str[i-1] == 'V') {
            v_count++;
            positions[v_count][0] = i;
            counts[i][0]++;
        } else if (str[i-1] == 'K') {
            k_count++;
            positions[k_count][1] = i;
            counts[i][1]++;
        } else {
            x_count++;
            positions[x_count][2] = i;
            counts[i][2]++;
        }
    }

    std::vector<std::vector<std::vector<std::vector<int>>>> dp_table(v_count + 1, std::vector<std::vector<std::vector<int>>>(k_count + 1, std::vector<std::vector<int>>(x_count + 1, std::vector<int>(2, 0x3f3f3f3f))));
    dp_table[0][0][0][0] = 0;

    for (int i = 0; i <= v_count; ++i) {
        for (int j = 0; j <= k_count; ++j) {
            for (int k = 0; k <= x_count; ++k) {
                int minimum_q = Minimum(dp_table[i][j][k][0], dp_table[i][j][k][1]);
                if (i + 1 <= v_count) dp_table[i + 1][j][k][1] = Minimum(dp_table[i + 1][j][k][1], minimum_q + CalculateR(positions[i + 1][0], i + 1, j, k, counts));
                if (j + 1 <= k_count) dp_table[i][j + 1][k][0] = Minimum(dp_table[i][j + 1][k][0], dp_table[i][j][k][0] + CalculateR(positions[j + 1][1], i, j + 1, k, counts));
                if (k + 1 <= x_count) dp_table[i][j][k + 1][0] = Minimum(dp_table[i][j][k + 1][0], minimum_q + CalculateR(positions[k + 1][2], i, j, k + 1, counts));
            }
        }
    }

    return Minimum(dp_table[v_count][k_count][x_count][0], dp_table[v_count][k_count][x_count][1]);
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <stdexcept>
#include <cassert>

int main() {
   
    return 0;
}

