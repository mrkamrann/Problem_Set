/*
Link: https://codeforces.com/problemset/problem/771/D

Yash prepares problems for a programming competition. Of course, it would be unprofessional to mention the sponsor's name in the statement. Yash takes it 
seriously and he is going to change some words. To make it still possible to read, he will try to modify each word as little as possible.

Yash has a string str that consists of uppercase English letters. In one move, he can swap two adjacent letters of the string. For example, he can transform a 
string "ABBC" into "BABC" or "ABCB" in one move.

Yash wants to obtain a string without a substring "VK" (i.e. there should be no letter 'V' immediately followed by letter 'K'). It can be easily proved that 
it's possible for any initial string str.

What is the minimum possible number of moves Yash can do?

You are given an integer len  â€” the length of the string, and a string str, consisting of uppercase English letters. The length of the string is equal to len.

Return one number, denoting the minimum possible number of moves Yash can do, in order to obtain a string without a substring "VK".

Create a C++ Function MinimumMoves that will return an integer denoting the minimum possible number of moves Yash can do.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type:

A string denoting str

Input Constraints:

The length of str should be at least 1 and at most 75 inclusive.
Each character of str should be an uppercase English letter.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <stdexcept>
#include <cassert>

int Minimum(int a_val, int b_val) {
    return a_val < b_val ? a_val : b_val;
}

int CalculateR(int o_index, int v_count, int k_count, int x_count, const std::vector<std::vector<int>>& count_matrix) {
    return o_index - Minimum(count_matrix[o_index][0], v_count) - Minimum(count_matrix[o_index][1], k_count) - Minimum(count_matrix[o_index][2], x_count);
}

int MinimumMoves(const std::string& str) {

   int len = str.size();

    if (len < 1 || len > 75) {
        throw std::invalid_argument("Invalid string length");
    }
   
    for (char character : str) {
        if (character < 'A' || character > 'Z') {
            throw std::invalid_argument("Invalid character in string");
        }
    }
    
    std::vector<std::vector<int>> positions(len + 1, std::vector<int>(3, 0));
    std::vector<std::vector<int>> counts(len + 1, std::vector<int>(3, 0));
    int v_count = 0, k_count = 0, x_count = 0;

    for (int i = 1; i <= len; ++i) {
        for (int j = 0; j < 3; ++j) counts[i][j] = counts[i - 1][j];
        if (str[i-1] == 'V') {
            v_count++;
            positions[v_count][0] = i;
            counts[i][0]++;
        } else if (str[i-1] == 'K') {
            k_count++;
            positions[k_count][1] = i;
            counts[i][1]++;
        } else {
            x_count++;
            positions[x_count][2] = i;
            counts[i][2]++;
        }
    }

    std::vector<std::vector<std::vector<std::vector<int>>>> dp_table(v_count + 1, std::vector<std::vector<std::vector<int>>>(k_count + 1, std::vector<std::vector<int>>(x_count + 1, std::vector<int>(2, 0x3f3f3f3f))));
    dp_table[0][0][0][0] = 0;

    for (int i = 0; i <= v_count; ++i) {
        for (int j = 0; j <= k_count; ++j) {
            for (int k = 0; k <= x_count; ++k) {
                int minimum_q = Minimum(dp_table[i][j][k][0], dp_table[i][j][k][1]);
                if (i + 1 <= v_count) dp_table[i + 1][j][k][1] = Minimum(dp_table[i + 1][j][k][1], minimum_q + CalculateR(positions[i + 1][0], i + 1, j, k, counts));
                if (j + 1 <= k_count) dp_table[i][j + 1][k][0] = Minimum(dp_table[i][j + 1][k][0], dp_table[i][j][k][0] + CalculateR(positions[j + 1][1], i, j + 1, k, counts));
                if (k + 1 <= x_count) dp_table[i][j][k + 1][0] = Minimum(dp_table[i][j][k + 1][0], minimum_q + CalculateR(positions[k + 1][2], i, j, k + 1, counts));
            }
        }
    }

    return Minimum(dp_table[v_count][k_count][x_count][0], dp_table[v_count][k_count][x_count][1]);
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <stdexcept>
#include <cassert>

int main() {
   
  // TEST
std::string str_1 = "BVVKV";
int expected_1 = 2;
int result_1 = MinimumMoves(str_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
std::string str_2 = "VVKEVKK";
int expected_2 = 3;
int result_2 = MinimumMoves(str_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
std::string str_3 = "VKVKVVVKVOVKVQKKKVVK";
int expected_3 = 8;
int result_3 = MinimumMoves(str_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
std::string str_4 = "VKVK";
int expected_4 = 3;
int result_4 = MinimumMoves(str_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
std::string str_5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHWXYZABC";
int expected_5 = 0;
int result_5 = MinimumMoves(str_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
std::string str_6 = "HELLO";
int expected_6 = 0;
int result_6 = MinimumMoves(str_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
std::string str_7 = "THISISATESTSTRING";
int expected_7 = 0;
int result_7 = MinimumMoves(str_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
std::string str_8 = "VAKVAKLIMAKVVVKKK";
int expected_8 = 4;
int result_8 = MinimumMoves(str_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::string str_9 = "VVKAVZVAAZ";
int expected_9 = 1;
int result_9 = MinimumMoves(str_9);
assert(result_9 == expected_9);
// TEST_END

  
// TEST
std::string str_10 = "";
try {
    MinimumMoves(str_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END


// TEST
std::string str_11(80,'A');
try {
    MinimumMoves(str_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END


// TEST
std::string str_12 = "ABC1";
try {
    MinimumMoves(str_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END


// TEST
  
std::string str_13 = "AbC";
try {
    MinimumMoves(str_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
    return 0;
}

