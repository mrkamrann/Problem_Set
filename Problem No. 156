/*
Link: https://codeforces.com/contest/883/problem/D

Riyan is playing a game where the field is represented by a line of cells square cells. In some cells, there are packmen, in some cells there are asterisks,
and the rest of the cells are empty. Packmen eat asterisks.

Before the game starts, Riyan can choose a movement direction, left or right, for each packman. Once the game begins, all the packmen simultaneously start moving 
according to their directions. A packman can't change the given direction.

Once a packman enters a cell containing an asterisk, the packman immediately eats the asterisk. Once the packman leaves the cell, it becomes empty. Each packman 
moves at a speed of 1 cell per second. If a packman enters a border cell, the packman stops. Packmen do not interfere with the movement of other packmen; 
any number of packmen can move in any direction in one cell.

Riyan's task is to assign a direction to each packman so that they eat the maximal number of asterisks. If there are multiple ways to assign directions to eat 
the maximal number of asterisks, he should choose the way which minimizes the time to do that.

Given an integer number cells  — the number of cells in the game field and a string of size cells named field. If the i-th character is '.', the i-th cell is empty.
If the i-th character is '*', the i-th cell contains an asterisk. If the i-th character is 'P', the i-th cell contains a packman. 
The field contains at least one asterisk and at least one packman.

Return two integer numbers — the maximal number of asterisks packmen can eat and the minimal time to do it.

Create a C++ function MaxAsterisksAndTime that will return a pair of integers denoting the maximal number of asterisks packmen can eat and the minimal 
time to do it.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type :

A string denoting field

Input Constraints:

cells should be at least 2 and at most 1,000,000 inclusive.
The string field should have a length equal to cells.
The string should contain at least one 'P' and at least one '*'.
The string can contain '.', '*', and 'P' only.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

bool None(int left, int right, const std::vector<int>& sum) {
    return left > right || sum[left - 1] == sum[right];
}

void Update(int& current_max, int value) {
    if (current_max < value) {
        current_max = value;
    }
}

bool Check(int time, int cells, int packman_count, const std::vector<int>& packman_positions, const std::vector<int>& asterisk_sum) {
    std::vector<int> dp_table(packman_count + 1, 0);
    for (int i = 0; i < packman_count; i++) {
        if (None(dp_table[i] + 1, packman_positions[i] - time - 1, asterisk_sum)) {
            Update(dp_table[i + 1], packman_positions[i]);
        }
        if (None(dp_table[i] + 1, packman_positions[i] - 1, asterisk_sum)) {
            Update(dp_table[i + 1], packman_positions[i] + time);
        }
        if (i > 0 && None(dp_table[i - 1] + 1, packman_positions[i] - time - 1, asterisk_sum)) {
            Update(dp_table[i + 1], packman_positions[i - 1] + time);
        }
    }
    return None(dp_table[packman_count] + 1, cells, asterisk_sum);
}

std::pair<int, int> MaxAsterisksAndTime(int cells, const std::string& field) {
    if (cells < 2 || cells > 1000000) {
        throw std::invalid_argument("Cells out of range");
    }
    for (char character : field) {
        if (character != '*' && character != '.' && character != 'p') {
            throw std::invalid_argument("Field contains invalid characters");
        }
    }
    if (field.find('*') == std::string::npos || field.find('p') == std::string::npos) {
        throw std::invalid_argument("Field must contain at least one asterisk and one packman");
    }

    std::vector<int> packman_positions(cells + 1), asterisk_sum(cells + 1, 0);
    int packman_count = 0;
    int packman_position = -1;

    for (int i = 0; i < cells; i++) {
        if (field[i] == 'P') {
            packman_position = packman_positions[packman_count++] = i + 1;
        }
    }

    if (packman_count == 1) {
        int left_asterisks = 0, right_asterisks = 0;
        int left_position = -1, right_position = -1;
        for (int i = packman_position - 1; i > 0; i--) {
            if (field[i - 1] == '*') {
                left_asterisks++;
                left_position = i;
            }
        }
        for (int i = packman_position; i < cells; i++) {
            if (field[i] == '*') {
                right_asterisks++;
                right_position = i + 1;
            }
        }
        if (left_asterisks != right_asterisks) {
            return {std::max(left_asterisks, right_asterisks), left_asterisks > right_asterisks ? packman_position - left_position : right_position - packman_position};
        } else {
            return {left_asterisks, std::min(packman_position - left_position, right_position - packman_position)};
        }
    }

    for (int i = 1; i <= cells; i++) {
        asterisk_sum[i] = asterisk_sum[i - 1] + (field[i - 1] == '*');
    }

    int left = 0, right = cells, answer = cells;
    while (left <= right) {
        int middle = (left + right) / 2;
        if (Check(middle, cells, packman_count, packman_positions, asterisk_sum)) {
            right = middle - 1;
            answer = middle;
        } else {
            left = middle + 1;
        }
    }

    return {asterisk_sum[cells], answer};
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


int main() {
    int cells;
    std::cin >> cells;
    std::string field;
    std::cin >> field;

    std::pair<int, int> result = Solve(cells, field);
    std::cout << result.first << " " << result.second << std::endl;
    return 0;
}

