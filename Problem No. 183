/*
Link: https://codeforces.com/contest/1701/problem/F

Albert is working with a set of points on a coordinate line, initially empty. He has to process queries of three types:

Add a point.
Remove a point.

Calculate the number of beautiful triples consisting of points belonging to the set.

A triple of points i, j, and k on a coordinate line is called beautiful if i < j < k and k - i ≤ d.

You are given two integers queries_count and distance  — the number of queries and the parameter for defining if a triple is beautiful, respectively.

Also,  queries_count integers query_1, query_2, ..., query_q  denoting the queries. The integer query_i denotes the i-th query in the following way:

If the point query_i belongs to the set, remove it; otherwise, add it.

After adding or removing the point, print the number of beautiful triples.

For each query, return one integer — the number of beautiful triples after processing the respective query.

Create a C++ function ProcessQueries that will return a vector of long long denoting the number of beautiful triples after each query.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An Integer denoting distance
vector<int> denoting queries

Input Constraints

The length of queries(queries_count) should be at least 1 and at most 2 * 10^5 inclusive.
Each value of queries should be in the range [1, 2 * 10^5] inclusive.
The values for distance should be in the range [1, 2 * 10^5] inclusive.

*/

#include <vector>
#include <iostream>
#include <algorithm>
#include <stdexcept>
#include <cassert>

struct SqrtDecomposition {
    long long num_elements, block_size, answer;
    std::vector<long long> vec_1, vec_2, block_sum, block_add, block_sum_product, block_sum_square;

    void Build(int elements_count, int block_size_param) {
        num_elements = elements_count;
        block_size = block_size_param;
        vec_1.assign(num_elements, 0);
        vec_2.assign(num_elements, 0);
        block_sum.assign((num_elements - 1) / block_size + 1, 0);
        block_add.assign((num_elements - 1) / block_size + 1, 0);
        block_sum_product.assign((num_elements - 1) / block_size + 1, 0);
        block_sum_square.assign((num_elements - 1) / block_size + 1, 0);
    }

    long long Update(int left, int right, long long value) {
        int block_id = (left - 1) / block_size;
        vec_1[left - 1] += value;
        block_sum[block_id] += value;
        block_sum_product[block_id] += value * vec_2[left - 1];
        block_sum_square[block_id] += value * vec_2[left - 1] * vec_2[left - 1];
        
        for (int i = left / block_size, block_left, block_right; i <= right / block_size && left <= right; i++) {
            block_left = i * block_size;
            block_right = std::min(num_elements - 1, block_left + block_size - 1);
            if (left <= block_left && block_right <= right) {
                block_add[i] += value;
            } else {
                block_sum_product[i] = block_sum_square[i] = 0;
                for (int j = std::max(left, block_left); j <= std::min(right, block_right); j++) {
                    vec_2[j] += value;
                }
                for (int j = block_left; j <= block_right; j++) {
                    if (vec_1[j]) {
                        block_sum_product[i] += vec_2[j];
                        block_sum_square[i] += vec_2[j] * vec_2[j];
                    }
                }
            }
        }
        answer = 0;
        for (int i = 0; i <= (num_elements - 1) / block_size; i++) {
            answer += block_sum_square[i] + (2 * block_add[i] - 1) * block_sum_product[i] + (block_add[i] * block_add[i] - block_add[i]) * block_sum[i];
        }
        return answer / 2;
    }
};

std::vector<long long> ExecuteQueries(int queries_count, int distance, std::vector<int>& vec, std::vector<int>& queries) {
    int num_elements = vec.size();
    SqrtDecomposition sqrt_decomp;
    sqrt_decomp.Build(num_elements, 450);
    std::vector<long long> result;
    int query_index = 0;
    
    for (int x_val; queries_count; queries_count--) {
        x_val = queries[query_index];
        x_val--;
        query_index++;
        long long y_val = sqrt_decomp.Update(x_val + 1, std::min(num_elements - 1, x_val + distance), sqrt_decomp.vec_1[x_val] ? -1 : 1);
        result.push_back(y_val);
    }
    return result;
}

std::vector<long long> ProcessQueries (int distance, std::vector<int>& queries) {
  int queries_count = queries.size();

    if (queries_count < 1 || queries_count > 200000 || distance < 1 || distance > 200000) {
        throw std::invalid_argument("Invalid input parameters.");
    }
    for (int i = 0; i < queries_count; ++i) {
        if (queries[i] < 1 || queries[i] > 200000) {
            throw std::invalid_argument("Invalid query value.");
        }
    }
    int num_elements = 200000;
    std::vector<int> vec(num_elements, 0);
    return ExecuteQueries(queries_count, distance, vec, queries);
}

#include <vector>
#include <iostream>
#include <algorithm>
#include <stdexcept>
#include <cassert>

int main() {
  
  //TEST
    int distance_1 = 5;
    std::vector<int> queries_1 = {8,5,3,2,1,5,6};
    std::vector<long long> expected_1 = {0,0,1,2,5,1,5};
    std::vector<long long> result_1 = ProcessQueries(distance_1, queries_1);
    assert(result_1 == expected_1);
    //TEST_END

    //TEST
    int distance_2 = 2;
    std::vector<int> queries_2 = {10,6,3,1,2,8,6,7,5};
    std::vector<long long> expected_2 = {0,0,0,0,1,1,1,1,1};
    std::vector<long long> result_2 = ProcessQueries(distance_2, queries_2);
    assert(result_2 == expected_2);
    //TEST_END

    //TEST
    int distance_3 = 3;
    std::vector<int> queries_3 = {5,4,3,2,1,6,8,9,7};
    std::vector<long long> expected_3 = {0,0,1,4,7,10,11,12,19};
    std::vector<long long> result_3 = ProcessQueries(distance_3, queries_3);
    assert(result_3 == expected_3);
    //TEST_END

    //TEST
    int distance_4 = 2;
    std::vector<int> queries_4 = {2, 3};
    std::vector<long long> expected_4 = {0,0};
    std::vector<long long> result_4 = ProcessQueries(distance_4, queries_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    int distance_5 = 6;
    std::vector<int> queries_5 = {1,5,3,2,1,1,1,6,3,2,1}; 
    std::vector<long long> expected_5 = {0,0,1,4,1,4,1,4,1,0,1};
    std::vector<long long> result_5 = ProcessQueries(distance_5, queries_5);
    assert(result_5 == expected_5);
    //TEST_END
  
     //TEST
    int distance_6 = 2;
    std::vector<int> queries_6 = {1,2,5,6,4,2,3};
    std::vector<long long> expected_6 = {0,0,0,0,1,1,2};
    std::vector<long long> result_6 = ProcessQueries(distance_6, queries_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    int distance_7 = 2;
    std::vector<int> queries_7 = {2, 4, 6, 1, 1};
    std::vector<long long> expected_7 = {0,0,0,0,0};
    std::vector<long long> result_7 = ProcessQueries(distance_7, queries_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    int distance_8 = 2;
    std::vector<int> queries_8 = {1, 2, 3, 4, 5};
    std::vector<long long> expected_8 = {0,0,1,2,3};
    std::vector<long long> result_8 = ProcessQueries(distance_8, queries_8);
   assert(result_8 == expected_8);
    //TEST_END

    //TEST
    int distance_9 = 6;
    std::vector<int> queries_9 = {10,9,8,7,6,5,4,3,2,1};
    std::vector<long long> expected_9 = {0,0,1,4,10,20,35,50,65,80};
    std::vector<long long> result_9 = ProcessQueries(distance_9, queries_9);
     assert(result_9 == expected_9);
    //TEST_END
  
    //TEST
    int distance_10 = 2;
    std::vector<int> queries_10(1e6, 1);
    try {
        ProcessQueries(distance_10, queries_10);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int distance_11 = 200001; 
    std::vector<int> queries_11 = {1, 2, 3};
    try {
        ProcessQueries(distance_11, queries_11);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int distance_12 = 1;
    std::vector<int> queries_12 = {0, 2, 3}; 
    try {
        ProcessQueries(distance_12, queries_12);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int distance_13 = 1;
    std::vector<int> queries_13 = {1, 2, 200001};
    try {
        ProcessQueries(distance_13, queries_13);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END


    //TEST
    int distance_14 = -100; 
    std::vector<int> queries_14 = {1, 2, 3};
    try {
        ProcessQueries(distance_14, queries_14);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    int distance_15 = 1;
    std::vector<int> queries_15 = {-1, 2, 3};
    try {
        ProcessQueries(distance_15, queries_15);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END


    return 0;
}
