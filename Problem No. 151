/*
Link: https://codeforces.com/contest/1063/problem/F

Rahul is given a sequence of strings t_1, t_2, ..., t_k, which he calls a journey of length k. For each i > 1, t_i is a substring of t_{i-1}, and the length 
of t_i is strictly less than the length of t_{i-1}. For example, {ab, b} is a journey, but {ab, c} and {a, a} are not.

Rahul defines a journey on a string str as a journey t_1, t_2, ..., t_k such that all its parts can be nested inside str in such a way that there exists a 
sequence of strings u_1, u_2, ..., u_{k+1} (each of these strings can be empty) and str = u_1 t_1 u_2 t_2 ... u_k t_k u_{k+1}. For example, {ab, b} is a journey 
on the string abb, but not on bab, because the journey strings t_i should appear from left to right.

The length of a journey on a string is the number of strings in it. Rahul needs to determine the maximum possible length of a journey on the given string str.

You are given a single string str of length len, consisting of len lowercase Latin letters.

Return one number â€” the maximum possible length of a string journey on str.

Create a C++ function FindMaxJourneyLength that will return an integer denoting the maximum possible length of a journey on the given string str.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

A string denoting str

Input Constraints:

The length of str should be at least 1 and at most 50000 inclusive.
The string str should consist only of lowercase Latin letters.



*/

//reduce constraints

#include <iostream>
#include <vector>
#include <bitset>
#include <cmath>
#include <stdexcept>
#include <cassert>
#include <string>

int FindMaxJourneyLength(const std::string &str) {

    int len = str.size();

    if (len < 1 || len > 50000) {
        throw std::invalid_argument("len must be between 1 and 50000.");
    }

    for (char character : str) {
        if (character < 'a' || character > 'z') {
            throw std::invalid_argument("String must contain only lowercase Latin letters.");
        }
    }

    int max_moves = static_cast<int>(std::ceil(std::sqrt(2 * len) + 0.001));
    int result = 1;

    std::vector<std::vector<bool>> feasible(len + 1, std::vector<bool>(max_moves + 1, false));
    std::vector<int> hash_values(len + 1, 0);
    std::bitset<9114515> visited;

    for (int i = 0; i < len; ++i) {
        feasible[i][1] = true;
        hash_values[i] = str[i];
    }

    for (int j = 2, k = 2; j <= max_moves; ++j, k += j) {
        for (int i = len - k; i >= 0; --i) {
            if (feasible[i + j][j - 1]) {
                visited[hash_values[i + j]] = true;
            }
            if (visited[hash_values[i]] || visited[hash_values[i + 1]]) {
                feasible[i][j] = true;
                result = j;
            }
        }
        visited.reset();
        for (int i = 0; i <= len - k - 1; ++i) {
            hash_values[i] = (131 * hash_values[i] + str[i + j - 1]) % 9114514;
        }
        if (result < j) {
            break;
        }
    }

    return result;
}

#include <iostream>
#include <vector>
#include <bitset>
#include <cmath>
#include <stdexcept>
#include <cassert>
#include <string>

int main() {
    int len;
    std::cin >> len;

    std::string str;
    std::cin >> str;

    int result = FindMaxJ(str);
    std::cout << result << std::endl;

    return 0;
}

