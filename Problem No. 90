/*
Link: https://leetcode.com/problems/earliest-second-to-mark-indices-ii/description/

Julie is working on a problem involving two 1-indexed integer vectors, nums and change_indices, with lengths len_nums and len_indices, respectively. 
Her task is to mark all indices in the vector nums under the following conditions:

Initially, all indices in nums are unmarked. Julie can perform one of the following operations each second, from second 1 to len_indices:

1. Choose an index i in the range [1, len_nums] and decrement nums[i] by 1.
2. Set nums[change_indices[s]] to any non-negative value at second s.
3. Choose an index i in the range [1, len_nums] where nums[i] is equal to 0, and mark index i.
4. Do nothing.

Julie needs to determine the earliest second (in the range [1, len_indices]) when all indices in nums can be marked optimally. If it is impossible to mark all 
indices within the given time, she should return -1.

Julieâ€™s task is to find the earliest second when all indices in nums can be marked, or determine if it is impossible.

Create a C++ Function EarliestSecondToMarkIndices that will return an integer denoting the earliest second when all indices can be marked, 
or -1 if it is impossible.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

A vector<int> denoting nums.
A vector<int> denoting change_indices.

Input Constraints:

The length of nums (len_nums) should be at least 1 and at most inclusive.
Each value in nums should be in the range [0, 10^9] inclusive.
The length of change_indices (len_indices) should be at least 1 and at most 5000 inclusive.
Each value in change_indices should be in the range [1, len_nums] inclusive.

*/

#include <vector>
#include <set>
#include <tuple>
#include <stdexcept>
#include <algorithm>
#include <iostream>
#include <cassert>
#include <functional>


void AddToTree(std::vector<int>& segment_tree, int i, int value, int node, int start, int end) {
    if (start == end) {
        segment_tree[node] += value;
        return;
    }
    int mid_point = start + (end - start) / 2;
    if (i <= mid_point) AddToTree(segment_tree, i, value, 2 * node, start, mid_point);
    else AddToTree(segment_tree, i, value, 2 * node + 1, mid_point + 1, end);

    segment_tree[node] = segment_tree[2 * node] + segment_tree[2 * node + 1];
}


int GetFromTree(std::vector<int>& segment_tree, int i, int node, int start, int end) {
    if (i <= start) return segment_tree[node];
    if (i > end) return 0;
    int mid_point = start + (end - start) / 2;
    return GetFromTree(segment_tree, i, 2 * node, start, mid_point) + GetFromTree(segment_tree, i, 2 * node + 1, mid_point + 1, end);
}


bool CheckValidity(int mid, const std::vector<int>& nums, const std::vector<int>& last_index_marker) {
    std::vector<std::tuple<int, int, int>> data;
    int len_nums = nums.size();

    for (int i = 0; i < len_nums; ++i) {
        if (last_index_marker[i] >= mid - 1) continue;
        data.push_back(std::make_tuple(nums[i], i, last_index_marker[i]));
    }

    std::sort(data.begin(), data.end(), [](const std::tuple<int, int, int>& val_a, const std::tuple<int, int, int>& val_b) {
        if (std::get<0>(val_a) == std::get<0>(val_b)) return std::get<2>(val_a) < std::get<2>(val_b);
        return std::get<0>(val_a) > std::get<0>(val_b);
    });

    std::vector<int> segment_tree(4 * mid, 0);

    std::set<int> available_positions;
    for (int i = 0; i < mid; ++i) available_positions.insert(i);

    std::set<int> reset_indices;
    for (std::tuple<int, int, int>& elem : data) {
        int value = std::get<0>(elem);
        int num_index = std::get<1>(elem);
        int change_index = std::get<2>(elem);

        int used_positions = GetFromTree(segment_tree, change_index, 1, 0, mid - 1);
        if (used_positions + 2 > mid - change_index) continue;

        reset_indices.insert(num_index);

        int count = 1;
        if (available_positions.find(change_index) == available_positions.end()) {
            available_positions.insert(change_index);
            AddToTree(segment_tree, change_index, -1, 1, 0, mid - 1);
            count += 1;
        }

        available_positions.erase(change_index);
        AddToTree(segment_tree, change_index, 1, 1, 0, mid - 1);

        while (count-- > 0) {
            std::set<int>::iterator it = available_positions.lower_bound(change_index + 1);
            AddToTree(segment_tree, *it, 1, 1, 0, mid - 1);
            available_positions.erase(it);
        }
    }

    int64_t sum = 2 * reset_indices.size();
    for (int i = 0; i < len_nums; ++i) {
        if (reset_indices.find(i) != reset_indices.end()) continue;
        sum += nums[i];
    }

    return sum + len_nums - reset_indices.size() <= mid;
}

int EarliestSecondToMarkIndices(std::vector<int>& nums, std::vector<int>& change_indices) {
    int len_nums = nums.size();
    int len_indices = change_indices.size();

    if (len_nums < 1 || len_nums > 5000) {
        throw std::invalid_argument("The length of nums must be between 1 and 5000 inclusive.");
    }

    for (int value : nums) {
        if (value < 0 || value > 1000000000) {
            throw std::invalid_argument("Each value in nums must be between 0 and 1000000000 inclusive.");
        }
    }

    if (len_indices < 1 || len_indices > 5000) {
        throw std::invalid_argument("The length of change_indices must be between 1 and 5000 inclusive.");
    }

    for (int index : change_indices) {
        if (index < 1 || index > len_nums) {
            throw std::invalid_argument("Each value in change_indices must be between 1 and the length of nums inclusive.");
        }
    }

    std::vector<int> last_index_marker(len_nums, len_indices);

    for (int j = len_indices - 1; j >= 0; --j) {
        int current_index = change_indices[j] - 1;
        if (nums[current_index] == 0) continue;
        last_index_marker[current_index] = j;
    }

    if (!CheckValidity(len_indices, nums, last_index_marker)) return -1;

    int left = 1, right = len_indices;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (CheckValidity(mid, nums, last_index_marker)) right = mid;
        else left = mid + 1;
    }

    return left;
}

int main() {

    // TEST 
std::vector<int> nums_1 = {3,2,3};
std::vector<int> change_indices_1 = {1,3,2,2,2,2,3};
int expected_1 = 6;
int result_1 = EarliestSecondToMarkIndices(nums_1, change_indices_1);
assert(result_1 == expected_1);
// TEST_END

// TEST 
std::vector<int> nums_2 = {0,0,1,2};
std::vector<int> change_indices_2 = {1,2,1,2,1,2,1,2};
int expected_2 = 7;
int result_2 = EarliestSecondToMarkIndices(nums_2, change_indices_2);
assert(result_2 == expected_2);
// TEST_END

// TEST 
std::vector<int> nums_3 = {0, 1, 0, 1, 0};
std::vector<int> change_indices_3 = {1, 2, 1,2,1,2,1};
int expected_3 = 7;
int result_3 = EarliestSecondToMarkIndices(nums_3, change_indices_3);
assert(result_3 == expected_3);
// TEST_END

// TEST 
std::vector<int> nums_4 = {1,2,3,2,1,1,2,1,3};
std::vector<int> change_indices_4 = {3};
int expected_4 = -1;
int result_4 = EarliestSecondToMarkIndices(nums_4, change_indices_4);
assert(result_4 == expected_4);
// TEST_END

// TEST 
std::vector<int> nums_5 = {0,2};
std::vector<int> change_indices_5 = {1, 1,2,2,1};
int expected_5 = 4;
int result_5 = EarliestSecondToMarkIndices(nums_5, change_indices_5);
assert(result_5 == expected_5);
// TEST_END

// TEST 
std::vector<int> nums_6 = {3,2,2};
std::vector<int> change_indices_6 = {1,3,2,1,2,2,3};
int expected_6 = 6;
int result_6 = EarliestSecondToMarkIndices(nums_6, change_indices_6);
assert(result_6 == expected_6);
// TEST_END

// TEST 
std::vector<int> nums_7 = {1,1};
std::vector<int> change_indices_7 = {1,1,1,1,1};
int expected_7 = 4;
int result_7 = EarliestSecondToMarkIndices(nums_7, change_indices_7);
assert(result_7 == expected_7);
// TEST_END

// TEST 
std::vector<int> nums_8 = {0, 1, 1, 0, 0, 1, 1};
std::vector<int> change_indices_8 = {2, 4, 6};
int expected_8 = -1;
int result_8 = EarliestSecondToMarkIndices(nums_8, change_indices_8);
assert(result_8 == expected_8);
// TEST_END

// TEST 
std::vector<int> nums_9 = {1, 2, 3};
std::vector<int> change_indices_9 = {1,1,1,1,3,2,3,1};
int expected_9 = 7;
int result_9 = EarliestSecondToMarkIndices(nums_9, change_indices_9);
assert(result_9 == expected_9);
// TEST_END

// TEST 
std::vector<int> nums_10 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_10 = {-1, 2, 3};
try {
    EarliestSecondToMarkIndices(nums_10, change_indices_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_11 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_11 = {1, 2, 5001};
try {
    EarliestSecondToMarkIndices(nums_11, change_indices_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_12 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_12 = {};
try {
    EarliestSecondToMarkIndices(nums_12, change_indices_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_13 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_13 = {1, 2, 3, 0};
try {
    EarliestSecondToMarkIndices(nums_13, change_indices_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_14 = {};
std::vector<int> change_indices_14 = {1, 2, 3, 2};
try {
    EarliestSecondToMarkIndices(nums_14, change_indices_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_15(100000,5);
std::vector<int> change_indices_15 = {1, 2, 3, 6};
try {
    EarliestSecondToMarkIndices(nums_15, change_indices_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_16 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_16 = {};
try {
    EarliestSecondToMarkIndices(nums_16, change_indices_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_17 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_17 = {1, 2, 3, 5001, -3};
try {
    EarliestSecondToMarkIndices(nums_17, change_indices_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_18 = {1, 2, 3, 4, 5};
std::vector<int> change_indices_18(1e5,2);
try {
    EarliestSecondToMarkIndices(nums_18, change_indices_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<int> nums_19 = {1, 2, -9993, 4, 5};
std::vector<int> change_indices_19 = {1, 2, 3, 4, 5};
try {
    EarliestSecondToMarkIndices(nums_19, change_indices_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_20 = {1, -2, 3, 4, 5};
std::vector<int> change_indices_20 = {1, 2, 3, 4, 5};
try {
    EarliestSecondToMarkIndices(nums_20, change_indices_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

    return 0;
}
