/*
Link: https://leetcode.com/problems/count-the-number-of-houses-at-a-certain-distance-ii/description/

Julie is given three positive integers len, house_x, and house_y.

In a city, there exist houses numbered 1 to len connected by len streets. There is a street connecting the house numbered i with the house numbered i + 1 
for all 1 <= i <= len - 1. An additional street connects the house numbered house_x with the house numbered house_y.

For each k, such that 1 <= k <= len, Julie needs to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to
be traveled to reach house2 from house1 is k.

Return a 1-indexed vector result of length len where result[k] represents the total number of pairs of houses such that the minimum streets required to reach 
one house from the other is k.

Note that house_x and house_y can be equal.

Create a C++ class Solution that will contain a function CountOfPairs that will return a vector<long long> denoting 1-indexed vector result of length len.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

An integer denoting len
An integer denoting house_x
An integer denoting house_y

Input Constraints

The value of len should be in the range [2, 100,000] inclusive.
The value of house_x should be in the range [1, len] inclusive.
The value of house_y should be in the range [1, len] inclusive.

*/

#include <vector>
#include <stdexcept>
#include <algorithm>
#include <iostream>
#include <cstring>

class Solution {
private:
    int distance_left[100001] = {};
    int distance_right[100001] = {};

public:
    std::vector<long long> CountOfPairs(int len, int house_x, int house_y) {
      
        if (len < 2 || len > 100000) {
            throw std::invalid_argument("The value of len should be in the range [2, 100,000] inclusive.");
        }
        if (house_x < 1 || house_x > len || house_y < 1 || house_y > len) {
            throw std::invalid_argument("The value of house_x and house_y should be in the range [1, len] inclusive.");
        }

        if (house_x > house_y) {
            std::swap(house_x, house_y);
        }

        for (int index = house_x + 1; index < house_y; index++) {
            int temp_left = std::min(index - house_x, house_y - index + 1);
            int temp_right = std::min(index - house_x + 1, house_y - index);
            distance_left[temp_left]++;
            distance_right[temp_right]++;
        }

        std::vector<long long> result(len, 0);

        int line_pairs = len - std::max(house_y - house_x - 1, 0);
        int circle_pairs = house_y - house_x + 1;
        int left_index_1 = -(house_x - 2), right_index_1 = 0;
        int left_index_2 = -(len - house_y - 1), right_index_2 = 0;
        int sum_left = 0, sum_right = 0;

        for (int k = 1; k <= len; k++) {
            result[k - 1] += std::max(0, line_pairs - k);

            if (2 * k < circle_pairs) {
                result[k - 1] += circle_pairs;
            } else if (2 * k == circle_pairs) {
                result[k - 1] += circle_pairs / 2;
            }

            result[k - 1] += sum_left + sum_right;

            if (left_index_1 >= 0) {
                sum_left -= distance_left[left_index_1];
            }
            if (left_index_2 >= 0) {
                sum_right -= distance_right[left_index_2];
            }

            left_index_1++;
            right_index_1++;
            left_index_2++;
            right_index_2++;

            if (right_index_1 <= len) {
                sum_left += distance_left[right_index_1];
            }
            if (right_index_2 <= len) {
                sum_right += distance_right[right_index_2];
            }
        }

        if (house_x != house_y) {
            result[0]--;
        }

        for (std::vector<long long>::iterator itr = result.begin(); itr != result.end(); ++itr) {
            *itr *= 2;
        }

        return result;
    }
};

int main() {
  
Solution solution;
  
// TEST
int len_1 = 10;
int house_x_1 = 2;
int house_y_1 = 5;
std::vector<long long> expected_1 = {20,20,16,12,10,8,4,0,0,0};
std::vector<long long> result_1 = solution.CountOfPairs(len_1, house_x_1, house_y_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
int len_2 = 5;
int house_x_2 = 1;
int house_y_2 = 5;
std::vector<long long> expected_2 = {10,10,0,0,0};
std::vector<long long> result_2 = solution.CountOfPairs(len_2, house_x_2, house_y_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
int len_3 = 7;
int house_x_3 = 3;
int house_y_3 = 7;
std::vector<long long> expected_3 = {14,20,18,10,0,0,0};
std::vector<long long> result_3 = solution.CountOfPairs(len_3, house_x_3, house_y_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
int len_4 = 100;
int house_x_4 = 50;
int house_y_4 = 100;
std::vector<long long> expected_4 = {200,208,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,164,162,160,158,156,154,152,150,148,146,144,142,140,138,136,134,132,130,128,126,124,122,120,118,116,106,92,88,84,80,76,72,68,64,60,56,52,48,44,40,36,32,28,24,20,16,12,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
std::vector<long long> result_4 = solution.CountOfPairs(len_4, house_x_4, house_y_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
int len_5 = 3;
int house_x_5 = 1;
int house_y_5 = 3;
std::vector<long long> expected_5 = {6,0,0};
std::vector<long long> result_5 = solution.CountOfPairs(len_5, house_x_5, house_y_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
int len_6 = 2;
int house_x_6 = 1;
int house_y_6 = 2;
std::vector<long long> expected_6 = {2,0};
std::vector<long long> result_6 = solution.CountOfPairs(len_6, house_x_6, house_y_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
int len_7 = 4;
int house_x_7 = 2;
int house_y_7 = 3;
std::vector<long long> expected_7 = {6,24,30,8};
std::vector<long long> result_7 = solution.CountOfPairs(len_7, house_x_7, house_y_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
int len_8 = 6;
int house_x_8 = 1;
int house_y_8 = 6;
std::vector<long long> expected_8 = {12,12,6,0,0,0};
std::vector<long long> result_8 = solution.CountOfPairs(len_8, house_x_8, house_y_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
int len_9 = 8;
int house_x_9 = 4;
int house_y_9 = 8;
std::vector<long long> expected_9 = {16,30,40,44,32,14,12,12};
std::vector<long long> result_9 = solution.CountOfPairs(len_9, house_x_9, house_y_9);
assert(result_9 == expected_9);
// TEST_END

  
// TEST
int len_10 = -444;
int house_x_10 = 0;
int house_y_10 = 0;
try {
    solution.CountOfPairs(len_10, house_x_10, house_y_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_11 = 4;
int house_x_11 = -999;
int house_y_11 = 2;
try {
    solution.CountOfPairs(len_11, house_x_11, house_y_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_12 = 100000;
int house_x_12 = 100001;
int house_y_12 = 100001;
try {
    solution.CountOfPairs(len_12, house_x_12, house_y_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_13 = -10;
int house_x_13 = -5;
int house_y_13 = -3;
try {
    solution.CountOfPairs(len_13, house_x_13, house_y_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_14 = 100006;
int house_x_14 = 1;
int house_y_14 = 100001;
try {
    solution.CountOfPairs(len_14, house_x_14, house_y_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_15 = 50000;
int house_x_15 = 0;
int house_y_15 = 1;
try {
    solution.CountOfPairs(len_15, house_x_15, house_y_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int len_16 = 2;
int house_x_16 = -1;
int house_y_16 = -1;
try {
    solution.CountOfPairs(len_16, house_x_16, house_y_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

    return 0;
}

