/*
Link: https://codeforces.com/problemset/problem/303/D

Michael is a smart boy who loves math very much. He invented a number called "Rotatable Number" inspired by 142857.

As you can see, 142857 is a magic number because any of its rotations can be obtained by multiplying that number by 1, 2, ..., 6 
(numbers from one to the number's length). Rotating a number means putting its last several digits into the first. For example, by rotating number 
12345 you can obtain any numbers: 12345, 51234, 45123, 34512, 23451. It's worth mentioning that leading-zeroes are allowed. So both 4500123 and 0123450 can 
be obtained by rotating 0012345. You can see why 142857 satisfies the condition. All of the 6 equations are under base 10.

142857·1 = 142857;
142857·2 = 285714;
142857·3 = 428571;
142857·4 = 571428;
142857·5 = 714285;
142857·6 = 857142.

Now, Michael has a problem. He extends "Rotatable Number" under any base b. As is mentioned above, 142857 is a "Rotatable Number" under base 10.
Another example is 0011 under base 2. All of the 4 equations are under base 2.

0011·1 = 0011;
0011·10 = 0110;
0011·11 = 1001;
0011·100 = 1100.

So, he wants to find the largest b (1 < b < start_value) so that there is a positive "Rotatable Number" (leading-zeroes allowed) of length num under base b.

Note that any time you multiply a rotatable number by numbers from 1 to its length you should get a rotation of that number.

Return a single integer — the largest b you found. If no such b exists, return -1 instead.

Create a C++ function DeliverPackages that will return the largest b, if not possible return -1;

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting num
An integer denoting start_value

Input Constraints:

The value of num should be between 1 and 5·10^6 inclusive.
The value of start_value should be between 2 and 10^9 inclusive.

*/

#include <iostream>
#include <stdexcept>

bool IsPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i * i <= num; ++i) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

  bool IsPrimitiveRoot(int base, int prime) {
        int order = 0;
        long long result = 1;
        do {
            ++order;
            result = result * base % prime;
        } while (result != 1);

        return order == prime - 1;
    }

 int RotatableNumber(int num, int start_value) {
        
        if (num < 1 || start_value < 2 || num > 5000000 || start_value > 1000000000) {
            throw std::invalid_argument("num and start value out of range");
        }

        int next_prime = num + 1;
   
        if (!IsPrime(next_prime)) {
            return -1;
        }

        for (int base = start_value - 1; base > 1; --base) {
            if (base % next_prime != 0 && IsPrimitiveRoot(base, next_prime)) {
                return base;
            }
        }

        return -1;
    }

#include <cassert>

int main() {
   

    return 0;
}
