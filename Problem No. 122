/*
Link: https://codeforces.com/problemset/problem/303/D

Michael is a smart boy who loves math very much. He invented a number called "Rotatable Number" inspired by 142857.

As you can see, 142857 is a magic number because any of its rotations can be obtained by multiplying that number by 1, 2, ..., 6 
(numbers from one to the number's length). Rotating a number means putting its last several digits into the first. For example, by rotating number 
12345 you can obtain any numbers: 12345, 51234, 45123, 34512, 23451. It's worth mentioning that leading-zeroes are allowed. So both 4500123 and 0123450 can 
be obtained by rotating 0012345. You can see why 142857 satisfies the condition. All of the 6 equations are under base 10.

142857·1 = 142857;
142857·2 = 285714;
142857·3 = 428571;
142857·4 = 571428;
142857·5 = 714285;
142857·6 = 857142.

Now, Michael has a problem. He extends "Rotatable Number" under any base b. As is mentioned above, 142857 is a "Rotatable Number" under base 10.
Another example is 0011 under base 2. All of the 4 equations are under base 2.

0011·1 = 0011;
0011·10 = 0110;
0011·11 = 1001;
0011·100 = 1100.

So, he wants to find the largest b (1 < b < start_value) so that there is a positive "Rotatable Number" (leading-zeroes allowed) of length num under base b.

Note that any time you multiply a rotatable number by numbers from 1 to its length you should get a rotation of that number.

Return a single integer — the largest b you found. If no such b exists, return -1 instead.

Create a C++ function RotatableNumber that will return an integer denoting the largest b, if not possible return -1;

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting num
An integer denoting start_value

Input Constraints:

The value of num should be between 1 and 5·10^6 inclusive.
The value of start_value should be between 2 and 10^9 inclusive.

*/

#include <iostream>
#include <stdexcept>
#include <cassert>

bool IsPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i * i <= num; ++i) {
            if (num % i == 0) {
                return false;
            }
        }
        return true;
    }

  bool IsPrimitiveRoot(int base, int prime) {
        int order = 0;
        long long result = 1;
        do {
            ++order;
            result = result * base % prime;
        } while (result != 1);

        return order == prime - 1;
    }

 int RotatableNumber(int num, int start_value) {
        
        if (num < 1 || start_value < 2 || num > 5000000 || start_value > 1000000000) {
            throw std::invalid_argument("num and start value out of range");
        }

        int next_prime = num + 1;
   
        if (!IsPrime(next_prime)) {
            return -1;
        }

        for (int base = start_value - 1; base > 1; --base) {
            if (base % next_prime != 0 && IsPrimitiveRoot(base, next_prime)) {
                return base;
            }
        }

        return -1;
    }

#include <iostream>
#include <stdexcept>
#include <cassert>

int main() {
   
//TEST
int num_1 = 6;
int start_value_1 = 11;
int expected_1 = 10; 
int result_1 = RotatableNumber(num_1, start_value_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int num_2 = 100;
int start_value_2 = 3257;
int expected_2 = 3250; 
int result_2 = RotatableNumber(num_2, start_value_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int num_3 = 5000000;
int start_value_3 = 2000000;
int expected_3 = -1; 
int result_3 = RotatableNumber(num_3, start_value_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
int num_4 = 96;
int start_value_4 = 9561;
int expected_4 = 9547; 
int result_4 = RotatableNumber(num_4, start_value_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int num_5 = 100;
int start_value_5 = 3661;
int expected_5 = 3654;
int result_5 = RotatableNumber(num_5, start_value_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int num_6 = 1000000;
int start_value_6 = 5000000;
int expected_6 = -1; 
int result_6 = RotatableNumber(num_6, start_value_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int num_7 = 4935742;   
int start_value_7 = 3393126;
int expected_7 = 3393099; 
int result_7 = RotatableNumber(num_7, start_value_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int num_8 = 2000000;
int start_value_8 = 7000000;
int expected_8 = -1; 
int result_8 = RotatableNumber(num_8, start_value_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int num_9 = 3500000;
int start_value_9 = 8000000;
int expected_9 = -1; 
int result_9 = RotatableNumber(num_9, start_value_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
int num_10 = 0;
int start_value_10 = 2;
try {
    RotatableNumber(num_10, start_value_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_11 = 5000001;
int start_value_11 = 2;
try {
    RotatableNumber(num_11, start_value_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_12 = 1;
int start_value_12 = 1;
try {
    RotatableNumber(num_12, start_value_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_13 = 1;
int start_value_13 = 1000000001;
try {
    RotatableNumber(num_13, start_value_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_14 = -1;
int start_value_14 = 2;
try {
    RotatableNumber(num_14, start_value_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int num_15 = 1;
int start_value_15 = -2;
try {
    RotatableNumber(num_15, start_value_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
