/*
Link:  https://codeforces.com/contest/542/problem/D

It's tough to be a superhero. And it's twice as tough to resist the supervillain who is cool at math. Suppose that you're an ordinary Batman in an ordinary city 
of Gotham. Your enemy Joker mined the building of the city administration and you only have several minutes to neutralize the charge. To do that, you should enter
the cancel code on the bomb control panel.

However, that mad man decided to give you a hint. This morning the mayor found a playing card under his pillow. There was a line written on the card:

J(x) = Summation of k from (1 <= k <= x), where gcd(k, x/k) = 1.

The bomb has a note saying "J(x) = num", where num is some positive integer. You suspect that the cancel code is some integer x that meets the equation J(x) = num.
Now in order to decide whether you should neutralize the bomb or run for your life, you've got to count how many distinct positive integers x meet this equation.

You are given a single integer num.

Return the number of solutions of the equation J(x) = num.

Create a C++ Function CalculatePrimeFactorizations that will return an integer denoting the number of solutions of the equation J(x) = num.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer num

Input Constraints:

The value of num should be at least 1 and at most 10^10 inclusive.

*/

#include <stdio.h>
#include <stdexcept>
#include <cassert>
#include <vector>

bool IsPrime(long long number, const std::vector<int>& primes) {
    for (std::size_t j = 0;;) {
        long long current_prime = primes[j++];
        if ((current_prime * current_prime) > number) return true;
        if (!(number % current_prime)) return false;
    }
}

int CalculateFactorizations(int index, long long number, const std::vector<int>& primes) {
    if (number == 1) return 1;
    long long current_prime = primes[index];
    if ((current_prime + 1) > number) return 0;
    if (((current_prime * current_prime) + 1) > number) return IsPrime(--number, primes) ? 1 : 0;
    int result = CalculateFactorizations(index + 1, number, primes);
    for (;;) {
        if (++current_prime > number) return result;
        if (!(number % current_prime)) result += CalculateFactorizations(index + 1, number / current_prime, primes);
        current_prime = (current_prime - 1) * primes[index];
    }
}

std::vector<int> InitializePrimes() {
    std::vector<int> primes;
    primes.push_back(2);
    for (int i = 3; i < 100010; i += 2) {
        if (IsPrime(i, primes)) {
            primes.push_back(i);
        }
    }
    return primes;
}

long long CalculatePrimeFactorizations(long long num) {

    if (num < 1 || num > 10000000000LL) {
        throw std::invalid_argument("Invalid input: num must be between 1 and 1,000,000,000,000.");
    }

    std::vector<int> primes = InitializePrimes();
    return CalculateFactorizations(0, num, primes);
}

#include <stdio.h>
#include <stdexcept>
#include <cassert>
#include <vector>
#include <iostream>

int main() {
  
  //TEST
long long num_1 = 2;
long long expected_1 = 0;
long long result_1 = CalculatePrimeFactorizations(num_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
long long num_2 = 3;
long long expected_2 = 1;
long long result_2 = CalculatePrimeFactorizations(num_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
long long num_3 = 4;
long long expected_3 = 1;
long long result_3 = CalculatePrimeFactorizations(num_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
long long num_4 = 6;
long long expected_4 = 1;
long long result_4 = CalculatePrimeFactorizations(num_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
long long num_5 = 12;
long long expected_5 = 2;
long long result_5 = CalculatePrimeFactorizations(num_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
long long num_6 = 15;
long long expected_6 = 0;
long long result_6 = CalculatePrimeFactorizations(num_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
long long num_7 = 28;
long long expected_7 = 1;
long long result_7 = CalculatePrimeFactorizations(num_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
long long num_8 = 100;
long long expected_8 = 1;
long long result_8 = CalculatePrimeFactorizations(num_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
long long num_9 = 10;
long long expected_9 = 1;
long long result_9 = CalculatePrimeFactorizations(num_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
long long num_10 = 1000000000001; 
try {
    CalculatePrimeFactorizations(num_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_11 = -99999999999; 
try {
    CalculatePrimeFactorizations(num_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST
long long num_12 = 0; 
try {
    CalculatePrimeFactorizations(num_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


    return 0;
}
