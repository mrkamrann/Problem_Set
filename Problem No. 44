/*
Link : https://leetcode.com/problems/maximum-points-after-collecting-coins-from-all-nodes/

In a tranquil village, there exists an ancient tree that holds many secrets. This tree, rooted at node 0, has len nodes labeled from 0 to len - 1. The villagers have
mapped the tree with a 2D integer vector called edges, where each entry edges[i] = [a_i, b_i] signifies an ancient path between nodes a_i and b_i.

Our hero, John, is given a mission: he must collect all the coins hidden in the tree. John knows that each node i in the tree contains coins[i] coins. However, there's a twist to his task: he can only collect the coins at a node if he has already collected the coins from all its ancestor nodes.
John has two ways to collect the coins from a node i:

Collect all the coins directly: If he chooses this method, John will receive coins[i] - val points. If coins[i] - val is negative, John will lose |coins[i] - val| points.
Collect coins at half-value: If John collects the coins this way, he will get floor(coins[i] / 2) points. Additionally, every node  j in the subtree rooted at node 
i will have its coins reduced to floor(coins[j] / 2).

John's goal is to gather the maximum points possible after collecting all the coins from the tree. Create a C++ function MaximumPoints that will return an Integer to determine the same.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type:

vector<vector<int>> denoting edges
vector<int> denoting coins
An Intger denoting val

Input Constraints:

1.The length of coins(len) should be at least 2 and at most 10^5 inclusive.
2.Each value of coins[i] should be in the range [0, 10^4] inclusive.
3.The length of edges should be len - 1 where len is the length of coins.
4.Each value of edges[i][0] and edges[i][1] should be in the range [0, len - 1] inclusive.
5.The value of val should be in the range [0, 10^4] inclusive.

*/

#include <vector>
#include <cmath>
#include <climits>
#include <stdexcept>
#include <iostream>
#include <cassert>

    int Helper(int node, std::vector<std::vector<int>>& adj, std::vector<int>& coins, int val, std::vector<std::vector<int>>& dp_arr, int count, int parent) {
        if (count >= 14) {
            return 0;
        }
        if (dp_arr[node][count] != INT_MIN) {
            return dp_arr[node][count];
        }

        int take_all = coins[node] / std::pow(2, count + 1);
        int take_half = (coins[node] / std::pow(2, count)) - val;

        for (int i = 0; i < adj[node].size(); ++i) {
            int child = adj[node][i];
            if (child == parent) {
                continue;
            }
            if (dp_arr[child][count + 1] != INT_MIN) {
                take_all += dp_arr[child][count + 1];
            } else {
                take_all += Helper(child, adj, coins, val, dp_arr, count + 1, node);
            }
        }
        for (int i = 0; i < adj[node].size(); ++i) {
            int child = adj[node][i];
            if (child == parent) {
                continue;
            }
            if (dp_arr[child][count] != INT_MIN) {
                take_half += dp_arr[child][count];
            } else {
                take_half += Helper(child, adj, coins, val, dp_arr, count, node);
            }
        }
        return dp_arr[node][count] = std::max(take_all, take_half);
    }

    int MaximumPoints(std::vector<std::vector<int>>& edges, std::vector<int>& coins, int val) {
        int len = coins.size();

     
        if (len < 2 || len > 100000) {
            throw std::invalid_argument("The length of coins should be at least 2 and at most 100000 inclusive.");
        }
        
      
        for (int i = 0; i < len; ++i) {
            if (coins[i] < 0 || coins[i] > 10000) {
                throw std::invalid_argument("Each value of coins should be in the range [0, 10000] inclusive.");
            }
        }

     
        if (edges.size() != len - 1) {
            throw std::invalid_argument("The length of edges should be len - 1 where len is the length of coins.");
        }

      
        for (int i = 0; i < edges.size(); ++i) {
            if (edges[i][0] < 0 || edges[i][0] >= len || edges[i][1] < 0 || edges[i][1] >= len) {
                throw std::invalid_argument("Each value of edges[i][0] and edges[i][1] should be in the range [0, len - 1] inclusive.");
            }
        }

    
        if (val < 0 || val > 10000) {
            throw std::invalid_argument("The value of val should be in the range [0, 10000] inclusive.");
        }

        std::vector<std::vector<int>> adjacency_list(len);
        for (int i = 0; i < edges.size(); ++i) {
            int node_a = edges[i][0];
            int node_b = edges[i][1];
            adjacency_list[node_a].push_back(node_b);
            adjacency_list[node_b].push_back(node_a);
        }
        std::vector<std::vector<int>> dp_arr(len + 1, std::vector<int>(16, INT_MIN));
        return Helper(0, adjacency_list, coins, val, dp_arr, 0, -1);
    }


int main() {
  
    // TEST
    std::vector<std::vector<int>> edges_1 = {{0, 1}, {1, 2}, {1, 3}};
    std::vector<int> coins_1 = {4, 5, 6, 7};
    int val_1 = 3;
    int expected_1 = 10;
    int result_1 = MaximumPoints(edges_1, coins_1, val_1);
    assert(expected_1 == result_1);
    // TEST_END
  
  // TEST
std::vector<std::vector<int>> edges_2 = {{0, 1}, {1, 2}};
std::vector<int> coins_2 = {1, 2, 3};
int val_2 = 1;
int expected_2 = 3;
int result_2 = MaximumPoints(edges_2, coins_2, val_2);
assert(expected_2 == result_2);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_3 = {{0, 1}, {0, 2}, {1, 3}, {2, 4}};
std::vector<int> coins_3 = {1, 2, 3, 4, 5};
int val_3 = 3;
int expected_3 = 2;
int result_3 = MaximumPoints(edges_3, coins_3, val_3);
assert(expected_3 == result_3);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_4 = {{0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}};
std::vector<int> coins_4 = {5, 4, 3, 2, 1, 6, 7};
int val_4 = 4;
int expected_4 = 8;
int result_4 = MaximumPoints(edges_4, coins_4, val_4);
assert(expected_4 == result_4);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_5 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<int> coins_5 = {10, 20, 30, 40, 50};
int val_5 = 2;
int expected_5 = 140;
int result_5 = MaximumPoints(edges_5, coins_5, val_5);
assert(expected_5 == result_5);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_6 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}};
std::vector<int> coins_6 = {3, 6, 9, 12, 15, 18};
int val_6 = 3;
int expected_6 = 45;
int result_6 = MaximumPoints(edges_6, coins_6, val_6);
assert(expected_6 == result_6);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_7 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}};
std::vector<int> coins_7 = {2, 4, 6, 8, 10, 12, 14};
int val_7 = 5;
int expected_7 = 21;
int result_7 = MaximumPoints(edges_7, coins_7, val_7);
assert(expected_7 == result_7);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_8 = {{0, 1}, {0, 2}, {0, 3}, {1, 4}, {1, 5}, {2, 6}, {2, 7}, {3, 8}};
std::vector<int> coins_8 = {8, 7, 6, 5, 4, 3, 2, 1, 0};
int val_8 = 4;
int expected_8 = 15;
int result_8 = MaximumPoints(edges_8, coins_8, val_8);
assert(expected_8 == result_8);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_9 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}};
std::vector<int> coins_9 = {5, 10, 15, 20, 25, 30, 35, 40, 45};
int val_9 = 6;
int expected_9 = 171;
int result_9 = MaximumPoints(edges_9, coins_9, val_9);
assert(expected_9 == result_9);
// TEST_END

// TEST
std::vector<std::vector<int>> edges_10 = {{0, 1}};
std::vector<int> coins_10 = {1}; 
int val_10 = 1;
try {
    MaximumPoints(edges_10, coins_10, val_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_11 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<int> coins_11(100001, 1); 
int val_11 = 1;
try {
    MaximumPoints(edges_11, coins_11, val_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_12 = {{0, 1}, {1, 2}, {1, 3}};
std::vector<int> coins_12 = {4, 5, 10001, 7}; 
int val_12 = 3;
try {
    MaximumPoints(edges_12, coins_12, val_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_13 = {{0, 1}};
std::vector<int> coins_13 = {1, 2, 3};  
int val_13 = 1;
try {
    MaximumPoints(edges_13, coins_13, val_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_14 = {{0, 1}, {1, 4}, {2, 3}};
std::vector<int> coins_14 = {1, 2, 3, 4};
int val_14 = 1;
try {
    MaximumPoints(edges_14, coins_14, val_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_15 = {{0, 1}, {1, 2}, {2, 3}};
std::vector<int> coins_15 = {1, 2, 3, 4};
int val_15 = 10001; 
try {
    MaximumPoints(edges_15, coins_15, val_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_16 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<int> coins_16 = {1, 2, 3, 4, -1}; 
int val_16 = 1;
try {
    MaximumPoints(edges_16, coins_16, val_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_17 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<int> coins_17 = {1, 2, 3, 4, 5};
int val_17 = -1;
try {
    MaximumPoints(edges_17, coins_17, val_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_18 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<int> coins_18 = {}; 
int val_18 = 1;
try {
    MaximumPoints(edges_18, coins_18, val_18);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
std::vector<std::vector<int>> edges_19 = {{0, 1}, {1, 2}, {2, 3}, {3, 4}};
std::vector<int> coins_19 = {1, 2, 3, 4, 5};
std::vector<std::vector<int>> empty_edges; 
int val_19 = 1;
try {
    MaximumPoints(empty_edges, coins_19, val_19);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

    return 0;
}
