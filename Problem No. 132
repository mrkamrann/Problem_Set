/*
Link : https://codeforces.com/problemset/problem/1366/G

Let's denote the function f(source) that takes a string source consisting of lowercase Latin letters and dots, and returns a string consisting of lowercase
Latin letters as follows:

Let r be an empty string;
Process the characters of source from left to right. For each character c, do the following: if c is a lowercase Latin letter, append c at the end of the 
string r; otherwise, delete the last character from r (if r is empty before deleting the last character — the function crashes);
Return r as the result of the function.

You are given two strings source and target. You have to delete the minimum possible number of characters from source so that 
f(source) = target (and the function does not crash). Note that you aren't allowed to insert new characters into source or reorder the existing ones.

It is possible to remove some number of characters from source so that f(source) = target.

Return one integer — the minimum possible number of characters you have to delete from source so f(source) does not crash and returns target as the 
result of the function.

Create a C++ function ComputeMinimumCost that will return an integer denoting the minimum number of characters to delete.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A string denoting source
A string denoting target

Input Constraints:

The length of target and source should be at least 1 and at most 10000 inclusive.
The length of source should be at greater than equal to the length of target.
source contains lowercase Latin letters and '.'
target contains lowercase Latin letters 

*/

#include <iostream>
#include <vector>
#include <cstring>
#include <stdexcept>
#include <cassert>


int ComputeMinimumCost(const std::string &source, const std::string &target) {

    if (source.empty() || target.empty() || target.length() > source.length() || target.length() < 1 || source.length() > 10000) {
        throw std::invalid_argument("Invalid input constraints");
    }

    for (char character : source) {
        if (!(character >= 'a' && character <= 'z') && character != '.') {
            throw std::invalid_argument("Source string must only contain lowercase Latin letters and dots");
        }
    }

    for (char character : target) {
        if (!(character >= 'a' && character <= 'z')) {
            throw std::invalid_argument("Target string must only contain lowercase Latin letters");
        }
    }

    int source_length = source.length();
    int target_length = target.length();

    std::vector<std::vector<int>> cost_matrix(source_length + 1, std::vector<int>(target_length + 1, 10000));
    std::vector<int> index_stack(source_length + 1, 0);
    int stack_head = 0;

    cost_matrix[0][0] = 0;

    for (int i = 1; i <= source_length; i++) {
        for (int j = 0; j <= target_length; j++) {
            cost_matrix[i][j] = cost_matrix[i - 1][j] + 1;
        }

        if (source[i - 1] != '.') {
            for (int j = 1; j <= target_length; j++) {
                if (target[j - 1] == source[i - 1]) {
                    cost_matrix[i][j] = std::min(cost_matrix[i][j], cost_matrix[i - 1][j - 1]);
                }
            }
            index_stack[++stack_head] = i;
        } else if (stack_head) {
            int pos = index_stack[stack_head] - 1;
            stack_head--;
            for (int j = 0; j <= target_length; j++) {
                cost_matrix[i][j] = std::min(cost_matrix[i][j], cost_matrix[pos][j]);
            }
        }
    }

    return cost_matrix[source_length][target_length];
}

#include <iostream>
#include <vector>
#include <cstring>
#include <stdexcept>
#include <cassert>

int main() {

  //TEST

std::string source_1 = "a";
std::string target_1 = "a";
int expected_1 = 0;
int result_1 = ComputeMinimumCost(source_1, target_1);
assert(result_1 == expected_1);
//TEST_END

//TEST


std::string source_2 = "a.";
std::string target_2 = "a";
int expected_2 = 1;
int result_2 = ComputeMinimumCost(source_2, target_2);
assert(result_2 == expected_2);
//TEST_END

//TEST


std::string source_3 = "ab.";
std::string target_3 = "ab";
int expected_3 = 1;
int result_3 = ComputeMinimumCost(source_3, target_3);
assert(result_3 == expected_3);
//TEST_END

//TEST


std::string source_4 = "a.c";
std::string target_4 = "abc";
int expected_4 = 10000;
int result_4 = ComputeMinimumCost(source_4, target_4);
assert(result_4 == expected_4);
//TEST_END

//TEST


std::string source_5 = "abcd.";
std::string target_5 = "abcd";
int expected_5 = 1;
int result_5 = ComputeMinimumCost(source_5, target_5);
assert(result_5 == expected_5);
//TEST_END

//TEST


std::string source_6 = "a....";
std::string target_6 = "abcde";
int expected_6 = 10003;
int result_6 = ComputeMinimumCost(source_6, target_6);
assert(result_6 == expected_6);
//TEST_END

//TEST


std::string source_7 = "a.b.c";
std::string target_7 = "abc";
int expected_7 = 2;
int result_7 = ComputeMinimumCost(source_7, target_7);
assert(result_7 == expected_7);
//TEST_END

//TEST


std::string source_8 = "x.yz";
std::string target_8 = "xyz";
int expected_8 = 1;
int result_8 = ComputeMinimumCost(source_8, target_8);
assert(result_8 == expected_8);
//TEST_END

//TEST


std::string source_9 = ".ab......";
std::string target_9 = "abcdefghi";
int expected_9 = 10005;
int result_9 = ComputeMinimumCost(source_9, target_9);
assert(result_9 == expected_9);
//TEST_END


//TEST

std::string source_10 = "";
std::string target_10 = "a";
try {
    ComputeMinimumCost(source_10, target_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_11 = "a";
std::string target_11 = "";
try {
   ComputeMinimumCost(source_11, target_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_12(10001, 'a');
std::string target_12 = "a";
try {
    ComputeMinimumCost(source_12, target_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::string source_13 = "a";
std::string target_13(10001, 'a'); 
try {
    ComputeMinimumCost(source_13, target_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::string source_14 = "a";
std::string target_14 = "aa"; 
try {
    ComputeMinimumCost(source_14, target_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
  
std::string source_15 = "abcdef";
std::string target_15 = "abcdefg"; 
try {
    ComputeMinimumCost(source_15, target_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_16 = "..a..";
std::string target_16 = "a...a"; 
try {
    ComputeMinimumCost(source_16, target_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_17 = "abcd";
std::string target_17 = "abcd.."; 
try {
    ComputeMinimumCost(source_17, target_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_18 = "a.c.d";
std::string target_18 = "abcdabcd"; 
try {
   ComputeMinimumCost(source_18, target_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_19 = "a..1.b";
std::string target_19 = "aaab"; 
try {
    ComputeMinimumCost(source_19, target_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_20 = "";
std::string target_20 = "abcde"; 
try {
    ComputeMinimumCost(source_20, target_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::string source_21 = ".....";
std::string target_21 = "";
try {
     ComputeMinimumCost(source_21, target_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::string source_22(1e6,'.');
std::string target_22 = "aabc"; 
try {
     ComputeMinimumCost(source_22, target_22);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


std::string source_23 = "a.b.c.";
std::string target_23(1e6,'a');
try {
    ComputeMinimumCost(source_23, target_23);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
