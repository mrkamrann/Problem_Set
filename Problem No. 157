/*
Link: https://codeforces.com/contest/461/problem/D
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cmath>
#include <cassert>

void DepthFirstSearch(int node, int color, std::vector<std::vector<std::pair<int, int>>>& adjacency_list, std::vector<int>& visited, int& result) {
    if (visited[node]) {
        if (visited[node] != color) result = 0;
        return;
    }
    visited[node] = color;
    for (const auto& neighbor : adjacency_list[node]) {
        if (neighbor.second) {
            DepthFirstSearch(neighbor.first, 3 - color, adjacency_list, visited, result);
        } else {
            DepthFirstSearch(neighbor.first, color, adjacency_list, visited, result);
        }
    }
}

int Solve(int size, int num_cells, const std::vector<std::vector<int>>& cells, const std::vector<char>& characters) {
    if (size < 1 || size > 100000 || num_cells < 1 || num_cells > 100000) {
        throw std::invalid_argument("size or num_cells out of range");
    }
    std::vector<std::vector<std::pair<int, int>>> adjacency_list(size + 3);
    std::vector<int> visited(size + 3, 0);
    int result = 1;

    for (int i = 0; i < num_cells; ++i) {
        int row = cells[i][0];
        int column = cells[i][1];
        char character = characters[i];
        if (row < 1 || row > size || column < 1 || column > size || (character != 'o' && character != 'x')) {
            throw std::invalid_argument("Invalid cell data");
        }
        int x = std::abs(column - row) + 1;
        int y = size - std::abs(row + column - size - 1);
        adjacency_list[x].emplace_back(y + 2, character == 'o');
        adjacency_list[y + 2].emplace_back(x, character == 'o');
    }

    DepthFirstSearch(1, 1, adjacency_list, visited, result);
    DepthFirstSearch(2, 1, adjacency_list, visited, result);

    for (int i = 3; i <= size + 2; ++i) {
        if (!visited[i]) {
            result = 2LL * result % 1000000007;
            DepthFirstSearch(i, 1, adjacency_list, visited, result);
        }
    }

    return result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cmath>
#include <cassert>

int main() {
    int size, num_cells;
    std::cin >> size >> num_cells;

    std::vector<std::vector<int>> cells(num_cells, std::vector<int>(2));
    std::vector<char> characters(num_cells);
    for (int i = 0; i < num_cells; ++i) {
        int row, column;
        std::string character;
        std::cin >> row >> column >> character;
        cells[i][0] = row;
        cells[i][1] = column;
        characters[i] = character[0];
    }

    int result = Solve(size, num_cells, cells, characters);
    std::cout << result << std::endl;

    return 0;
}

