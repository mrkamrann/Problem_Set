/*
Link: https://codeforces.com/contest/461/problem/D

Harshit came up with a very complicated task. He gives it to Appleman, but Appleman doesn't know how to solve it. Can you help him?

Given an size × size checkerboard, each cell of the board has either character 'x', or character 'o', or is empty. How many ways are there to fill all the emptycells 
with 'x' or 'o' (each cell must contain only one character in the end) such that for each cell, the number of adjacent cells with 'o' will be even? 
Find the number of ways modulo 1000000007 (10^9 + 7). Two cells of the board are adjacent if they share a side.

You are given two integers size, num_cells  — the size of the board and the number of cells that have characters initially.
You are also given a 2D vector cells each contain two integers and a character: row, column
Your also given a vector character (character[i] is either 'o' or 'x'). 
This line means: there is a character character[i] in the cell that is located at the intersection of the row-th row and column-th column. All the given cells are 
distinct. Consider that the rows are numbered from 1 to size from top to bottom. Similarly, the columns are numbered from 1 to size from left to right.

Return  a single integer — the answer to the problem.

Create a C++ function CalculateWays that will return an integer denoting the number of ways to fill the checkerboard according to the rules.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting size
vector<vector<int> denoting 2D vector cells
vector<char> denoting character

Input Constraints:

size should be at least 1 and at most 10^5 inclusive.
num_cells should be at least 1 and at most 10^5 inclusive.
Each value in cells[i] should be at least 1 and at most size.
Each character[i] should be either 'o' or 'x'.
All the given cells are distinct.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cmath>
#include <cassert>
#include <set>

void DepthFirstSearch(int node, int color, std::vector<std::vector<std::pair<int, int>>>& adjacency_list, std::vector<int>& visited, int& result) {
    if (visited[node]) {
        if (visited[node] != color) result = 0;
        return;
    }
    visited[node] = color;
    for (const std::pair<int, int>& neighbor : adjacency_list[node]) {
        if (neighbor.second) {
            DepthFirstSearch(neighbor.first, 3 - color, adjacency_list, visited, result);
        } else {
            DepthFirstSearch(neighbor.first, color, adjacency_list, visited, result);
        }
    }
}

int CalculateWays(int size, const std::vector<std::vector<int>>& cells, const std::vector<char>& characters) {

    int num_cells = cells.size();
    
    if (size < 1 || size > 100000) {
        throw std::invalid_argument("size must be between 1 and 100000 inclusive.");
    }

  
    if (num_cells < 1 || num_cells > 100000) {
        throw std::invalid_argument("num_cells must be between 1 and 100000 inclusive.");
    }

    if (cells.size() != num_cells || characters.size() != num_cells) {
        throw std::invalid_argument("Length of cells and characters must be equal to num_cells.");
    }

    for (int i = 0; i < num_cells; ++i){
      
        int row = cells[i][0];
        int column = cells[i][1];
        char character = characters[i];
        if (row < 1 || row > size || column < 1 || column > size || (character != 'o' && character != 'x'))         {
            throw std::invalid_argument("Invalid cell data");
        }
    }

   
    for (char charr : characters) {
        if (charr != 'o' && charr != 'x') {
            throw std::invalid_argument("Each character in characters must be either 'o' or 'x'.");
        }
    }

     std::set<std::pair<int, int>> cell_set;
  
    for (const std::vector<int>& cell : cells) {
        
        std::pair<int, int> cell_pair = std::make_pair(cell[0], cell[1]);
        if (!cell_set.insert(cell_pair).second) {
            throw std::invalid_argument("All cells must be distinct.");
        }
    }
  
    std::vector<std::vector<std::pair<int, int>>> adjacency_list(size + 3);
    std::vector<int> visited(size + 3, 0);
    int result = 1;

    for (int i = 0; i < num_cells; ++i) {
        int row = cells[i][0];
        int column = cells[i][1];
        char character = characters[i];
  
        int x_val = std::abs(column - row) + 1;
        int y_val = size - std::abs(row + column - size - 1);
        adjacency_list[x_val].emplace_back(y_val + 2, character == 'o');
        adjacency_list[y_val + 2].emplace_back(x_val, character == 'o');
    }

    DepthFirstSearch(1, 1, adjacency_list, visited, result);
    DepthFirstSearch(2, 1, adjacency_list, visited, result);

    for (int i = 3; i <= size + 2; ++i) {
        if (!visited[i]) {
            result = 2LL * result % 1000000007;
            DepthFirstSearch(i, 1, adjacency_list, visited, result);
        }
    }

    return result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cmath>
#include <cassert>

int main() {
  
//TEST 
std::vector<std::vector<int>> cells_1 = {{1, 2}, {3, 4}, {5, 6}};
std::vector<char> characters_1 = {'o', 'x', 'o'};
int size_1 = 6;
int expected_1 = 16;
int result_1 = CalculateWays(size_1, cells_1, characters_1);
assert(result_1 == expected_1);
//TEST_END

//TEST 2
std::vector<std::vector<int>> cells_2 = {{100000, 99999}, {99998, 99997}, {99996, 99995}};
std::vector<char> characters_2 = {'x', 'o', 'x'};
int size_2 = 100000;
int expected_2 = 75965440;
int result_2 = CalculateWays(size_2, cells_2, characters_2);
assert(result_2 == expected_2);
//TEST_END

//TEST 3
std::vector<std::vector<int>> cells_3 = {{10, 20}, {30, 40}, {50, 60}};
std::vector<char> characters_3 = {'o', 'o', 'x'};
int size_3 = 60;
int expected_3 = 67049563;
int result_3 = CalculateWays(size_3, cells_3, characters_3);
assert(result_3 == expected_3);
//TEST_END

//TEST 4
std::vector<std::vector<int>> cells_4 = {{1, 1}};
std::vector<char> characters_4 = {'x'};
int size_4 = 1;
int expected_4 = 1;
int result_4 = CalculateWays(size_4, cells_4, characters_4);
assert(result_4 == expected_4);
//TEST_END

//TEST 5
std::vector<std::vector<int>> cells_5 = {{5, 10}, {15, 20}, {25, 30}};
std::vector<char> characters_5 = {'x', 'o', 'o'};
int size_5 = 30;
int expected_5 = 134217728;
int result_5 = CalculateWays(size_5, cells_5, characters_5);
assert(result_5 == expected_5);
//TEST_END

//TEST 6
std::vector<std::vector<int>> cells_6 = {{500, 600}, {700, 800}, {900, 1000}};
std::vector<char> characters_6 = {'o', 'o', 'x'};
int size_6 = 1000;
int expected_6 = 336052903;
int result_6 = CalculateWays(size_6, cells_6, characters_6);
assert(result_6 == expected_6);
//TEST_END

//TEST 7
std::vector<std::vector<int>> cells_7 = {{100, 200}, {300, 400}, {500, 600}};
std::vector<char> characters_7 = {'x', 'x', 'o'};
int size_7 = 600;
int expected_7 = 455807409;
int result_7 = CalculateWays(size_7, cells_7, characters_7);
assert(result_7 == expected_7);
//TEST_END

//TEST 8
std::vector<std::vector<int>> cells_8 = {{1, 2}, {3, 4}, {5, 6}, {7, 8}, {9, 10}};
std::vector<char> characters_8 = {'o', 'x', 'x', 'o', 'x'};
int size_8 = 10;
int expected_8 = 0;
int result_8 = CalculateWays(size_8, cells_8, characters_8);
assert(result_8 == expected_8);
//TEST_END

//TEST 9
std::vector<std::vector<int>> cells_9 = {{1, 3}, {5, 7}, {9, 11}};
std::vector<char> characters_9 = {'x', 'o', 'x'};
int size_9 = 11;
int expected_9 = 512;
int result_9 = CalculateWays(size_9, cells_9, characters_9);
assert(result_9 == expected_9);
//TEST_END

//TEST 
std::vector<std::vector<int>> cells_10 = {{1, 2}, {3, 4}};
std::vector<char> characters_10 = {'o', 'x'};
int size_10 = 0;
try {
    CalculateWays(size_10, cells_10, characters_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> cells_11 = {{1, 2}, {3, 4}};
std::vector<char> characters_11 = {'o', 'x'};
int size_11 = 100001;
try {
    CalculateWays(size_11, cells_11, characters_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> cells_12 = {};
std::vector<char> characters_12 = {};
int size_12 = 10;
try {
    CalculateWays(size_12, cells_12, characters_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST 
std::vector<std::vector<int>> cells_13(100001, std::vector<int>{1, 2});
std::vector<char> characters_13(100001, 'o');
int size_13 = 10;
try {
    CalculateWays(size_13, cells_13, characters_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> cells_14 = {{-1, 2}, {3, 4}};
std::vector<char> characters_14 = {'o', 'x'};
int size_14 = 4;
try {
    CalculateWays(size_14, cells_14, characters_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST 
std::vector<std::vector<int>> cells_15 = {{1, 2}, {3, 5}};
std::vector<char> characters_15 = {'o', 'x'};
int size_15 = 4;
try {
    CalculateWays(size_15, cells_15, characters_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST 
std::vector<std::vector<int>> cells_16 = {{1, 2}, {3, 4}};
std::vector<char> characters_16 = {'o', 'y'};
int size_16 = 4;
try {
    CalculateWays(size_16, cells_16, characters_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST 
std::vector<std::vector<int>> cells_17 = {{1, 2}, {3, 4}};
std::vector<char> characters_17 = {'o', 'x'};
int size_17 = -10;
try {
    CalculateWays(size_17, cells_17, characters_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> cells_18 = {{-5, 1}, {2, 2}, {1, 3}};
std::vector<char> characters_18 = {'o', 'x', 'o'};
int size_18 = 3;
try {
    CalculateWays(size_18, cells_18, characters_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> cells_19 = {{1, 2}, {3, 4}};
std::vector<char> characters_19 = {'o', '\0'};
int size_19 = 4;
try {
    CalculateWays(size_19, cells_19, characters_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

    return 0;
}

