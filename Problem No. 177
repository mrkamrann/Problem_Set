/*
Link: https://codeforces.com/contest/1017/problem/F

Lester is a student in the neutral zone where education has evolved post-war. Lester's math teacher gave a challenging homework assignment involving a new math concept.

As we all know, the logarithm function can be described as:
log(p1^a1 p2^a2 ... pk^ak) = a1 log(p1) + a2 log(p2) + ... + ak log(pk)
where p1^a1 p2^a2 ... pk^ak is the prime factorization of an integer. However, this function uses itself in the definition, making it hard to calculate.

To simplify, mathematicians from the neutral zone invented this:
exlogf(p1^a1 p2^a2 ... pk^ak) = a1 f(p1) + a2 f(p2) + ... + ak f(pk)
Notice that exlogf(1) is always equal to 0.

This concept for any function f was too hard for children. So teachers told them that f can only be a polynomial of degree no more than 3 in daily uses
(i.e., f(x) = Ax^3 + Bx^2 + Cx + D).

"Class is over! Don't forget to do your homework!" Here it is: ∑i=1 to n exlogf(i)

Help children to do their homework. Since the value can be very big, you need to find the answer modulo 2^32.

Create a C++ Function ComputeExlogSum that will return an unsigned integer denoting the result of the summation.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An integer denoting max_value
An integer denoting coefficient_a
An integer denoting coefficient_b
An integer denoting coefficient_c
An integer denoting coefficient_d

Input Constraints

The value of max_value should be at least 1 and at most 3×10^5 inclusive.
The values of coefficient_a, coefficient_b, coefficient_c, and coefficient_d should be in the range [0, 10^5] inclusive.

*/

#include <iostream>
#include <bitset>
#include <stdexcept>
#include <cassert>

int CalculateValue(int number) {
    if (!(number % 2) || !(number % 3)) {
        return 0;
    } else {
        return number - number / 2 - number / 3 + number / 6 - 1;
    }
}

unsigned int PolynomialFunction(int x_val, int coefficient_a, int coefficient_b, int coefficient_c, int coefficient_d) {
    return static_cast<unsigned int>(coefficient_a) * x_val * x_val * x_val + 
           static_cast<unsigned int>(coefficient_b) * x_val * x_val + 
           static_cast<unsigned int>(coefficient_c) * x_val + 
           static_cast<unsigned int>(coefficient_d);
}

unsigned int ComputeExlogSum(int max_value, int coefficient_a, int coefficient_b, int coefficient_c, int coefficient_d) {
    if (max_value < 1 || max_value > 300000000) {
        throw std::invalid_argument("max_value must be between 1 and 300,000,000");
    }
    if (coefficient_a < 0 || coefficient_a > 1000000 ||  coefficient_b < 0 || coefficient_b > 1000000 || coefficient_c < 0 || coefficient_c > 1000000 ||  coefficient_d < 0 || coefficient_d > 1000000) {
        throw std::invalid_argument("Coefficients must be between 0 and 1,000,000");
    }

    unsigned int answer = 0;
    std::bitset<1000005> bitset_values;

    for (int i = 2; i <= max_value; i++) {
        int calculated_value = CalculateValue(i);
        if (!bitset_values[calculated_value] || i == 2 || i == 3) {
            for (int j = 2 * i; j <= max_value; j += i) {
                bitset_values[CalculateValue(j)] = 1;
            }
            unsigned int sum_values = 0;
            int temp_value = max_value / i;
            while (temp_value) {
                sum_values += temp_value;
                temp_value /= i;
            }
            answer += sum_values * PolynomialFunction(i, coefficient_a, coefficient_b, coefficient_c, coefficient_d);
        }
    }
    return answer;
}

#include <iostream>
#include <bitset>
#include <stdexcept>
#include <cassert>

int main() {
  
//TEST
int x_val_1 = 10;
int coefficient_a_1 = 1;
int coefficient_b_1 = 2;
int coefficient_c_1 = 3;
int coefficient_d_1 = 4;
unsigned int expected_1 = 1294;  
unsigned int result_1 = ComputeExlogSum(x_val_1, coefficient_a_1, coefficient_b_1, coefficient_c_1, coefficient_d_1);
assert(result_1 == expected_1);

//TEST_END

//TEST
int x_val_2 = 100;
int coefficient_a_2 = 10;
int coefficient_b_2 = 20;
int coefficient_c_2 = 30;
int coefficient_d_2 = 40;
unsigned int expected_2 = 54025740;  
unsigned int result_2 = ComputeExlogSum(x_val_2, coefficient_a_2, coefficient_b_2, coefficient_c_2, coefficient_d_2);
assert(result_2 == expected_2);

//TEST_END

//TEST
int x_val_3 = 10;
int coefficient_a_3 = 5;
int coefficient_b_3 = 10;
int coefficient_c_3 = 15;
int coefficient_d_3 = 20;
unsigned int expected_3 = 6470;  
unsigned int result_3 = ComputeExlogSum(x_val_3, coefficient_a_3, coefficient_b_3, coefficient_c_3, coefficient_d_3);
assert(result_3 == expected_3);

//TEST_END

//TEST
int x_val_4 = 200;
int coefficient_a_4 = 500;
int coefficient_b_4 = 1000;
int coefficient_c_4 = 1500;
int coefficient_d_4 = 2000;
unsigned int expected_4 = 4178003040; 
unsigned int result_4 = ComputeExlogSum(x_val_4, coefficient_a_4, coefficient_b_4, coefficient_c_4, coefficient_d_4);
assert(result_4 == expected_4);

//TEST_END

//TEST
int x_val_5 = 1238;
int coefficient_a_5 = 234;
int coefficient_b_5 = 567;
int coefficient_c_5 = 890;
int coefficient_d_5 = 123;
unsigned int expected_5 = 3862542508;
unsigned int result_5 = ComputeExlogSum(x_val_5, coefficient_a_5, coefficient_b_5, coefficient_c_5, coefficient_d_5);
assert(result_5 == expected_5);

//TEST_END

//TEST
int x_val_6 = 982;
int coefficient_a_6 = 111;
int coefficient_b_6 = 222;
int coefficient_c_6 = 333;
int coefficient_d_6 = 444;
unsigned int expected_6 = 2603269870;  
unsigned int result_6 = ComputeExlogSum(x_val_6, coefficient_a_6, coefficient_b_6, coefficient_c_6, coefficient_d_6);
assert(result_6 == expected_6);

//TEST_END

//TEST
int x_val_7 = 33333;
int coefficient_a_7 = 1234;
int coefficient_b_7 = 654;
int coefficient_c_7 = 9;
int coefficient_d_7 = 888;
unsigned int expected_7 = 2182661078;  
unsigned int result_7 = ComputeExlogSum(x_val_7, coefficient_a_7, coefficient_b_7, coefficient_c_7, coefficient_d_7);
assert(result_7 == expected_7);

//TEST_END

//TEST
int x_val_8 = 214;
int coefficient_a_8 = 1000;
int coefficient_b_8 = 5000;
int coefficient_c_8 = 2500;
int coefficient_d_8 = 1250;
unsigned int expected_8 = 3059551100;
unsigned int result_8 = ComputeExlogSum(x_val_8, coefficient_a_8, coefficient_b_8, coefficient_c_8, coefficient_d_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
int x_val_9 = 3000;
int coefficient_a_9 = 10000;
int coefficient_b_9 = 10000;
int coefficient_c_9 = 10000;
int coefficient_d_9 = 10000;
unsigned int expected_9 = 2299186160; 
unsigned int result_9 = ComputeExlogSum(x_val_9, coefficient_a_9, coefficient_b_9, coefficient_c_9, coefficient_d_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
int x_val_10 = 300000022;
int coefficient_a_10 = 1000000;
int coefficient_b_10 = 1000000;
int coefficient_c_10 = 1000000;
int coefficient_d_10 = 1000000;
try {
    ComputeExlogSum(x_val_10, coefficient_a_10, coefficient_b_10, coefficient_c_10, coefficient_d_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int x_val_11 = -99999;
int coefficient_a_11 = 1000000;
int coefficient_b_11 = 1000000;
int coefficient_c_11 = 1000000;
int coefficient_d_11 = 1000000;
try {
    ComputeExlogSum(x_val_11, coefficient_a_11, coefficient_b_11, coefficient_c_11, coefficient_d_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int x_val_12 = 300000000;
int coefficient_a_12 = -1;
int coefficient_b_12 = 1000000;
int coefficient_c_12 = -1000000;
int coefficient_d_12 = 1000000;
try {
    ComputeExlogSum(x_val_12, coefficient_a_12, coefficient_b_12, coefficient_c_12, coefficient_d_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int x_val_13 = 300000000;
int coefficient_a_13 = 1000000;
int coefficient_b_13 = -1;
int coefficient_c_13 = 1000000;
int coefficient_d_13 = -1000000;
try {
    ComputeExlogSum(x_val_13, coefficient_a_13, coefficient_b_13, coefficient_c_13, coefficient_d_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int x_val_14 = 300000000;
int coefficient_a_14 = 1000000;
int coefficient_b_14 = 1000000;
int coefficient_c_14 = -1;
int coefficient_d_14 = 1000000;
try {
    ComputeExlogSum(x_val_14, coefficient_a_14, coefficient_b_14, coefficient_c_14, coefficient_d_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int x_val_15 = 300000000;
int coefficient_a_15 = 1000000;
int coefficient_b_15 = 1000000;
int coefficient_c_15 = 1000000;
int coefficient_d_15 = -1;
try {
    ComputeExlogSum(x_val_15, coefficient_a_15, coefficient_b_15, coefficient_c_15, coefficient_d_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

    return 0;
}
