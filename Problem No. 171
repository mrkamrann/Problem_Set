/*
Link : https://codeforces.com/contest/698/problem/D

Jason is in a dangerous place called Bearland and can’t travel on foot. Instead, he has stone_count magic teleportation stones. Each stone can be used at most once.
which is denoted by a 2D vector monsters, where the i-th stone allows him to teleport to a point (axi, ayi). Jason can use the stones in any order.

There are monster_count monsters in Bearland, which is denoted by a 2D vector monsters, where the i-th monster stands at (mxi, myi).

The given points are pairwise distinct.

After each teleportation, Jason can shoot an arrow in some direction. An arrow will hit the first monster in the chosen direction. Then, both the arrow and the 
monster disappear. It’s dangerous to stay in one place for long, so Jason can shoot only one arrow from one place.

A monster should be afraid if it’s possible that Jason will hit it. How many monsters should be afraid of Jason?

Create a C++ function CountAfraidMonsters that will return an integer denoting the number of monsters that should be afraid.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

std::vector<std::vector<long long>> denoting stones
std::vector<std::vector<long long>> denoting monsters

Input Constraints:

The size of stones should be at least 1 and at most 7 inclusive.
The size of monsters should be at least 1 and at most 1000 inclusive.
Each value of stones[i][0] and stones[i][1] should be in the range [-10^9, 10^9] inclusive.
Each value of monsters[i][0] and monsters[i][1] should be in the range [-10^9, 10^9] inclusive.
The given stones and monsters points are pairwise distinct.
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <set>
#include <cassert>

std::pair<long long, long long> SubtractPair(const std::pair<long long, long long>& first_pair, const std::pair<long long, long long>& second_pair) {
    return {first_pair.first - second_pair.first, first_pair.second - second_pair.second};
}

long long DotProduct(const std::pair<long long, long long>& first_pair, const std::pair<long long, long long>& second_pair) {
    return first_pair.first * second_pair.first + first_pair.second * second_pair.second;
}

long long CrossProduct(const std::pair<long long, long long>& first_pair, const std::pair<long long, long long>& second_pair) {
    return first_pair.first * second_pair.second - first_pair.second * second_pair.first;
}

bool DepthFirstSearch(long long remaining_depth, long long stack_top, std::vector<long long>& stack, std::vector<std::vector<std::vector<long long>>>& paths, std::vector<long long>& tags, long long current_time, std::vector<bool>& visited, long long stone_count) {
    if (stack_top == 0) return true;
    long long current_node = stack[stack_top];
    for (long long stone_index = 1; stone_index <= stone_count; stone_index++) {
        if (visited[stone_index]) continue;
        visited[stone_index] = true;
        long long last_top = stack_top;
        stack_top--;
        for (long long path_index = 1; path_index <= paths[stone_index][current_node][0]; path_index++) {
            if (tags[paths[stone_index][current_node][path_index]] != current_time) {
                stack[++stack_top] = paths[stone_index][current_node][path_index];
                tags[stack[stack_top]] = current_time;
            }
        }
        if (stack_top < remaining_depth && DepthFirstSearch(remaining_depth - 1, stack_top, stack, paths, tags, current_time, visited, stone_count)) return true;
        while (stack_top >= last_top) tags[stack[stack_top--]] = 0;
        stack[++stack_top] = current_node;
        visited[stone_index] = false;
    }
    return false;
}

long long CountAfraidMonsters(std::vector<std::vector<long long>>& stones, std::vector<std::vector<long long>>& monsters) {
    int stone_count = stones.size();
    int monster_count = monsters.size();

    if (stone_count < 1 || stone_count > 7 || monster_count < 1 || monster_count > 1000) {
        throw std::invalid_argument("Invalid input size: Number of stones (stone_count) must be between 1 and 7, and number of monsters (monster_count) must be between 1 and 1000.");
    }

    std::vector<std::pair<long long, long long>> coordinates(monster_count + stone_count + 1);
    std::set<std::pair<long long, long long>> unique_points;

    for (int stone_index = 1; stone_index <= stone_count; stone_index++) {
        long long x_val = stones[stone_index - 1][0];
        long long y_val = stones[stone_index - 1][1];
        if (x_val < -1e9 || x_val > 1e9 || y_val < -1e9 || y_val > 1e9) {
            throw std::invalid_argument("Invalid coordinates: Stone coordinates must be between -10^9 and 10^9.");
        }
        coordinates[monster_count + stone_index] = {x_val, y_val};
        if (!unique_points.insert({x_val, y_val}).second) {
            throw std::invalid_argument("Invalid input: Points must be pairwise distinct.");
        }
    }

    for (int monster_index = 1; monster_index <= monster_count; monster_index++) {
        long long x_val = monsters[monster_index - 1][0];
        long long y_val = monsters[monster_index - 1][1];
        if (x_val < -1e9 || x_val > 1e9 || y_val < -1e9 || y_val > 1e9) {
            throw std::invalid_argument("Invalid coordinates: Monster coordinates must be between -10^9 and 10^9.");
        }
        coordinates[monster_index] = {x_val, y_val};
        if (!unique_points.insert({x_val, y_val}).second) {
            throw std::invalid_argument("Invalid input: Points must be pairwise distinct.");
        }
    }

    std::vector<std::vector<std::vector<long long>>> paths(stone_count + 1, std::vector<std::vector<long long>>(monster_count + 1, std::vector<long long>(monster_count + 1)));
    for (int stone_index = 1; stone_index <= stone_count; stone_index++) {
        for (int start_index = 1; start_index <= monster_count; start_index++) {
            for (int end_index = 1; end_index <= monster_count; end_index++) {
                if (CrossProduct(SubtractPair(coordinates[end_index], coordinates[monster_count + stone_index]), SubtractPair(coordinates[start_index], coordinates[monster_count + stone_index])) == 0 &&
                    DotProduct(SubtractPair(coordinates[end_index], coordinates[monster_count + stone_index]), SubtractPair(coordinates[end_index], coordinates[start_index])) < 0) {
                    paths[stone_index][start_index][++paths[stone_index][start_index][0]] = end_index;
                }
            }
        }
    }

    long long result = 0;
    std::vector<long long> stack(monster_count + 1), tags(monster_count + 1);
    std::vector<bool> visited(stone_count + 1);
    for (int monster_index = 1; monster_index <= monster_count; monster_index++) {
        long long current_time = monster_index + 1;
        tags[monster_index] = current_time;
        long long stack_top = 1;
        stack[1] = monster_index;
        std::fill(visited.begin(), visited.end(), false);
        if (DepthFirstSearch(stone_count, stack_top, stack, paths, tags, current_time, visited, stone_count)) {
            result++;
        }
    }

    return result;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <set>
#include <cassert>

int main() {
   
   // TEST
    std::vector<std::vector<long long>> stones_1 = {{1, 1}, {2, 2}, {3, 3}};
    std::vector<std::vector<long long>> monsters_1 = {{4, 4}, {5, 5}, {6, 6}};
    long long expected_1 = 3;
    long long result_1 = CountAfraidMonsters(stones_1, monsters_1);
    assert(result_1 == expected_1);
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_2 = {{-1000000000, 1000000000}};
    std::vector<std::vector<long long>> monsters_2 = {{0, 0}};
    long long expected_2 = 1;
    long long result_2 = CountAfraidMonsters(stones_2, monsters_2);
    assert(result_2 == expected_2);
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_3 = {{0, 0}, {1, 2}, {0, 99}};
    std::vector<std::vector<long long>> monsters_3 = {{1, 3}, {2, 5}, {3, 3}};
    long long expected_3 = 3;
    long long result_3 = CountAfraidMonsters(stones_3, monsters_3);
    assert(result_3 == expected_3);

  //TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_4 = {{7, 8}, {8, 7}, {9, 9}, {-100, 100}, {100, 100}, {0, 0},  {0, 2}};
    std::vector<std::vector<long long>> monsters_4 = {{10, 10}, {11, 11}, {12, 12}, {5, 6}, {6, 7},{1, 6}, {2, 0}};
    long long expected_4 = 7;
    long long result_4 = CountAfraidMonsters(stones_4, monsters_4);
    assert(result_4 == expected_4);
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_5 = {{-1, -1}, {-2, -2}, {-3, -3}};
    std::vector<std::vector<long long>> monsters_5 = {{-4, -4}, {-5, -5}, {-6, -6}};
    long long expected_5 = 3;
    long long result_5 = CountAfraidMonsters(stones_5, monsters_5);
    assert(result_5 == expected_5);
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_6 = {{-100, 100}, {100, 100}, {0, 0},  {0, 2}};
    std::vector<std::vector<long long>> monsters_6 = {{50, 50}, {-50, -50}, {100, -100},  {0, 1}};
    long long expected_6 = 4;
    long long result_6 = CountAfraidMonsters(stones_6, monsters_6);
    assert(result_6 == expected_6);
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_7 = {{3, 3}};
    std::vector<std::vector<long long>> monsters_7 = {{12, 12}};
    long long expected_7 = 1;
    long long result_7 = CountAfraidMonsters(stones_7, monsters_7);
    assert(result_7 == expected_7);
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_8 = {{1, 2}, {2, 3}, {3, 4},{1, 777}, {2, 5}, {3, 44}};
    std::vector<std::vector<long long>> monsters_8 = {{4, 5}, {5, 6}, {6, 7},{1, 6}, {2, 0}, {3, 555}};
    long long expected_8 = 6;
    long long result_8 = CountAfraidMonsters(stones_8, monsters_8);
    assert(result_8 == expected_8);

  //TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_9 = {{0, 1}, {1, 0}};
    std::vector<std::vector<long long>> monsters_9 = {{2, 2}, {2, 3}};
    long long expected_9 = 2;
    long long result_9 = CountAfraidMonsters(stones_9, monsters_9);
    assert(result_9 == expected_9);

    //TEST_END
  

    // TEST
    std::vector<std::vector<long long>> stones_10 = {{-1000000001, 0}, {0, 1000000001}};
    std::vector<std::vector<long long>> monsters_10 = {{1000000001, 0}, {0, 1000000001}};
    try {
        CountAfraidMonsters(stones_10, monsters_10);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_11 = {{1, 2}, {3, 4}};
    std::vector<std::vector<long long>> monsters_11 = {{5, 6}, {-7, -1000000008}};
    try {
        CountAfraidMonsters(stones_11, monsters_11);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_12 = {{1, 2}, {3, 4}, {5, 6}, {7, 8}};
    std::vector<std::vector<long long>> monsters_12 = {{1000000008, 10}};
    try {
        CountAfraidMonsters(stones_12, monsters_12);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
//TEST_END
  
    // TEST
    std::vector<std::vector<long long>> stones_13 = {{1, 2}, {3, 4}};
    std::vector<std::vector<long long>> monsters_13 = {};
    try {
        CountAfraidMonsters(stones_13, monsters_13);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
//TEST_END

    // TEST
    std::vector<std::vector<long long>> stones_14 = {};
    std::vector<std::vector<long long>> monsters_14 = {{7, 8}, {9, 10}};
    try {
        CountAfraidMonsters(stones_14, monsters_14);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
  //TEST_END
  
     // TEST
    std::vector<std::vector<long long>> stones_15 = {{1,1000000008}};
    std::vector<std::vector<long long>> monsters_15 = {{1, 1}};
    try {
        CountAfraidMonsters(stones_15, monsters_15);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
  
    //TEST_END

    // TEST
    std::vector<std::vector<long long>> stones_16 = {{1, 1}, {2, -10000000008}, {3, 3}, {4, 4}, {5, 5}, {6, 6}, {7, 7}, {8, 8}};
    std::vector<std::vector<long long>> monsters_16 = {{1, 1}};
    try {
        CountAfraidMonsters(stones_16, monsters_16);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }

//TEST_END
    return 0;
}


