/*
Link : https://codeforces.com/contest/1750/problem/F

Everyone was happy coding until suddenly a power shortage happened, and the best competitive programming site went down. Fortunately, a system administrator bought
some new equipment recently, including some UPSs. Thus there are some servers that are still online, but we need all of them to be working in order to keep the 
round rated.

Imagine the servers being a binary string s of length len. If the i-th server is online, then si=1, and si=0 otherwise.
A system administrator can do the following operation called electricity spread, which consists of the following phases:

Select two servers at positions 1 ≤ i < j ≤ len such that both are online (i.e., s_i = 1 and s_j = 1). The spread starts only from online servers.
Check if we have enough power to make the spread. We consider having enough power if the number of turned on servers in range [i, j] is at least the number 
of turned off servers in range [i, j]. More formally, check whether 2*(si + si+1 + ... + sj) ≥ j - i + 1.
If the check is positive, turn on all the offline servers in range [i, j]. More formally, make sk := 1 for all k from i to j.
We call a binary string s of length len rated if we can turn on all servers (i.e., make si=1 for 1 ≤ i ≤ len) using the electricity spread operation any number 
of times (possibly, 0). Your task is to find the number of rated strings of length len modulo module.

Create a C++ function CountRatedStrings that will return a long long denoting the number of rated binary strings of length len modulo module. 

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting len
An integer denotin module

Input Constraints:

The value of len should be at least 1 and at most 5000 inclusive.
The value of module should be at least 10 and at most 10^9 inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

long long CountRatedStrings(int len, int module) {

    if (len < 1 || len > 5000) {
        throw std::invalid_argument("len must be between 1 and 5000");
    }

    if (module < 10 || module > 1000000000) {
        throw std::invalid_argument("module must be between 10 and 1,000,000,000");
    }

    std::vector<long long> f_vec(len + 1, 0);

    std::vector<long long> g_vec(len + 1, 0);

    std::vector<long long> h_vec(len + 1, 0);

    long long temp = 1;

    g_vec[0] = 1;

    for (int i = 1; i <= len; ++i)
    {
        g_vec[i] = g_vec[i - 1];

        for (int j = 1; j < i; ++j)
         {
            if (3 * j < i)
            {
                g_vec[i] = (g_vec[i] + g_vec[i - 3 * j - 1] * f_vec[j]) % module;
            }

            h_vec[i] = (h_vec[i] + f_vec[j] * f_vec[i - j]) % module;

            if (2 * j < i)
            {
                f_vec[i] = (f_vec[i] + h_vec[j] * g_vec[i - 2 * j - 1]) % module;
            }
        }
        if (i > 2)
        {
            temp = temp * 2 % module;
        }

        f_vec[i] = (temp + module - f_vec[i]) % module;
    }

    return f_vec[len];
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {

//TEST

int len_1 = 1;
int module_1 = 10;
long long expected_1 = 1;
long long result_1 = CountRatedStrings(len_1, module_1);
assert(result_1 == expected_1);
//TEST_END

//TEST


int len_2 = 2;
int module_2 = 100;
long long expected_2 = 1;
long long result_2 = CountRatedStrings(len_2, module_2);
assert(result_2 == expected_2);
//TEST_END

//TEST


int len_3 = 3;
int module_3 = 1000;
long long expected_3 = 2;
long long result_3 = CountRatedStrings(len_3, module_3);
assert(result_3 == expected_3);
//TEST_END

//TEST


int len_4 = 4;
int module_4 = 10000;
long long expected_4 = 4;
long long result_4 = CountRatedStrings(len_4, module_4);
assert(result_4 == expected_4);
//TEST_END

//TEST


int len_5 = 5;
int module_5 = 100000;
long long expected_5 = 7;
long long result_5 = CountRatedStrings(len_5, module_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

int len_6 = 1000;
int module_6 = 1000000;
long long expected_6 = 602669;
long long result_6 = CountRatedStrings(len_6, module_6);
assert(result_6 == expected_6);
//TEST_END

//TEST


int len_7 = 5000;
int module_7 = 1000000000;
long long expected_7 = 832630065;
long long result_7 = CountRatedStrings(len_7, module_7);
assert(result_7 == expected_7);
//TEST_END

//TEST

int len_8 = 1234;
int module_8 = 987654321;
long long expected_8 = 197556551;
long long result_8 = CountRatedStrings(len_8, module_8);
assert(result_8 == expected_8);
//TEST_END

//TEST


int len_9 = 4321;
int module_9 = 999999937;
long long expected_9 = 210748417;
long long result_9 = CountRatedStrings(len_9, module_9);
assert(result_9 == expected_9);
//TEST_END

//TEST


int len_10 = 0;
int module_10 = 100;
try {
    CountRatedStrings(len_10, module_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

int len_11 = 5001; 
int module_11 = 100;
try {
    CountRatedStrings(len_11, module_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

int len_12 = 1000;
int module_12 = 9;
try {
    CountRatedStrings(len_12, module_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

int len_13 = 1000;
int module_13 = 1000000001;
try {
    CountRatedStrings(len_13, module_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

int len_14 = -1; 
int module_14 = 100;
try {
    CountRatedStrings(len_14, module_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST


int len_15 = 1000;
int module_15 = -100; 
try {
    CountRatedStrings(len_15, module_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END



    return 0;
}

