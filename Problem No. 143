/*
Link: https://codeforces.com/contest/406/problem/E

Johnny is having a nightmare. Even in dreams, all he thinks about is math.

Johnny dreams about num_cols binary vectors of length num_rows, indexed with numbers from 1 to num_cols. The most horrifying part is that the bits of each 
vector are ordered in either ascending or descending order. For example, Johnny could be dreaming about the following 4 vectors of length 5:

00000
00001
11110
11111

The Hamming distance H(a, b) between two vectors a and b of length num_rows is the number of positions at which the corresponding symbols are different.

Johnny thinks that each three vectors with different indices constitute a single triple. Johnny's delusion is that he will wake up only if he counts the number 
of such vector triples a, b, c that the sum H(a, b) + H(b, c) + H(c, a) is maximal among all the vector triples constructed from the dreamed vectors.

Help Johnny wake up from this nightmare!

You are given two  integers num_rows and num_cols, the length and the number of vectors.
You are also given a 2D vector coordinates of size num_cols each coordinates[i] = [x_i, y_i] where integers x_i and y_i ,the description of the vector with index i; 
that means that the first y_i bits of the i-th vector are equal to x_i, and the remaining num_rows - y_i bits are equal to 1 - x_i. 
There can be multiple equal vectors in Johnny's dream.


Return single number, the number of such vector triples among the given that the sum of the Hamming distances between the vectors of the triple is maximal.

Create a C++ Function FindMaxHammingTriples that will return a long long denoting the number of such vector triples.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

An integer denoting num_rows 
An integer denoting num_cols
A vector<vector<int>> denoting coordinates

Input Constraints

The value of num_rows should be at least 1 and at most 10^9 inclusive.
The value of num_cols should be at least 3 and at most 10^5 inclusive.
Each value of x_i should be in the range [0, 1] inclusive.
Each value of y_i should be in the range [1, num_rows] inclusive.

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <stdexcept>

long long CalculateCombinations(int x_val, int y_val, int mod) {
    long long z_val = (y_val - x_val + mod) % mod + 1;
    if (z_val < 3) return 0;
    return z_val * (z_val - 1) * (z_val - 2) / 6;
}

long long FindMaxHammingTriples(int num_rows, int num_cols, std::vector<std::vector<int>>& coordinates) {
  
   if (num_rows < 1 || num_rows > 1000000000) {
    throw std::invalid_argument("Invalid value of num_rows: out of valid range");
}
if (num_cols < 3 || num_cols > 100000) {
    throw std::invalid_argument("Invalid value of num_cols: out of valid range");
}
  
  for (int i = 0; i < num_cols; ++i) {

    if (coordinates[i][0] < 0 || coordinates[i][0] > 1) {
        throw std::invalid_argument("Invalid value of coordinates[i][0] in coordinates: must be 0 or 1");
    }
    if (coordinates[i][1] < 1 || coordinates[i][1] > num_rows) {
        throw std::invalid_argument("Invalid value of coordinates[i][1] in coordinates: out of valid range");
    }
}
  
    std::vector<int> flattened_coords(num_cols + 1);
    for (int i = 1; i <= num_cols; ++i) {
        int row = coordinates[i - 1][0];
        int col = coordinates[i - 1][1];
        flattened_coords[i] = row * num_rows + col;
    }

    std::sort(flattened_coords.begin() + 1, flattened_coords.end());

    long long ans = CalculateCombinations(1, num_cols, num_cols);
    int start_index = 1, end_index = 1;
    
    if (flattened_coords[1] < flattened_coords[num_cols]) {
        for (int i = 1, j = 1; i <= num_cols; ++i) {
            while ((flattened_coords[j] == flattened_coords[i] || flattened_coords[j % num_cols + 1] != flattened_coords[i]) && 
                   ((long long)flattened_coords[j % num_cols + 1] - flattened_coords[i] + num_rows + num_rows) % (num_rows + num_rows) < num_rows) {
                j = j % num_cols + 1;
            }
            if ((j - i + num_cols) % num_cols > 1) {
                ans -= (long long)((j - i + num_cols) % num_cols) * ((j - i - 1 + num_cols) % num_cols) >> 1;
            }
            if ((j - i + num_cols) % num_cols > (end_index - start_index + num_cols) % num_cols) {
                start_index = i;
                end_index = j;
            }
            if (j == i) j++;
        }
    }

    if (!ans) {
        int s_index = start_index;
        int t_index = end_index;
        while (flattened_coords[s_index % num_cols + 1] == flattened_coords[s_index]) s_index = s_index % num_cols + 1;
        while (flattened_coords[(t_index - 2 + num_cols) % num_cols + 1] == flattened_coords[t_index]) t_index = (t_index - 2 + num_cols) % num_cols + 1;
        ans = CalculateCombinations(start_index, end_index, num_cols) - CalculateCombinations(start_index, t_index - 1, num_cols) - 
              CalculateCombinations(s_index + 1, end_index, num_cols) + (s_index % num_cols + 1 != t_index ? CalculateCombinations(s_index + 1, t_index - 1, num_cols) : 0);
    }

    return ans;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <cmath>
#include <stdexcept>

int main() {
   

    return 0;
}
