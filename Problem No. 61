/*
Link: https://leetcode.com/problems/maximum-students-taking-exam/description/ 

Jimmy was a young programmer, always eager to solve new challenges. One day, he encountered an intriguing problem involving the arrangement of students in a classroom.

Jimmy was given a rows x cols matrix called seats that represented the distribution of seats in a classroom. If a seat was broken, it was denoted by the '#' character;
otherwise, it was denoted by the '.' character.

Students could see the answers of those sitting next to them on the left, right, upper left, and upper right. However, they could not see the answers of the student 
sitting directly in front or behind them. Jimmy's task was to determine the maximum number of students that could take the exam together without any possibility of 
cheating.

Students had to be placed in seats in good condition.

Input Type:

A vector<vector<char>> denoting seats.

Input Constraints:

The matrix seats contains only characters '.' and '#'.
The number of rows (rows) is equal to seats.length.
The number of columns (cols) is equal to seats[0].length.
The values of rows and cols should be between 1 and 8 inclusive.

*/

#include <vector>
#include <cstring>
#include <stdexcept>
#include <algorithm>
#include <cassert>

class Solution {
public:
    int rows;
    int cols;
    int dp_arr[10][1025];

    int FindMaxStudents(int row_index, int prev, int flag, std::vector<std::vector<char>>& seats_matrix) {
        if (row_index >= rows) {
            return 0;
        }

        if (dp_arr[row_index][prev] != -1) {
            return dp_arr[row_index][prev];
        }

        int result = 0;

        if (flag == 1) {
            for (int j = 0; j < (1 << cols); ++j) {
                int current_mask = 0;
                bool valid = false;

                for (int k = 0; k < cols; ++k) {
                    if (j & (1 << k)) {
                        if (seats_matrix[row_index][k] == '.') {
                            if (k > 0 && current_mask & (1 << (k - 1))) {
                                valid = true;
                                break;
                            } else {
                                current_mask |= (1 << k);
                            }
                        } else {
                            valid = true;
                            break;
                        }
                    }
                }

                if (!valid) {
                    int temp_count = __builtin_popcount(current_mask);
                    result = std::max(result, temp_count + FindMaxStudents(row_index + 1, current_mask, 0, seats_matrix));
                }
            }
        } else {
            for (int j = 0; j < (1 << cols); ++j) {
                int current_mask = 0;
                bool valid = false;

                for (int k = 0; k < cols; ++k) {
                    if (j & (1 << k)) {
                        if (seats_matrix[row_index][k] == '.') {
                            if (k > 0 && (current_mask & (1 << (k - 1)))) {
                                valid = true;
                                break;
                            } else {
                                current_mask |= (1 << k);
                            }
                        } else {
                            valid = true;
                            break;
                        }
                    }
                }

                for (int k = 0; k < cols; ++k) {
                    if (current_mask & (1 << k)) {
                        if (k == 0) {
                            if (prev & (1 << (k + 1))) {
                                valid = true;
                                break;
                            }
                        } else if (k == cols - 1) {
                            if (prev & (1 << (k - 1))) {
                                valid = true;
                                break;
                            }
                        } else {
                            if ((prev & (1 << (k + 1))) || (prev & (1 << (k - 1)))) {
                                valid = true;
                                break;
                            }
                        }
                    }
                }

                if (!valid) {
                    int temp_count = __builtin_popcount(current_mask);
                    result = std::max(result, temp_count + FindMaxStudents(row_index + 1, current_mask, 0, seats_matrix));
                }
            }
        }

        return dp_arr[row_index][prev] = result;
    }

    int MaxStudents(std::vector<std::vector<char>>& seats) {

        std::memset(dp_arr, -1, sizeof(dp_arr));

        rows = seats.size();
        cols = seats[0].size();

        if (rows < 1 || rows > 8 || cols < 1 || cols > 8) {
            throw std::invalid_argument("Invalid input: Number of rows and columns should be between 1 and 8 inclusive.");
        }

        for (int i = 0; i < rows; ++i) {
          if (seats[i].size()!=cols) {
            throw std::invalid_argument("Invalid input: each seats[i] should be of size cols");
        }
            for (int j = 0; j < cols; ++j) {
                if (seats[i][j] != '.' && seats[i][j] != '#') {
                    throw std::invalid_argument("Invalid input: Matrix seats contains only characters '.' and '#'.");
                }
            }
        }

        return FindMaxStudents(0, 0, 1, seats);
    }

};


int main(){
 
Solution obj;
//TEST

std::vector<std::vector<char>> seats_1 = {
    {'#', '.', '#', '#', '.', '#'},
    {'.', '#', '#', '#', '#', '.'},
    {'#', '.', '#', '#', '.', '#'}
};
int expected_1 = 4;
int result_1 = obj.MaxStudents(seats_1);
assert(result_1 == expected_1);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_2 = {
    {'.', '#'},
    {'#', '#'}
};
int expected_2 = 1;
int result_2 = obj.MaxStudents(seats_2);
assert(result_2 == expected_2);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_3 = {
    {'.'}
};
int expected_3 = 1;
int result_3 = obj.MaxStudents(seats_3);
assert(result_3 == expected_3);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_4 = {
    {'.', '#', '.'},
    {'#', '#', '#'},
    {'.', '#', '.'}
};
int expected_4 = 4;
int result_4 = obj.MaxStudents(seats_4);
assert(result_4 == expected_4);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_5 = {
    {'.', '.', '#'},
    {'#', '#', '.'},
    {'.', '#', '#'}
};
int expected_5 = 3;
int result_5 = obj.MaxStudents(seats_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_6 = {
    {'#', '#', '#', '#'},
    {'.', '.', '.', '.'},
    {'#', '#', '#', '#'}
};
int expected_6 = 2;
int result_6 = obj.MaxStudents(seats_6);
assert(result_6 == expected_6);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_7 = {
    {'.', '.', '.', '.'},
    {'.', '#', '#', '.'},
    {'.', '.', '.', '.'}
};
int expected_7 = 6;
int result_7 = obj.MaxStudents(seats_7);
assert(result_7 == expected_7);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_8 = {
    {'.', '.', '.'},
    {'.', '.', '.'},
    {'.', '.', '.'}
};
int expected_8 = 6;
int result_8 = obj.MaxStudents(seats_8);
assert(result_8 == expected_8);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_9 = {
    {'#', '#', '#', '#', '#', '#'},
    {'#', '#', '#', '#', '#', '#'},
    {'#', '#', '#', '#', '#', '#'}
};
int expected_9 = 0;
int result_9 = obj.MaxStudents(seats_9);
assert(result_9 == expected_9);
//TEST_END

//TEST

std::vector<std::vector<char>> seats_10 = {{}};
try {
    obj.MaxStudents(seats_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<std::vector<char>> seats_11 = {
    {'#', '.', '#'},
    {'#', 'a', '#'},
    {'#', '.', '#'}
};
try {
   obj.MaxStudents(seats_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<std::vector<char>> seats_12 = {
    {'.', '.', '.'},
    {'#', '#', '#'},
   {'.', '.', '.'},
  {'.', '.', '.'},
  {'.', '.', '.'},
  {'.', '.', '.'},
  {'.', '.', '.'},
  {'.', '.', '.'},
  {'.', '.', '.'},
  {'.', '.', '.'}
};
try {
    obj.MaxStudents(seats_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST

std::vector<std::vector<char>> seats_13 = {
    {'#', '.', '#','#', '.', '#','#', '.', '#'},
    {'#', '#', '#'},
    {'#', '.', '#'}
};
try {
   obj.MaxStudents(seats_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  return 0;
}
