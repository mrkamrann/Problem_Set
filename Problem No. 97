/*
Link : https://codeforces.com/problemset/problem/1712/E2

Julie is given a 2D vector ranges of length len, represented as ranges[i] = [low_i, high_i], or each element in ranges vector contains two positive 
integers, low and high.

Julie needs to count the number of distinct triplets of integers (i, j, k) such that low_i <= i < j < k <= high_i and Lcm(i, j, k) >= i + j + k.

Here, Lcm(i, j, k) denotes the least common multiple (LCM) of integers i, j, and k.

Return a vector result, where result[i] denotes the number of suitable triplets for ranges[i].

Create a C++ function CountSuitableTriplets that will return a vector<long long> denoting the vector result.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

A vector of pairs vector<pair<int, int>> denoting the values of low and high for each test case.

Input Constraints

The value of len should be at least 1 and at most 10^5 inclusive.
Each value of low_i should be in the range [1, 2 * 10^5] inclusive.
Each value of high_i should be in the range [1, 2 * 10^5] inclusive.
The condition low_i + 2 <= high_i must hold for each ranges[i].

*/

#include <iostream>
#include <vector>
#include <array>
#include <algorithm>
#include <stdexcept>
#include <cassert>

class FenwickTree {
public:
    FenwickTree(int size) : size_(size), tree_(size) {}

    void Add(int index, const long long &value) {
        for (int i = index + 1; i <= size_; i += i & -i) {
            tree_[i - 1] += value;
        }
    }

    long long Sum(int index) {
        long long result = 0;
        for (int i = index; i > 0; i -= i & -i) {
            result += tree_[i - 1];
        }
        return result;
    }

private:
    int size_;
    std::vector<long long> tree_;
};

std::vector<long long> CountSuitableTriplets(const std::vector<std::vector<long long>>& ranges) {
     int len = ranges.size();
  
     if (len < 1 || len > 100000) {
        throw std::invalid_argument("The value of len should be at least 1 and at most 10^5 inclusive.");
    }

    for (const vector<long long>& range : ranges) {
        int low = range[0];
        int high = range[1];

        if (low < 1 || low > 200000) {
            throw std::invalid_argument("Each value of low should be in the range [1, 2 * 10^5] inclusive.");
        }

        if (high < 1 || high > 200000) {
            throw std::invalid_argument("Each value of high should be in the range [1, 2 * 10^5] inclusive.");
        }

        if (low + 2 > high) {
            throw std::invalid_argument("The condition low + 2 <= high must hold for each range.");
        }
    }

    std::vector<long long> results(len);
    std::vector<std::array<int, 3>> queries(len);

    for (int i = 0; i < len; ++i) {
        int low = ranges[i][0];
        int high = ranges[i][1];

        if (low >= high || low < 1 || high > 200000) {
            throw std::invalid_argument("Invalid range for low and high");
        }

        low--;

        queries[i][0] = low;
        queries[i][1] = high;
        queries[i][2] = i;

        results[i] = static_cast<long long>(high - low) * (high - low - 1) * (high - low - 2) / 6;
        results[i] -= std::max(0, (high / 15 - low / 6));
        results[i] -= std::max(0, (high / 6 - low / 3));
    }

    std::sort(queries.begin(), queries.end(), [](const std::array<int, 3> &query_1, const std::array<int, 3> &query_2) {
        return query_1[0] > query_2[0];
    });

    std::vector<long long> factors(200005);
    FenwickTree fenwick_tree(200005);
    int current = 200000;

    for (const std::array<int, 3> &query : queries) {
        int low = query[0];
        int high = query[1];
        int position = query[2];

        while (current > low) {
            for (int i = current * 2; i <= 200000; i += current) {
                fenwick_tree.Add(i, factors[i]++);
            }
            current--;
        }
        results[position] -= fenwick_tree.Sum(high + 1);
    }

    return results;
}

int main() {
    
    return 0;
}
