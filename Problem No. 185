/*
Link: https://codeforces.com/contest/1037/problem/F

Johnny has a vector vec of length integers and an integer k_value (2 ≤ k_value ≤ length), where each element of the vector is denoted by 
element_i (0 ≤ i < length). Perform the operation operation_z given below on vec and print the value of operation_z(vec, k_value) modulo 10^9 + 7.

function operation_z(vector vec, integer k_value):
    if length(vec) < k_value:
        return 0
    else:
        new_vector = empty vector
        result = 0
        for i = 0 .. (length(vec) - k_value):
            temp = vec[i]
            for j = i .. (i + k_value - 1):
                temp = max(temp, vec[j])
            append temp to the end of new_vector
            result = result + temp
        return result + operation_z(new_vector, k_value)

You are given an integer k_value  — the length of the initial vector vec and the parameter k_value.
You are also given length number of integers element_0, element_1, ..., element_(length-1)  — the elements of the vector vec.

Return the only integer, the value of operation_z(vec, k_value) modulo 10^9 + 7.

Create a C++ function CalculateZValue that will return an integer denoting the value of operation_z(vec, k_value).

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An Integer denoting k_value;
vector<int> denoting vec

Input Constraints

The value of length should be at least 2 and at most 10^6 inclusive.
The value of k_value should be at least 2 and at most length inclusive.
Each value of vec should be at least 1 and at most 10^9 inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>



int Calculate(int left, int right, int k_value) {
    int u_value = left / k_value;
    int v_value = right / k_value;
    left %= k_value;
    right %= k_value;
   const int modulus = 1000000007;
    return (std::max(left + right + 1 - k_value, 0) + u_value + v_value + static_cast<long long>(u_value) * v_value * k_value + static_cast<long long>(u_value) * right + static_cast<long long>(v_value) * left) % modulus;
}

int CalculateZValue(int k_value, const std::vector<int>& vec) {

   int length = vec.size();

    if (length < 2 || length > 1e6) {
        throw std::invalid_argument("Invalid length");
    }
  
    if ( k_value < 2  || k_value > 1e6 || k_value > length) {
        throw std::invalid_argument("Invalid  k_value.");
    }
  
    for (int value : vec) {
        if (value < 1 || value > 1000000000) {
            throw std::invalid_argument("Invalid element in vec.");
        }
    }
    
    std::vector<int> left_bound(length + 1);
    std::vector<int> right_bound(length + 1);
    std::vector<int> q_vec(length + 1);
    int answer = 0;
    k_value--;
    const int modulus = 1000000007;
    std::vector<int> extended_vec(length + 1);
    extended_vec[0] = modulus;
    for (int i = 1; i <= length; i++) {
        extended_vec[i] = vec[i - 1];
    }

    q_vec[0] = 0;
    for (int i = 1, j = 0; i <= length; left_bound[i] = q_vec[j], q_vec[++j] = i++) {
        right_bound[i] = length + 1;
        while (extended_vec[i] >= extended_vec[q_vec[j]]) {
            right_bound[q_vec[j--]] = i;
        }
    }

    for (int i = 1; i <= length; ++i) {
        answer = (answer + static_cast<long long>(extended_vec[i]) * Calculate(i - left_bound[i] - 1, right_bound[i] - i - 1, k_value)) % modulus;
    }

    return answer;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
    
   //TEST
std::vector<int> vec_1 = {1, 2};
int k_value_1 = 2;
int expected_1 = 2;
int result_1 = CalculateZValue(k_value_1, vec_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> vec_2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int k_value_2 = 5;
int expected_2 = 64;
int result_2 = CalculateZValue(k_value_2, vec_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> vec_3 = {5, 5, 5, 5, 5};
int k_value_3 = 3;
int expected_3 = 20;
int result_3 = CalculateZValue(k_value_3, vec_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> vec_4 = {1000000000, 999999999, 999999998};
int k_value_4 = 2;
int expected_4 = 999999985;
int result_4 = CalculateZValue(k_value_4, vec_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> vec_5 = {1, 1000000000};
int k_value_5 = 2;
int expected_5 = 1000000000;
int result_5 = CalculateZValue(k_value_5, vec_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> vec_6 = {5, 3, 7, 2, 8, 6, 4, 1, 9};
int k_value_6 = 3;
int expected_6 = 128;
int result_6 = CalculateZValue(k_value_6, vec_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> vec_7 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
int k_value_7 = 10;
int expected_7 = 100;
int result_7 = CalculateZValue(k_value_7, vec_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> vec_8 = {9, 8, 7, 6, 5, 4, 3, 2, 1};
int k_value_8 = 4;
int expected_8 = 63;
int result_8 = CalculateZValue(k_value_8, vec_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> vec_9 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
int k_value_9 = 2;
int expected_9 = 45;
int result_9 = CalculateZValue(k_value_9, vec_9);
assert(result_9 == expected_9);
//TEST_END



//TEST
std::vector<int> vec_10 = {};
int k_value_10 = 2;
try {
    CalculateZValue(k_value_10, vec_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_11 = {1};
int k_value_11 = 2;
try {
    CalculateZValue(k_value_11, vec_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_12 = {1, 2, 3};
int k_value_12 = 4;
try {
    CalculateZValue(k_value_12, vec_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_13 = {1, 2, 3};
int k_value_13 = 0;
try {
    CalculateZValue(k_value_13, vec_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_14 = {1, 2, 3};
int k_value_14 = -1;
try {
    CalculateZValue(k_value_14, vec_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_15 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int k_value_15 = 11;
try {
    CalculateZValue(k_value_15, vec_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_16 = {-1, 2, 3};
int k_value_16 = 2;
try {
    CalculateZValue(k_value_16, vec_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> vec_17 = {1, 2, -3};
int k_value_17 = 2;
try {
    CalculateZValue(k_value_17, vec_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


  
    return 0;
}
