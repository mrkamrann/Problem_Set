/*
Link: https://codeforces.com/contest/1835/problem/B

Julie, along with len other people indexed from 1 to len, came to take part in a lottery. Each participant received a ticket with an integer from 0 to max_val denotted
by a vector tickets.

In this lottery, one integer called target is drawn uniformly from 0 to max_val. Up to k_val tickets (or fewer, if there are not enough participants) with the 
closest numbers to the target are declared the winners. In the event of a tie, the ticket belonging to the person with a smaller index is declared the winner.

Julie decided to take part in the lottery. She knows the values on the tickets of all previous participants. She can pick whatever value she wants on her ticket,
but unfortunately, since she is the last one to receive it, she is indexed with an integer len+1.

Julie wants to win the lottery. Therefore, she wants to know which number she should pick to maximize her chances of winning. She wants to know the smallest 
integer if there are many such integers. Your task is to find it and calculate her chance of winning.

Create a C++ Function CalculateWinningChance that will return a vector<long long> denoting The first should be equal to the number of target values (from 0 to max_val), upon 
drawing which Julie wins, given that she chooses her ticket optimally. The second should be equal to the integer Julie should pick to maximize her chance of 
winning the lottery.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


Input Type:

An Integers denoting max_val
An Integer  denoting k_val
vector<long long> denoting ticket_values

Input Constraints

1 ≤ len ≤ 10^5, 0 ≤ max_val ≤ 10^9, 1 ≤ k_val ≤ 10^5
Each value in ticket_values should be in the range 0 to max_val inclusive.

*/

#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

void CheckWinningChance(long long current_value, long long len, long long max_val, long long k_val, const std::vector<long long>& sorted_tickets, long long& max_win_count, long long& best_pick) {
        long long left = std::upper_bound(sorted_tickets.begin() + 1, sorted_tickets.end(), current_value) - sorted_tickets.begin() - 1;
        long long right = std::lower_bound(sorted_tickets.begin() + 1, sorted_tickets.end(), current_value) - sorted_tickets.begin();

        if (left - k_val + 1 <= 0) {
            left = 0;
        } else {
            left = (sorted_tickets[left - k_val + 1] + current_value) / 2 + 1;
        }

        if (right + k_val - 1 > len) {
            right = max_val;
        } else {
            right = (sorted_tickets[right + k_val - 1] - 1 + current_value) / 2;
        }

        if (right - left + 1 > max_win_count || (right - left + 1 == max_win_count && current_value < best_pick)) {
            best_pick = current_value;
            max_win_count = right - left + 1;
        }
    }


    std::vector<long long> CalculateWinningChance(long long max_val, long long k_val, const std::vector<long long>& ticket_values) {
      
        long long len = ticket_values.size();
      
        if (len < 1 || len > 100000 || max_val < 0 || max_val > 1000000000 || k_val < 1 || k_val > 100000) {
            throw std::invalid_argument("Input values are out of bounds");
        }
        if (ticket_values.size() != static_cast<size_t>(len)) {
            throw std::invalid_argument("Ticket values size does not match the number of participants");
        }

        for (const int &val : ticket_values) {
            if (val < 0 || val > max_val) {
                throw std::invalid_argument("Ticket values are out of bounds");
            }
        }

        std::vector<long long> sorted_tickets(len + 1);
        for (long long i = 1; i <= len; ++i) {
            sorted_tickets[i] = ticket_values[i - 1];
        }
        std::sort(sorted_tickets.begin() + 1, sorted_tickets.end());

        long long max_win_count = 0, best_pick = 0;
        CheckWinningChance(0, len, max_val, k_val, sorted_tickets, max_win_count, best_pick);
        CheckWinningChance(max_val, len, max_val, k_val, sorted_tickets, max_win_count, best_pick);
        if (max_val) {
            CheckWinningChance(1, len, max_val, k_val, sorted_tickets, max_win_count, best_pick);
            CheckWinningChance(max_val - 1, len, max_val, k_val, sorted_tickets, max_win_count, best_pick);
        }
        for (long long i = 1; i <= len; ++i) {
            for (long long j = -2; j <= 2; ++j) {
                if (sorted_tickets[i] + j >= 0 && sorted_tickets[i] + j <= max_val) {
                    CheckWinningChance(sorted_tickets[i] + j, len, max_val, k_val, sorted_tickets, max_win_count, best_pick);
                }
            }
        }
        return {max_win_count, best_pick};
    }

int main() {
   
    
  
      //TEST
    long long max_val_1 = 10;
    long long k_val_1 = 3;
    std::vector<long long> ticket_values_1 = {0, 1, 2, 3, 4, 5};
    std::vector<long long> expected_1 = {7,4};
    std::vector<long long> result_1 = CalculateWinningChance(max_val_1, k_val_1, ticket_values_1);
  assert(result_1 == expected_1);
    //TEST_END

    //TEST
    long long max_val_2 = 20;
    long long k_val_2 = 4;
    std::vector<long long> ticket_values_2 = {5, 10, 15};
    std::vector<long long> expected_2 = {21,0};
    std::vector<long long> result_2 = CalculateWinningChance(max_val_2, k_val_2, ticket_values_2);
     assert(result_2 == expected_2);
    //TEST_END

    //TEST
    long long max_val_3 = 100;
    long long k_val_3 = 1;
    std::vector<long long> ticket_values_3 = {0, 50, 100};
    std::vector<long long> expected_3 = {25,1};
    std::vector<long long> result_3 = CalculateWinningChance(max_val_3, k_val_3, ticket_values_3);
   assert(result_3 == expected_3);
    //TEST_END

    //TEST
    long long max_val_4 = 0;
    long long k_val_4 = 1;
    std::vector<long long> ticket_values_4 = {0};
    std::vector<long long> expected_4 = {0,0};
    std::vector<long long> result_4 = CalculateWinningChance(max_val_4, k_val_4, ticket_values_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    long long max_val_5 = 10;
    long long k_val_5 = 5;
    std::vector<long long> ticket_values_5 = {2, 4, 6, 8, 10};
    std::vector<long long> expected_5 = {11,3};
    std::vector<long long> result_5 = CalculateWinningChance(max_val_5, k_val_5, ticket_values_5);
     assert(result_5 == expected_5);
    //TEST_END

    //TEST
    long long max_val_6 = 1000000000;
    long long k_val_6 = 100000;
    std::vector<long long> ticket_values_6 = {1, 1000000000};
    std::vector<long long> expected_6 = {1000000001, 0};
    std::vector<long long> result_6 = CalculateWinningChance(max_val_6, k_val_6, ticket_values_6);
   assert(result_6 == expected_6);
    //TEST_END

    //TEST
    long long max_val_7 = 50;
    long long k_val_7 = 7;
    std::vector<long long> ticket_values_7 = {5, 15, 25, 35, 45};
    std::vector<long long> expected_7 = {51,0};
    std::vector<long long> result_7 = CalculateWinningChance(max_val_7, k_val_7, ticket_values_7);
      assert(result_7 == expected_7);
    //TEST_END

    //TEST
    long long max_val_8 = 1;
    long long k_val_8 = 1;
    std::vector<long long> ticket_values_8 = {0, 1};
    std::vector<long long> expected_8 = {0,0};
    std::vector<long long> result_8 = CalculateWinningChance(max_val_8, k_val_8, ticket_values_8);
    assert(result_8 == expected_8);
    //TEST_END

    //TEST
    long long max_val_9 = 100;
    long long k_val_9 = 10;
    std::vector<long long> ticket_values_9 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    std::vector<long long> expected_9 = {101,11};
    std::vector<long long> result_9 = CalculateWinningChance(max_val_9, k_val_9, ticket_values_9);
    assert(result_9 == expected_9);
    //TEST_END

    //TEST
    long long max_val_10 = -1; 
    long long k_val_10 = 5;
    std::vector<long long> ticket_values_10 = {0, 1, 2, 3, 4};
    try {
        CalculateWinningChance(max_val_10, k_val_10, ticket_values_10);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_11 = 10;
    long long k_val_11 = -1; 
    std::vector<long long> ticket_values_11 = {0, 1, 2, 3, 4};
    try {
        CalculateWinningChance(max_val_11, k_val_11, ticket_values_11);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_12 = 10;
    long long k_val_12 = 5;
    std::vector<long long> ticket_values_12 = {0, 1, 2, 3, 11}; 
    try {
        CalculateWinningChance(max_val_12, k_val_12, ticket_values_12);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_13 = 10;
    long long k_val_13 = 5;
    std::vector<long long> ticket_values_13 = {-1, 1, 2, 3, 4}; 
    try {
        CalculateWinningChance(max_val_13, k_val_13, ticket_values_13);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_14 = 10;
    long long k_val_14 = 5;
    std::vector<long long> ticket_values_14; 
    try {
        CalculateWinningChance(max_val_14, k_val_14, ticket_values_14);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_15 = -10;
    long long k_val_15 = 5;
    std::vector<long long> ticket_values_15(100001, 1); 
    try {
        CalculateWinningChance(max_val_15, k_val_15, ticket_values_15);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_16 = 1000000000;
    long long k_val_16 = -555; 
    std::vector<long long> ticket_values_16 = {1, 2, 3, 4, 5};
    try {
        CalculateWinningChance(max_val_16, k_val_16, ticket_values_16);
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    long long max_val_17 = 10;
    long long k_val_17 = 9;
    std::vector<long long> ticket_values_17 = {-999999, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 
    try {
        CalculateWinningChance(max_val_17, k_val_17, ticket_values_17);  
        assert(false);
    } catch (const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    return 0;
}

