/*
Link: https://codeforces.com/contest/1312/problem/F

Avy is responsible for defending the Red Kingdom, which is under attack by the White King and the Black King. The Kingdom is guarded by length castles, with each 
castle i defended by values[i] soldiers. To conquer the Red Kingdom, the Kings must eliminate all defenders.

Each day, the White King launches an attack on one of the castles. Then, at night, the Black King attacks a castle (possibly the same one). The attacks alternate
between the White King and the Black King, starting with the White King.

Each attack must target a castle with at least one soldier. There are three types of attacks:

A mixed attack decreases the number of defenders in the targeted castle by x_value (or sets it to 0 if there are already fewer than x_value defenders).
An infantry attack decreases the number of defenders in the targeted castle by y_value (or sets it to 0 if there are already fewer than y_value defenders).
A cavalry attack decreases the number of defenders in the targeted castle by z_value (or sets it to 0 if there are already fewer than z_value defenders).
The mixed attack can target any valid castle (with at least one soldier). However, the infantry and cavalry attacks cannot be launched on a castle if the previous attack on it was of the same type, regardless of when or by whom it was launched. A castle that hasn't been attacked can be targeted by any type of attack.

The King who launches the last attack will be glorified as the conqueror of the Red Kingdom. The White King is planning his first attack, and you are responsible 
for determining the number of possible first attack options that allow the White King to launch the last attack. Each option for the first attack is represented 
by the targeted castle and the type of attack. Two options are different if the targeted castles or the types of attack are different.


Create a C++ function CalculateFirstAttackOptions that will return an integer denoting the number of possible options for the first attack of the
White King (or 0 if the Black King can launch the last attack no matter how the White King acts). 

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

An Integer denoting length
An Integer denoting x_value
An Integer denoting y_value
An Integer denoting z_value
A vector of integers values representing the number of soldiers in each castle.

Input Constraints

The length of values should be at least 1 and at most 300,000 inclusive.
Each value of values[i] should be in the range [1, 10^18] inclusive.
The values for length, x_value, y_value, and z_value should be in the range [1, 5] inclusive.
The number of test cases should be at least 1 and at most 1000 inclusive.
The sum of length values across all test cases should not exceed 300,000.


*/

#include <iostream>
#include <vector>
#include <unordered_map>
#include <stdexcept>
#include <cassert>


long long SuffixGrundy(long long index, long long offset, const std::vector<std::vector<long long>>& grundy_values, long long first_cycle, long long cycle_length) {
    if (index > first_cycle) {
        index = first_cycle + (index - first_cycle) % cycle_length;
    }
    return grundy_values[index][offset];
}

int CalculateFirstAttackOptions(long long length, long long x_value, long long y_value, long long z_value, std::vector<long long>& values) {
  
    if (length < 1 || length > 300000){
      throw std::invalid_argument("Invalid length");
    }
    if (x_value < 1 || x_value > 5 || y_value < 1 || y_value > 5 || z_value < 1 || z_value > 5){
       throw std::invalid_argument("Invalid x, y, or z value");
    }
    for (long long value : values) {
        if (value < 1 || value > 1000000000000000000){
          throw std::invalid_argument("Invalid value in values");
        }
    }

    std::vector<std::vector<long long>> grundy_values(1010, std::vector<long long>(4));
    std::vector<long long> visited(5);
    long long first_cycle, cycle_length;
    std::unordered_map<long long, long long> state_map;

    for (int i = 5;; i++) {
        for (int j = 0; j < 3; j++) grundy_values[i][j] = 0;
        std::fill(visited.begin(), visited.end(), 0);
        visited[grundy_values[i - x_value][0]] = visited[grundy_values[i - y_value][1]] = visited[grundy_values[i - z_value][2]] = 1;
        while (visited[grundy_values[i][0]]) grundy_values[i][0]++;
        std::fill(visited.begin(), visited.end(), 0);
        visited[grundy_values[i - x_value][0]] = visited[grundy_values[i - z_value][2]] = 1;
        while (visited[grundy_values[i][1]]) grundy_values[i][1]++;
        std::fill(visited.begin(), visited.end(), 0);
        visited[grundy_values[i - x_value][0]] = visited[grundy_values[i - y_value][1]] = 1;
        while (visited[grundy_values[i][2]]) grundy_values[i][2]++;
        grundy_values[i][3] = grundy_values[i][0] * 16 + grundy_values[i][1] * 4 + grundy_values[i][2];
        long long state = 0;
        for (int j = i - 4; j <= i; j++) state = state * 64 + grundy_values[j][3];
        if (state_map[state]) {
            first_cycle = state_map[state] - 4;
            cycle_length = i - state_map[state];
            break;
        }
        state_map[state] = i;
    }

    long long answer = 0, result = 0;
    for (int i = 0; i < length; i++) {
        values[i] += 4;
        answer ^= SuffixGrundy(values[i], 0, grundy_values, first_cycle, cycle_length);
    }

    for (int i = 0; i < length; i++) {
        if (!(answer ^ SuffixGrundy(values[i], 0, grundy_values, first_cycle, cycle_length) ^ SuffixGrundy(values[i] - x_value, 0, grundy_values, first_cycle, cycle_length))) result++;
        if (!(answer ^ SuffixGrundy(values[i], 0, grundy_values, first_cycle, cycle_length) ^ SuffixGrundy(values[i] - y_value, 1, grundy_values, first_cycle, cycle_length))) result++;
        if (!(answer ^ SuffixGrundy(values[i], 0, grundy_values, first_cycle, cycle_length) ^ SuffixGrundy(values[i] - z_value, 2, grundy_values, first_cycle, cycle_length))) result++;
    }

    return result;
}

#include <iostream>
#include <vector>
#include <unordered_map>
#include <stdexcept>
#include <cassert>

int main() {
    
//TEST 
long long length_1 = 1;
long long x_value_1 = 1;
long long y_value_1 = 1;
long long z_value_1 = 1;
std::vector<long long> values_1 = {1};
int expected_1 = 3;
int result_1 = CalculateFirstAttackOptions(length_1, x_value_1, y_value_1, z_value_1, values_1);
assert(result_1 == expected_1);

//TEST_END

//TEST 
long long length_2 = 2;
long long x_value_2 = 2;
long long y_value_2 = 2;
long long z_value_2 = 2;
std::vector<long long> values_2 = {1, 2};
int expected_2 = 0;
int result_2 = CalculateFirstAttackOptions(length_2, x_value_2, y_value_2, z_value_2, values_2);
assert(result_2 == expected_2);

//TEST_END

//TEST 
long long length_3 = 3;
long long x_value_3 = 3;
long long y_value_3 = 3;
long long z_value_3 = 3;
std::vector<long long> values_3 = {1, 2, 3};
int expected_3 = 9;
int result_3 = CalculateFirstAttackOptions(length_3, x_value_3, y_value_3, z_value_3, values_3);
assert(result_3 == expected_3);

//TEST_END

//TEST 
long long length_4 = 4;
long long x_value_4 = 4;
long long y_value_4 = 4;
long long z_value_4 = 4;
std::vector<long long> values_4 = {1, 2, 3, 4};
int expected_4 = 0;
int result_4 = CalculateFirstAttackOptions(length_4, x_value_4, y_value_4, z_value_4, values_4);
assert(result_4 == expected_4);

//TEST_END

//TEST 
long long length_5 = 5;
long long x_value_5 = 5;
long long y_value_5 = 5;
long long z_value_5 = 5;
std::vector<long long> values_5 = {1, 2, 3, 4, 5};
int expected_5 = 15;
int result_5 = CalculateFirstAttackOptions(length_5, x_value_5, y_value_5, z_value_5, values_5);
assert(result_5 == expected_5);

//TEST_END

//TEST 
long long length_6 = 6;
long long x_value_6 = 1;
long long y_value_6 = 2;
long long z_value_6 = 3;
std::vector<long long> values_6 = {1, 2, 3, 4, 5, 6};
int expected_6 = 6;
int result_6 = CalculateFirstAttackOptions(length_6, x_value_6, y_value_6, z_value_6, values_6);
assert(result_6 == expected_6);

//TEST_END

//TEST 
long long length_7 = 3;
long long x_value_7 = 2;
long long y_value_7 = 1;
long long z_value_7 = 2;
std::vector<long long> values_7 = {10, 20, 30};
int expected_7 = 2;
int result_7 = CalculateFirstAttackOptions(length_7, x_value_7, y_value_7, z_value_7, values_7);
assert(result_7 == expected_7);

//TEST_END

//TEST 
long long length_8 = 5;
long long x_value_8 = 1;
long long y_value_8 = 3;
long long z_value_8 = 2;
std::vector<long long> values_8 = {100, 200, 300, 400, 500};
int expected_8 = 0;
int result_8 = CalculateFirstAttackOptions(length_8, x_value_8, y_value_8, z_value_8, values_8);
assert(result_8 == expected_8);

//TEST_END

//TEST 
long long length_9 = 10;
long long x_value_9 = 2;
long long y_value_9 = 2;
long long z_value_9 = 2;
std::vector<long long> values_9 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int expected_9 = 0;
int result_9 = CalculateFirstAttackOptions(length_9, x_value_9, y_value_9, z_value_9, values_9);
assert(result_9 == expected_9);

//TEST_END

//TEST 
long long length_10 = 0;
long long x_value_10 = 1;
long long y_value_10 = 1;
long long z_value_10 = 1;
std::vector<long long> values_10 = {1};
try {
    CalculateFirstAttackOptions(length_10, x_value_10, y_value_10, z_value_10, values_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_11 = 300001;
long long x_value_11 = 1;
long long y_value_11 = 1;
long long z_value_11 = 1;
std::vector<long long> values_11(300001, 1);
try {
    CalculateFirstAttackOptions(length_11, x_value_11, y_value_11, z_value_11, values_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_12 = 1;
long long x_value_12 = 0;
long long y_value_12 = 1;
long long z_value_12 = 1;
std::vector<long long> values_12 = {1};
try {
    CalculateFirstAttackOptions(length_12, x_value_12, y_value_12, z_value_12, values_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_13 = 1;
long long x_value_13 = 6;
long long y_value_13 = 1;
long long z_value_13 = 1;
std::vector<long long> values_13 = {1};
try {
    CalculateFirstAttackOptions(length_13, x_value_13, y_value_13, z_value_13, values_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_14 = 1;
long long x_value_14 = 1;
long long y_value_14 = 0;
long long z_value_14 = 1;
std::vector<long long> values_14 = {1};
try {
    CalculateFirstAttackOptions(length_14, x_value_14, y_value_14, z_value_14, values_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_15 = 1;
long long x_value_15 = 1;
long long y_value_15 = 6;
long long z_value_15 = 1;
std::vector<long long> values_15 = {1};
try {
    CalculateFirstAttackOptions(length_15, x_value_15, y_value_15, z_value_15, values_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_16 = 1;
long long x_value_16 = 1;
long long y_value_16 = 1;
long long z_value_16 = 0;
std::vector<long long> values_16 = {1};
try {
    CalculateFirstAttackOptions(length_16, x_value_16, y_value_16, z_value_16, values_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
  
//TEST 
long long length_17 = 1;
long long x_value_17 = 1;
long long y_value_17 = 1;
long long z_value_17 = 6;
std::vector<long long> values_17 = {1};
try {
    CalculateFirstAttackOptions(length_17, x_value_17, y_value_17, z_value_17, values_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_18 = 1;
long long x_value_18 = 1;
long long y_value_18 = 1;
long long z_value_18 = 1;
std::vector<long long> values_18 = {0};
try {
    CalculateFirstAttackOptions(length_18, x_value_18, y_value_18, z_value_18, values_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_19 = 1;
long long x_value_19 = 1;
long long y_value_19 = 1;
long long z_value_19 = 1;
std::vector<long long> values_19 = {1000000000000000001};
try {
    CalculateFirstAttackOptions(length_19, x_value_19, y_value_19, z_value_19, values_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_20 = 2;
long long x_value_20 = 1;
long long y_value_20 = 1;
long long z_value_20 = 1;
std::vector<long long> values_20 = {1, -1};
try {
    CalculateFirstAttackOptions(length_20, x_value_20, y_value_20, z_value_20, values_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
long long length_21 = 3;
long long x_value_21 = 1;
long long y_value_21 = 1;
long long z_value_21 = 1;
std::vector<long long> values_21 = {-1, 1, 1};
try {
    CalculateFirstAttackOptions(length_21, x_value_21, y_value_21, z_value_21, values_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

    return 0;
}
