/*
Link: https://codeforces.com/problemset/problem/1603/F

Trevor Phillips, a melancholic soul, made a strong determination that he will pursue Competitive Programming seriously, by heart, 
because he found it fascinating. Fast forward to 4 years, he is happy that he took this road. He found an astounding problem but has no idea how to solve this. 
Help him to solve the final problem of the round.

You are given three integers num, k_val, and x_val. Find the number, modulo 998244353, of integer sequences a1, a2, ..., an such that the following conditions 
are satisfied:

0 ≤ a[i] < 2^k_val for each integer i from 1 to num.

There is no non-empty subsequence in a such that the bitwise XOR of the elements of the subsequence is x_val.

A sequence b is a subsequence of a sequence c if b can be obtained from c by deletion of several (possibly, zero or all) elements.

Return a single integer — the number, modulo 998244353, of integer sequences satisfying the conditions.

Create a C++ Function FindNumberOfSequences that will return an integer denoting the number, modulo 998244353, of integer sequences satisfying the conditions.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.


Input Type

An integer denoting num 
An integer denoting k_val
An integer denoting x_val 

Input Constraints

The value of num should be in the range [1, 10^9] inclusive.
The value of k_val should be in the range [0, 10^7] inclusive.
The value of x_val should be in the range [0, 2^min(20, k_val)) inclusive.

*/


#include <vector>
#include <cmath>
#include <stdexcept>
#include <cassert>

int CalculatePower(int base, int exponent, int result = 1) {
  
   int modulus = 998244353;
    for (; exponent; exponent >>= 1, base = 1LL * base * base % modulus) {
        if (exponent & 1) {
            result = (1LL * result * base) % modulus;
        }
    }
    return result;
}

int FindNumberOfSequences(int num, int k_val, int x_val) {
    if (num < 1 || num > 1e9) {
        throw std::invalid_argument("num must be in the range [1, 1e9].");
    }
    if (k_val < 0 || k_val > 1e7) {
        throw std::invalid_argument("k_val must be in the range [0, 1e7].");
    }
    if (x_val < 0 || x_val >= (1 << std::min(20, k_val))) {
        throw std::invalid_argument("x_val must be in the range [0, 2^min(20, k_val)).");
    }

    int total_power = CalculatePower(2, num + 1);
  
    int modulus = 998244353;
  
    if (x_val) {
        int result = 1, power = 2, answer = 1;
        for (int index = 2, last_answer = 1; index <= k_val; ++index, power = (2LL * power) % modulus) {
            result = (1LL * result * total_power) % modulus;
            answer = (result - 1LL * last_answer * (power - 1) % modulus + modulus) % modulus;
            last_answer = answer;
        }
        return answer;
    } else {
        if (num > k_val) {
            return 0;
        } else {
            int answer = 1, result = 1, max_power = CalculatePower(2, k_val);
            for (int index = 1, power = 1; index <= num; ++index, power = (2LL * power) % modulus) {
                result = (max_power + modulus - power) % modulus;
                answer = (1LL * answer * result) % modulus;
            }
            return answer;
        }
    }
}

#include <vector>
#include <cmath>
#include <stdexcept>
#include <cassert>


int main() {
  
  //TEST
int num_1 = 1;
int k_val_1 = 0;
int x_val_1 = 0;
int expected_1 = 0;
int result_1 = FindNumberOfSequences(num_1, k_val_1, x_val_1);
assert(result_1 == expected_1);

//TEST_END

//TEST
int num_2 = 100;
int k_val_2 = 5;
int x_val_2 = 3;
int expected_2 = 427866670;
int result_2 = FindNumberOfSequences(num_2, k_val_2, x_val_2);
assert(result_2 == expected_2);

//TEST_END

//TEST
int num_3 = 10002;
int k_val_3 = 10;
int x_val_3 = 1023;
int expected_3 = 455834501;
int result_3 = FindNumberOfSequences(num_3, k_val_3, x_val_3);
assert(result_3 == expected_3);

//TEST_END

//TEST
int num_4 = 999;
int k_val_4 = 20;
int x_val_4 = 105;
int expected_4 = 122458765;
int result_4 = FindNumberOfSequences(num_4, k_val_4, x_val_4);
assert(result_4 == expected_4);

//TEST_END

//TEST
int num_5 = 123;
int k_val_5 = 15;
int x_val_5 = 3;
int expected_5 = 498689152;
int result_5 = FindNumberOfSequences(num_5, k_val_5, x_val_5);
assert(result_5 == expected_5);

//TEST_END

//TEST
int num_6 = 987654321;
int k_val_6 = 18;
int x_val_6 = 262143;
int expected_6 = 619978558;
int result_6 = FindNumberOfSequences(num_6, k_val_6, x_val_6);
assert(result_6 == expected_6);

//TEST_END

//TEST
int num_7 = 500000000;
int k_val_7 = 7;
int x_val_7 = 127;
int expected_7 = 402135863;
int result_7 = FindNumberOfSequences(num_7, k_val_7, x_val_7);
assert(result_7 == expected_7);

//TEST_END

//TEST
int num_8 = 250000000;
int k_val_8 = 12;
int x_val_8 = 4095;
int expected_8 = 60556723;
int result_8 = FindNumberOfSequences(num_8, k_val_8, x_val_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
int num_9 = 1000000000;
int k_val_9 = 8;
int x_val_9 = 255;
int expected_9 = 563803788;
int result_9 = FindNumberOfSequences(num_9, k_val_9, x_val_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
int num_10 = 1;
int k_val_10 = 0;
int x_val_10 = -99999;
try {
    FindNumberOfSequences(num_10, k_val_10, x_val_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int num_11 = 1000000001;
int k_val_11 = 0;
int x_val_11 = 0;
try {
    FindNumberOfSequences(num_11, k_val_11, x_val_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int num_12 = 1;
int k_val_12 = 10000001;
int x_val_12 = 0;
try {
    FindNumberOfSequences(num_12, k_val_12, x_val_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int num_13 = 1;
int k_val_13 = 20;
int x_val_13 = 1048576;
try {
    FindNumberOfSequences(num_13, k_val_13, x_val_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int num_14 = -1;
int k_val_14 = 0;
int x_val_14 = 0;
try {
    FindNumberOfSequences(num_14, k_val_14, x_val_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int num_15 = 1;
int k_val_15 = -1;
int x_val_15 = 0;
try {
    FindNumberOfSequences(num_15, k_val_15, x_val_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int num_16 = 1;
int k_val_16 = 0;
int x_val_16 = -1;
try {
    FindNumberOfSequences(num_16, k_val_16, x_val_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
    return 0;
}
