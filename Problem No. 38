/*
Link: https://leetcode.com/problems/bricks-falling-when-hit/description/ 

Jimmy loves playing with his set of bricks. He built a structure using an row_count x col_count binary grid, where each 1 represents a brick and each 0 represents an empty space. 
A brick is stable in Jimmy's structure if:

It is directly connected to the top of the grid, or
At least one other brick in its four adjacent cells is stable.
One day, Jimmy decided to start removing some bricks from his structure. He has a list of hits, where each hit represents a brick Jimmy wants to remove from a 
specific location hits[i] = (row[i], col[i]). When Jimmy removes a brick from that location (if it exists), the brick disappears. Because of this, some other bricks 
might no longer be stable and will fall. Once a brick falls, it is immediately erased from the grid and won't land on other stable bricks.

Help Jimmy to create a C++ class that will contain a function HitBricks figure out what will happen after each of his brick removals. Return an array result, where each result[i] represents the number of bricks that will fall after Jimmy applies the ith removal.

Note that if Jimmy tries to remove a brick from a location with no brick, no bricks will fall.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type

vector<vector<int>> denoting grid
vector<vector<int>> denoting hits



Input Constraints:

1.The number of rows row_count should be at least 1 and at most 200 inclusive.
2.The number of columns col_count should be at least 1 and at most 200 inclusive.
3.Each cell grid[i][j] is either 0 or 1.
4.The length of hits should be at least 1 and at most 40,000 inclusive.
5.Each hit hits[i] should have a length of 2.
6.Each value hits[i][0] should be in the range [0, row_count - 1] inclusive.
7.Each value hits[i][1] should be in the range [0, col_count - 1] inclusive.
8.All (hits[i][0], hits[i][1]) pairs are unique.

*/

#include <vector>
#include <stdexcept>
#include <iostream>
#include <cassert>

class Solution {
public:
    std::vector<int> parent;
    std::vector<int> size;
    std::vector<std::vector<int>> directions{{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    
    std::vector<int> HitBricks(std::vector<std::vector<int>>& grid, std::vector<std::vector<int>>& hits) {
         int row_count = grid.size();
        if (row_count < 1 || row_count > 200) {
            throw std::invalid_argument("The number of rows (row_count) must be between 1 and 200 inclusive.");
        }

        int col_count = grid[0].size();
        if (col_count < 1 || col_count > 200) {
            throw std::invalid_argument("The number of columns (col_count) must be between 1 and 200 inclusive.");
        }

        int grid_size = row_count * col_count;

        for (int row = 0; row < row_count; ++row) {
            if (grid[row].size() != col_count) {
                throw std::invalid_argument("All rows in the grid must have the same number of columns.");
            }
            for (int col = 0; col < col_count; ++col) {
                if (grid[row][col] != 0 && grid[row][col] != 1) {
                    throw std::invalid_argument("Each cell in the grid must be either 0 or 1.");
                }
            }
        }

        if (hits.size() < 1 || hits.size() > 40000) {
            throw std::invalid_argument("The length of hits must be between 1 and 40,000 inclusive.");
        }

        std::set<std::pair<int, int>> unique_hits;
        for (const auto& hit : hits) {
            if (hit.size() != 2) {
                throw std::invalid_argument("Each hit must be a pair of coordinates (length of 2).");
            }
            int hit_row = hit[0];
            int hit_col = hit[1];

            if (hit_row < 0 || hit_row >= row_count) {
                throw std::invalid_argument("Each hit's row value must be in the range [0, row_count - 1].");
            }
            if (hit_col < 0 || hit_col >= col_count) {
                throw std::invalid_argument("Each hit's column value must be in the range [0, col_count - 1].");
            }

            if (!unique_hits.insert({hit_row, hit_col}).second) {
                throw std::invalid_argument("All hits must have unique coordinate pairs.");
            }
        }


        
        parent.resize(grid_size, 0);
        size.resize(grid_size, 1);
        for (int i = 0; i < grid_size; ++i) {
            parent[i] = i;
        }

        std::vector<int> result(hits.size(), 0);

        for (std::vector<int>& hit : hits) {
            grid[hit[0]][hit[1]]--;
        }

        for (int row = 0; row < row_count; ++row) {
            for (int col = 0; col < col_count; ++col) {
                if (grid[row][col] > 0) {
                    for (int k = 0; k < 4; ++k) {
                        int new_row = row + directions[k][0];
                        int new_col = col + directions[k][1];
                        if (new_row >= 0 && new_col >= 0 && new_row < row_count && new_col < col_count && grid[new_row][new_col] > 0) {
                            Union(row * col_count + col, new_row * col_count + new_col);
                        }
                    }
                }
            }
        }

        for (int i = static_cast<int>(hits.size()) - 1; i >= 0; --i) {
            int hit_row = hits[i][0];
            int hit_col = hits[i][1];
            int connected_to_top = 0;

            if (++grid[hit_row][hit_col] > 0) {
                if (hit_row == 0) connected_to_top = 1;
                for (int k = 0; k < 4; ++k) {
                    int neighbor_row = hit_row + directions[k][0];
                    int neighbor_col = hit_col + directions[k][1];
                    if (neighbor_row >= 0 && neighbor_col >= 0 && neighbor_row < row_count && neighbor_col < col_count && grid[neighbor_row][neighbor_col] > 0) {
                        if (FindParent(neighbor_row * col_count + neighbor_col) < col_count) {
                            connected_to_top = 1;
                        } else if (FindParent(hit_row * col_count + hit_col) != FindParent(neighbor_row * col_count + neighbor_col)) {
                            result[i] += size[FindParent(neighbor_row * col_count + neighbor_col)];
                        }
                        Union(hit_row * col_count + hit_col, neighbor_row * col_count + neighbor_col);
                    }
                }
            }
            result[i] *= connected_to_top;
        }

        return result;
    }

private:
    int FindParent(int node) {
        if (parent[node] == node) {
            return node;
        }
        return parent[node] = FindParent(parent[node]);
    }

    void Union(int node_u, int node_v) {
        int root_u = FindParent(node_u);
        int root_v = FindParent(node_v);

        if (root_u == root_v) {
            return;
        }

        if (root_u < root_v) {
            parent[root_v] = root_u;
            size[root_u] += size[root_v];
        } else {
            parent[root_u] = root_v;
            size[root_v] += size[root_u];
        }
    }
};

int main(){
  
  //TEST
  
   std::vector<std::vector<int>>grid_1 = {{1,0,0,0},{1,1,1,0}};
   std::vector<std::vector<int>> hits_1 = {{1,0}};
   std::vector<int> expected_1 = {2};
   Solution obj_1;
   std::vector<int> result_1 = obj_1.HitBricks(grid_1, hits_1);
   assert(expected_1 == result_1);
  
  //TEST_END
  
  //TEST 

std::vector<std::vector<int>>grid_2 = {{1,1,1},{1,0,1},{0,1,0}};
std::vector<std::vector<int>> hits_2 = {{1,0}, {0,0}};
std::vector<int> expected_2 = {0, 0};
Solution obj_2;
std::vector<int> result_2 = obj_2.HitBricks(grid_2, hits_2);
assert(expected_2 == result_2);

//TEST_END

//TEST 

std::vector<std::vector<int>>grid_3 = {{1,1,1,1},{1,0,1,0},{1,1,1,1}};
std::vector<std::vector<int>> hits_3 = {{1,2}, {1,1}, {0,3}};
std::vector<int> expected_3 = {0, 0, 0};
Solution obj_3;
std::vector<int> result_3 = obj_3.HitBricks(grid_3, hits_3);
assert(expected_3 == result_3);

//TEST_END

//TEST 

std::vector<std::vector<int>>grid_4 = {{1,0,1,1},{1,1,0,1},{0,1,1,0}};
std::vector<std::vector<int>> hits_4 = {{2,1}, {0,2}, {1,3}};
std::vector<int> expected_4 = {1, 0, 0};
Solution obj_4;
std::vector<int> result_4 = obj_4.HitBricks(grid_4, hits_4);
assert(expected_4 == result_4);

//TEST_END

//TEST 

std::vector<std::vector<int>>grid_5 = {{1,1,1},{0,1,0},{1,1,1},{0,0,1}};
std::vector<std::vector<int>> hits_5 = {{2,2}, {2,1}, {0,0}};
std::vector<int> expected_5 = {1, 1, 0};
Solution obj_5;
std::vector<int> result_5 = obj_5.HitBricks(grid_5, hits_5);
assert(expected_5 == result_5);

//TEST_END

//TEST 

std::vector<std::vector<int>>grid_6 = {{1,1},{1,1}};
std::vector<std::vector<int>> hits_6 = {{1,1}, {1,0}};
std::vector<int> expected_6 = {0, 0};
Solution obj_6;
std::vector<int> result_6 = obj_6.HitBricks(grid_6, hits_6);
assert(expected_6 == result_6);

//TEST_END

//TEST 

std::vector<std::vector<int>>grid_7 = {{1,0,0,1,0},{1,1,1,1,1},{0,1,0,0,1},{1,1,1,0,0},{1,0,1,1,1}};
std::vector<std::vector<int>> hits_7 = {{1,4}, {3,1}, {0,3}, {2,1}};
std::vector<int> expected_7 = {1, 6, 0, 0};
Solution obj_7;
std::vector<int> result_7 = obj_7.HitBricks(grid_7, hits_7);
assert(expected_7 == result_7);

//TEST_END

//TEST

std::vector<std::vector<int>>grid_8 = {{1,0,1},{1,1,1},{1,0,0},{0,1,1}};
std::vector<std::vector<int>> hits_8 = {{0,2}, {3,2}, {2,0}, {1,1}};
std::vector<int> expected_8 = {0, 0, 0, 1};
Solution obj;
std::vector<int> result_8 = obj.HitBricks(grid_8, hits_8);
assert(expected_8 == result_8);

//TEST_END

  
//TEST

std::vector<std::vector<int>>grid_9 = {{4}};
std::vector<std::vector<int>> hits_9 = {{0,0}};
try{
Solution obj_9;
obj_9.HitBricks(grid_9, hits_9);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_10 = {{1,1,1},{1,1,1},{1,1,1}};
std::vector<std::vector<int>> hits_10 = {};
try{
Solution obj_10;
obj_10.HitBricks(grid_10, hits_10);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_11 = {{1,0,1,1},{0,1,0,1},{1,1,1,0},{1,1,0,1}};
std::vector<std::vector<int>> hits_11(1e5,std::vector<int>(2,0));
try{
Solution obj_11;
obj_11.HitBricks(grid_11, hits_11);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_12(5000,std::vector<int>(3,0));
std::vector<std::vector<int>> hits_12 = {{0,1}, {3,2}, {2,4}, {1,0}};
try{
Solution obj_12;
obj_12.HitBricks(grid_12, hits_12);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_13(50,std::vector<int>(500,0));
std::vector<std::vector<int>> hits_13 = {{1,1}, {2,0}, {0,0}, {1,0}};
try{
Solution obj_13;
obj_13.HitBricks(grid_13, hits_13);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_14 = {{1,0,1,1,1},{1,1,1,0,1},{0,1,0,1,0},{1,1,1,1,1}};
std::vector<std::vector<int>> hits_14 = {{0,2,4}, {2,3}, {1,0}, {3,4}};
try{
Solution obj_14;
obj_14.HitBricks(grid_14, hits_14);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_15 = {{1,1,1,1,1},{1,0,1,1,1},{1,1,1,0,1},{1,1,0,1,1},{1,1,1,1,0}};
std::vector<std::vector<int>> hits_15 = {{1,5}, {2,3}, {4,1}, {0,0}, {3,2}};
try{
Solution obj_15;
obj_15.HitBricks(grid_15, hits_15);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END

//TEST

std::vector<std::vector<int>>grid_16 = {{1,0,1,0,1},{1,1,0,1,0},{0,1,1,0,1},{1,0,1,1,0},{0,1,0,1,1}};
std::vector<std::vector<int>> hits_16 = {{10,2}, {1,3}, {4,1}, {0,0}};
try{
Solution obj_16;
obj_16.HitBricks(grid_16, hits_16);
assert(false);
}
catch(const std::invalid_argument& e){
assert(true);
}

//TEST_END


  
  return 0;
}
