/*
Link: https://codeforces.com/problemset/problem/109/E

Franklin loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. 
For example, numbers 47, 744, and 4 are lucky, while 5, 17, and 467 are not.

One day, Franklin came across an interval of numbers [a, a+l−1]. Let F(x) be the number of lucky digits in the number x. Franklin wants to find the minimum integer
b (such that a<b) where the number of lucky digits in each number of the interval [a,a+l−1] matches with the number of lucky digits in the interval [b,b+l−1]. 
In other words, he wants F(a) = F(b), F(a + 1) = F(b + 1), ..., F(a + l - 1) = F(b + l - 1).

Create a C++ function FindNextInterval that will return an integer denoting the minimum integer b that satisfies the condition described.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type:

An integer denoting start.
An integer denoting length.

Input Constraints

The value of start should be at least 1 and at most 10^9 inclusive.
The value of length should be at least 1 and at most 10^9 inclusive.

*/

#include <iostream>
#include <vector>
#include <cmath>
#include <stdexcept>
#include <cassert>

int CalculateNumLucky(int number) {
    int count = 0;
    while (number > 0) {
        if (number % 10 == 4 || number % 10 == 7) {
            count++;
        }
        number /= 10;
    }
    return count;
}

int FindNextLucky(int number) {
    int last_digit = number % 10;
    if (last_digit < 3) return number + 1;
    if (last_digit == 3) return number + 2;
    if (last_digit == 4) return number + 3;
    if (last_digit == 5) return number + 1;
    if (last_digit == 6) return number + 2;
    if (last_digit == 8) return number + 1;

    int num_lucky_digits = CalculateNumLucky(number);
    int div_10 = number / 10;
    int div_10_plus_1 = div_10 + 1;
    int num_lucky_digits_div_10_plus_1 = CalculateNumLucky(div_10_plus_1);

    if (last_digit == 9) {
        if (num_lucky_digits_div_10_plus_1 == num_lucky_digits) return number + 1;
        if (num_lucky_digits_div_10_plus_1 == num_lucky_digits + 1) return FindNextLucky(div_10) * 10;
        return div_10_plus_1 * 10 + 4;
    }

    if (last_digit == 7) {
        if (num_lucky_digits_div_10_plus_1 == num_lucky_digits) return number + 3;
        if (num_lucky_digits_div_10_plus_1 == num_lucky_digits - 1) return number + 7;
    }

    return FindNextLucky(div_10) * 10 + 4;
}

bool IsTramaValid(int start, int length, const std::vector<int>& lucky_counts) {
    for (int i = 0; i <= length; ++i) {
        if (CalculateNumLucky(start + i) != lucky_counts[i]) {
            return false;
        }
    }
    return true;
}

int CalculateMinimumLucky(int start, int length) {
  
    if (length == 0) return FindNextLucky(start);

    int steps = length / 10;
    if (start % 10 + length % 10 >= 10) {
        steps++;
    }
    int minimum = CalculateMinimumLucky(start / 10, steps) * 10 + start % 10;

    if (length > 20) return minimum;

    std::vector<int> lucky_counts(length + 1);
    for (int i = 0; i <= length; ++i) {
        lucky_counts[i] = CalculateNumLucky(start + i);
    }

    for (int next = FindNextLucky(start); next < minimum; next = FindNextLucky(next)) {
        if (IsTramaValid(next, length, lucky_counts)) {
            return next;
        }
    }

    return minimum;
}

int FindNextInterval(int start, int length)
{
  if (start < 1 || start > 1000000000 || length < 1 || length > 1000000000) {
        throw std::invalid_argument("Input values are out of bounds.");
    }
    length--;
  
  return CalculateMinimumLucky(start, length);
}

int main() {
   
  //TEST
int start_1 = 1;
int length_1 = 1;
int expected_1 = 2;
int result_1 = FindNextInterval(start_1, length_1);
assert(result_1 == expected_1);

//TEST_END

//TEST
int start_2 = 100;
int length_2 = 200;
int expected_2 = 200;
int result_2 = FindNextInterval(start_2, length_2);
assert(result_2 == expected_2);

//TEST_END

//TEST
int start_3 = 1000000;
int length_3 = 5000000;
int expected_3 = 11000000;
int result_3 = FindNextInterval(start_3, length_3);
assert(result_3 == expected_3);

//TEST_END

//TEST
int start_4 = 999999999;
int length_4 = 1000000000;
int expected_4 = 1999999999;
int result_4 = FindNextInterval(start_4, length_4);
assert(result_4 == expected_4);

//TEST_END

//TEST
int start_5 = 123;
int length_5 = 98;
int expected_5 = 223;
int result_5 = FindNextInterval(start_5, length_5);
assert(result_5 == expected_5);

//TEST_END

//TEST
int start_6 = 98761;
int length_6 = 1289;
int expected_6 = 99761;
int result_6 = FindNextInterval(start_6, length_6);
assert(result_6 == expected_6);

//TEST_END

//TEST
int start_7 = 500;
int length_7 = 500;
int expected_7 = 1200;
int result_7 = FindNextInterval(start_7, length_7);
assert(result_7 == expected_7);

//TEST_END

//TEST
int start_8 = 20;
int length_8 = 7;
int expected_8 = 30;
int result_8 = FindNextInterval(start_8, length_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
int start_9 = 1000000000;
int length_9 = 1;
int expected_9 = 1000000001;
int result_9 = FindNextInterval(start_9, length_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
int start_10 = 0;
int length_10 = 1000000000;
try {
    FindNextInterval(start_10, length_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int start_11 = 1000000000;
int length_11 = 0;
try {
    FindNextInterval(start_11, length_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int start_12 = 1000000001;
int length_12 = 1;
try {
    FindNextInterval(start_12, length_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int start_13 = 1;
int length_13 = 1000000001;
try {
    FindNextInterval(start_13, length_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int start_14 = -1;
int length_14 = 1000000000;
try {
    FindNextInterval(start_14, length_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
int start_15 = 1000000000;
int length_15 = -1;
try {
    FindNextInterval(start_15, length_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
    return 0;
}
