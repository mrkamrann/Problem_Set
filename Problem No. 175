/*
Link: https://codeforces.com/contest/908/problem/E


James is given an integer matrix_size.

Let max_value = 2^matrix_size - 1.

James is also given a set of vector_size integers denoted as the set values. The integers will be provided in base 2 as vector_size binary_strings of length matrix_size.

A set of integers S is called "good" if the following hold:

1. If a, is in S, then a XOR max_value is in S.
2. If a, b are in S, then a AND b is in S.
3. T is a subset of S

All elements of S are less than or equal to max_value. Here, xor and and refer to the bitwise XOR and bitwise AND operators, respectively.

Count the number of good sets S, modulo 10^9 + 7.

Create a C++ Function CountGoodSets that will return a long long denoting the number of good sets.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A vector<string> denoting binary_strings

Input Constraints:

The value of matrix_size should be at least 1 and at most 1000 inclusive.
The value of vector_size should be at least 1 and at most min(2^matrix_size, 50) inclusive.
The length of each binary_string should be exactly matrix_size.
All binary_strings should be distinct.
binary_string should only contain '0' and '1'
*/


#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <unordered_set>
#include <stdexcept>
#include <cassert>


std::vector<std::vector<long long>> ComputeCombinations(int max_value) {
    std::vector<std::vector<long long>> combinations(max_value + 1, std::vector<long long>(max_value + 1, 0));
    int modulus =  1000000007;
    for (int i = 0; i <= max_value; ++i) {
        for (int j = 0; j <= i; ++j) {
            combinations[i][j] = j ? (combinations[i-1][j-1] + combinations[i-1][j]) % modulus  : 1;
        }
    }
    return combinations;
}

std::vector<long long> ComputeFactorials(int max_value, const std::vector<std::vector<long long>>& combinations) {
    std::vector<long long> factorials(max_value + 1, 0);
    int modulus =  1000000007;
    factorials[0] = factorials[1] = 1;
    for (int i = 2; i <= max_value; ++i) {
        for (int j = 0; j < i; ++j) {
            factorials[i] = (factorials[i] + combinations[i-1][j] * factorials[j]) % modulus ;
        }
    }
    return factorials;
}

long long CountGoodSets(const std::vector<std::string>& binary_strings) {
  
  
    int matrix_size = binary_strings[0].size();
    if (matrix_size < 1 || matrix_size > 1000) {
        throw std::invalid_argument("Matrix size must be between 1 and 1000 inclusive");
    }
     
    int vector_size = binary_strings.size();
    
    if (vector_size < 1 || vector_size > std::min(2 * matrix_size, 50)) {
        throw std::invalid_argument("Vector size must be between 1 and min(2 * matrix_size, 50) inclusive");
    }
  

    std::unordered_set<std::string> unique_check;
    for (const std::string& str : binary_strings) {
        if (str.size() != static_cast<size_t>(matrix_size)) {
            throw std::invalid_argument("Each binary string must have length equal to matrix size");
        }
       for(const char character: str)
       {
         if (character != '0' && character != '1'){
            throw std::invalid_argument("Binary strings must contain only '0' and '1'");
        }
       }
        
        if (unique_check.count(str)) {
            throw std::invalid_argument("All binary_strings must be distinct");
        }
        unique_check.insert(str);
    }

   int modulus =  1000000007;
    std::vector<long long> binary_numbers(matrix_size, 0);
    for (int i = 0; i < vector_size; ++i) {
        for (int j = 0; j < matrix_size; ++j) {
            long long bit_value = 0;
            if (binary_strings[i][j] == '1') bit_value = 1;
            binary_numbers[j] |= bit_value << (vector_size - i - 1);
        }
    }

    std::map<long long, long long> frequency_map;
    for (int i = 0; i < matrix_size; ++i) {
        ++frequency_map[binary_numbers[i]];
    }

    std::vector<std::vector<long long>> combinations = ComputeCombinations(matrix_size);
    std::vector<long long> factorials = ComputeFactorials(matrix_size, combinations);
    
    long long answer = 1;
    for (std::map<long long, long long>::iterator ite = frequency_map.begin(); ite != frequency_map.end(); ++ite) {
        answer = (answer * factorials[ite->second]) % modulus;
    }
    return answer;
}

#include <iostream>
#include <vector>
#include <string>
#include <unordered_set>
#include <map>
#include <stdexcept>
#include <cassert>


int main() {
  
//TEST 
std::vector<std::string> binary_strings_1 = {"0"};
long long expected_1 = 1;
long long result_1 = CountGoodSets(binary_strings_1);
assert(result_1 == expected_1);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_2 = {"01", "10"};
long long expected_2 = 1;
long long result_2 = CountGoodSets(binary_strings_2);
assert(result_2 == expected_2);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_3 = {"11010", "00101", "11000"};
long long expected_3 = 4;
long long result_3 = CountGoodSets(binary_strings_3);
assert(result_3 == expected_3);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_4 = {"0000", "0001", "0010", "0100"};
long long expected_4 = 1;
long long result_4 = CountGoodSets(binary_strings_4);
assert(result_4 == expected_4);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_5 = {"11111", "11110", "11101", "11011"};
long long expected_5 = 2;
long long result_5 = CountGoodSets(binary_strings_5);
assert(result_5 == expected_5);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_6 = {"0", "1"};
long long expected_6 = 1;
long long result_6 = CountGoodSets(binary_strings_6);
assert(result_6 == expected_6);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_7 = {"101", "011", "110"};
long long expected_7 = 1;
long long result_7 = CountGoodSets(binary_strings_7);
assert(result_7 == expected_7);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_8 = {"1100", "1010", "1001", "0110", "0101", "0011"};
long long expected_8 = 1;
long long result_8 = CountGoodSets(binary_strings_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
std::vector<std::string> binary_strings_9 = {"110110110110110011011011011011", "010101010101010010101010101010"};
long long expected_9 = 860616440;
long long result_9 = CountGoodSets(binary_strings_9);
assert(result_9 == expected_9);

//TEST_END

//TEST 
std::vector<std::string> binary_strings_10 = {"-1"};
try {
    CountGoodSets(binary_strings_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
std::vector<std::string> binary_strings_11 = std::vector<std::string>(1, std::string(1001, '0'));
try {
    CountGoodSets(binary_strings_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<std::string> binary_strings_12 = {""};
try {
    
    CountGoodSets(binary_strings_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
std::vector<std::string> binary_strings_13(51, "0");
try {
    CountGoodSets(binary_strings_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST 
std::vector<std::string> binary_strings_14 = {"0", "01"};
try {
    
    CountGoodSets(binary_strings_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<std::string> binary_strings_15 = {"0", "0"};
try {
    
    CountGoodSets(binary_strings_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
  
std::vector<std::string> binary_strings_16 = {"01", "02"};
try {

    CountGoodSets(binary_strings_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::vector<std::string> binary_strings_17 = {"-1", "01"};
try {
    CountGoodSets(binary_strings_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
    return 0;
}
