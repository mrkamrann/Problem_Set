/*
Link: https://codeforces.com/contest/1975/problem/F
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


    std::vector<int> ProcessBitwise(int num, std::vector<int>& input_values) {
        if (num < 1 || num > 20) {
            throw std::invalid_argument("Invalid input: num must be between 1 and 20");
        }
        int len = (1 << num);
      
        if (input_values.size() != len - 1) {
            throw std::invalid_argument("Invalid size of input_values");
        }
        for (int value : input_values) {
            if (value < 0 || value >= (1 << (num + 1))) {
                throw std::invalid_argument("Invalid value in input_values");
            }
        }

        std::vector<int> bit_values(len, 0);
        std::vector<int> odd_indices;

        for (int i = 1; i < len; i++) {
            bit_values[i] = input_values[i - 1];
        }
        bit_values[0] = 1;

        for (int j = 0; j < num; j++) {
            for (int k = 0; k < (1 << j); k++) {
                for (int i = 0; i < (1 << (num - 1 - j)); i++) {
                    int x_val = bit_values[k + (i << (j + 1))];
                    int y_val = bit_values[k + (i << (j + 1)) + (1 << j)];
                    bit_values[k + (i << (j + 1))] = x_val & y_val;
                    bit_values[k + (i << (j + 1)) + (1 << j)] = x_val & (y_val >> 1);
                }
            }
        }

        for (int i = 0; i < len; i++) {
            if (bit_values[i] % 2) {
                odd_indices.push_back(i);
            }
        }
         
      if(odd_indices.size()==0) return {-1};
         return odd_indices;
    }


int main() {
 
// TEST
int num_1 = 3;
std::vector<int> input_values_1 = {15, 15, 15, 15, 15, 15, 12};
std::vector<int> expected_1 = {3,5,6,7};
std::vector<int> result_1 = ProcessBitwise(num_1, input_values_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
int num_2 = 5;
std::vector<int> input_values_2 = {63, 63, 63, 63, 6, 63, 63, 63, 63, 63, 63, 5, 63, 63, 63, 63, 63, 63, 8, 63, 63, 63, 63, 2, 63, 63, 63, 63, 63, 63, 63};
std::vector<int> expected_2 = {19};
std::vector<int> result_2 = ProcessBitwise(num_2, input_values_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
int num_3 = 1;
std::vector<int> input_values_3 = {2};
std::vector<int> expected_3 = {1};
std::vector<int> result_3 = ProcessBitwise(num_3, input_values_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
int num_4 = 2;
std::vector<int> input_values_4 = {3,3,7};
std::vector<int> expected_4 = {0,1,2,3};
std::vector<int> result_4 = ProcessBitwise(num_4, input_values_4);
assert(result_4 == expected_4);
// TEST_END

  
// TEST
int num_5 = 2;
std::vector<int> input_values_5 = {1,2,7};
std::vector<int> expected_5 = {2};
std::vector<int> result_5 = ProcessBitwise(num_5, input_values_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
int num_6 = 5;
std::vector<int> input_values_6 = {1, 3, 7, 3, 3, 4, 7, 1, 5, 1, 12, 6, 12, 4, 2, 3, 7, 1, 1, 2, 3, 10, 19, 1, 8, 12, 19, 2, 21, 25, 55};
std::vector<int> expected_6 = {-1};
std::vector<int> result_6 = ProcessBitwise(num_6, input_values_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
int num_7 = 2;
std::vector<int> input_values_7 = {1,3,1};
std::vector<int> expected_7 = {0};
std::vector<int> result_7 = ProcessBitwise(num_7, input_values_7);
assert(result_7 == expected_7);
// TEST_END
  
// TEST
int num_8 = 1;
std::vector<int> input_values_8 = {3};
std::vector<int> expected_8 = {0,1};
std::vector<int> result_8 = ProcessBitwise(num_8, input_values_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
int num_9 = 4;
std::vector<int> input_values_9 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
std::vector<int> expected_9 = {-1};
std::vector<int> result_9 = ProcessBitwise(num_9, input_values_9);
assert(result_9 == expected_9);
// TEST_END  

// TEST
int num_10 = 0; 
std::vector<int> input_values_10 = {0};
try {
    ProcessBitwise(num_10, input_values_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_11 = 21; 
std::vector<int> input_values_11 = {0};
try {
    ProcessBitwise(num_11, input_values_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_12 = 3;
std::vector<int> input_values_12 = {0, 1, 2, 3, 4}; 
try {
    ProcessBitwise(num_12, input_values_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_13 = -1; 
std::vector<int> input_values_13 = {0};
try {
    ProcessBitwise(num_13, input_values_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_14 = 4;
std::vector<int> input_values_14 = {-9999999, 0, 1}; 
try {
    ProcessBitwise(num_14, input_values_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_15 = -19;
std::vector<int> input_values_15 = {0, 1, 4};
try {
    ProcessBitwise(num_15, input_values_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

    return 0;
}

