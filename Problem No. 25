/*

Once upon a time in the quaint village of Numeria, there lived a young lad named Jimmy. Jimmy had a peculiar habit of jotting down sequences of positive integers whenever he stumbled upon interesting 
numerical patterns.One fine afternoon, while strolling through the village square, Jimmy was struck by a particularly mesmerizing sequence of numbers.


Excitedly, he pulled out his trusty notebook and started scribbling down the sequence. Jimmy wrote down a series of positive integers in a string called input_string, but he forgot to add commas to separate them. 
However, he remembers that the list of integers was non-decreasing, and no integer had leading zeros.

Help Jimmy in creating a C++ function NumberOfCombinations which will  return the number of possible lists of integers that he could have written down to get the string input_string. 
Since the answer may be large, return it modulo 10^9 + 7.


Input Type:

A string denoting num

Input Constraints:

1.The length of input_string should be at least 1 and at most 3500 both inclusive.
2.input_string consists of digits '0' through '9'.


*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

struct Hashing {
    std::vector<long long> prefix_hashes;
    std::vector<long long> inverses;
    long long modulo = 1e9 + 7;

   
    void AddModulo(long long &result, long long addend) {
        result += addend;
        if (result >= modulo)
            result -= modulo;
    }

  
    long long Power(long long base, long long exponent) {
        long long result = 1;
        while (exponent > 0) {
            if (exponent % 2 == 1) {
                result = (result * base) % modulo;
            }
            base = (base * base) % modulo;
            exponent = exponent / 2;
        }
        return result;
    }

 
    void BuildPrefixHashes(std::string &input_string) {
        int length = input_string.length();
        long long prime = 31;
        long long base = 1;

 
        prefix_hashes.resize(length);
        inverses.resize(length);

        prefix_hashes[0] = input_string[0] - '0' + 1;
        inverses[0] = 1;
        for (long long i = 1; i < length; i++) {
            base = (base * prime) % modulo;
            inverses[i] = Power(base, modulo - 2);
            prefix_hashes[i] = (prefix_hashes[i - 1] + (input_string[i] - '0' + 1) * base) % modulo;
        }
    }

  
    long long SubstringHash(long long start, long long end) {
        if (start == 0)
            return prefix_hashes[end];
        long long value = (prefix_hashes[end] - prefix_hashes[start - 1] + modulo) % modulo;
        value = (value * inverses[start]) % modulo;
        return value;
    }
};


int CompareSubstrings(Hashing &hasher, std::string &input_string, int left_start, int left_end, int right_start, int right_end) {
    int left_length = left_end - left_start + 1;
    int right_length = right_end - right_start + 1;
    int min_length = std::min(left_length, right_length);
    int low = 0, high = min_length + 1, mid;
    while (high - low > 1) {
        mid = (low + high) / 2;
        long long left_hash = hasher.SubstringHash(left_start, left_start + mid - 1);
        long long right_hash = hasher.SubstringHash(right_start, right_start + mid - 1);
        if (left_hash == right_hash)
            low = mid;
        else
            high = mid;
    }
    if (low == min_length) {
        if (left_length == right_length)
            return 0;
        else if (left_length > right_length)
            return 1;
        else
            return -1;
    } else {
        if (input_string[left_start + low] > input_string[right_start + low]) {
            return 1;
        } else
            return -1;
    }
}


int NumberOfCombinations(std::string &input_string) {
  
    if (input_string.length() < 1 || input_string.length() > 3500) {
        throw std::invalid_argument("Input string length should be between 1 and 3500 (inclusive).");
    }

 
    for (char character : input_string) {
        if (character < '0' || character > '9') {
            throw std::invalid_argument("Input string should consist of only digits '0' through '9'.");
        }
    }
    int length = input_string.length();
    
    Hashing hasher;
    hasher.BuildPrefixHashes(input_string);

    std::vector<std::vector<long long>> dp_arr(length, std::vector<long long>(length, 0));
    std::vector<long long> sum(length, 0);

    for (int i = 0; i < length; i++) {
        if (input_string[0] == '0') {
            dp_arr[0][i] = 0;
        } else {
            dp_arr[0][i] = 1;
        }
    }
    sum[0] = dp_arr[0][0];
    for (int i = 1; i < length; i++) {
        sum[i] = sum[i - 1] + dp_arr[0][i];
    }
    for (int left = 1; left < length; left++) {
        for (int right = left; right < length; right++) {
            int len = right - left + 1;
            if (input_string[left] == '0') {
                dp_arr[left][right] = 0;
            } else {
                int right_index = left - 1, left_index = std::max(0, left - len + 1);
                long long ans = sum[right_index] - (left_index ? sum[left_index - 1] : 0);
                if (ans < 0)
                    ans += hasher.modulo;
                if (left - len >= 0) {
                    int flag = CompareSubstrings(hasher, input_string, left, right, left - len, left - 1);
                    if (flag >= 0) {
                        hasher.AddModulo(ans, dp_arr[left - len][left - 1]);
                    }
                }
                dp_arr[left][right] = ans;
            }
        }
        for (int i = 0; i <= left; i++) {
            sum[i] = dp_arr[i][left];
            if (i > 0)
                hasher.AddModulo(sum[i], sum[i - 1]);
        }
    }
    long long result = 0;
    for (int i = 0; i < length; i++)
        hasher.AddModulo(result, dp_arr[i][length - 1]);
    return result;
}

int main() {
    
  //TEST
   std::string input_string_1 = "094";
   int expected_1 = 0;
   int result_1 = NumberOfCombinations(input_string_1);
   assert(expected_1 == result_1);
  //TEST_END
  
  //TEST
std::string input_string_2 = "1203";
int expected_2 = 2;
int result_2 = NumberOfCombinations(input_string_2);
assert(expected_2 == result_2);
//TEST_END

//TEST
std::string input_string_3 = "226";
int expected_3 = 3;
int result_3 = NumberOfCombinations(input_string_3);
assert(expected_3 == result_3);
//TEST_END

//TEST
std::string input_string_4 = "0";
int expected_4 = 0;
int result_4 = NumberOfCombinations(input_string_4);
assert(expected_4 == result_4);
//TEST_END

//TEST
std::string input_string_5 = "10";
int expected_5 = 1;
int result_5 = NumberOfCombinations(input_string_5);
assert(expected_5 == result_5);
//TEST_END

//TEST
std::string input_string_6 = "100";
int expected_6 = 1;
int result_6 = NumberOfCombinations(input_string_6);
assert(expected_6 == result_6);
//TEST_END

//TEST
std::string input_string_7 = "123456";
int expected_7 = 11;
int result_7 = NumberOfCombinations(input_string_7);
assert(expected_7 == result_7);
//TEST_END

//TEST
std::string input_string_8 = "11106";
int expected_8 = 4;
int result_8 = NumberOfCombinations(input_string_8);
assert(expected_8 == result_8);
//TEST_END

//TEST
std::string input_string_9 = "101";
int expected_9 = 1;
int result_9 = NumberOfCombinations(input_string_9);
assert(expected_9 == result_9);
//TEST_END
 
  
//TEST
std::string input_string_10 = "abc";
try {
    NumberOfCombinations(input_string_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string input_string_11 = "";
try {
    NumberOfCombinations(input_string_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::string input_string_12 = "20a";
try {
    NumberOfCombinations(input_string_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END




  
  
    return 0;
}

