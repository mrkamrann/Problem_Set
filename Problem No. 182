/*
Link: https://codeforces.com/contest/1673/problem/E

Brock has an ambiguous expression expr = a_1 ∧ a_2 ∧ a_3 ∧ ... ∧ a_n. The symbol ∧ can be replaced with either a power operation or an XOR operation to get an
unambiguous expression expr_prime.

The value of this expression expr_prime is determined according to the following rules:

All power operations are performed before any XOR operation. In other words, the power operation takes precedence over the XOR operation. For example, 4 XOR 6 
Power 2 = 4 ⊕ (6^2) = 4 ⊕ 36 = 32.
Consecutive powers are calculated from left to right. For example, 2 Power 3 Power 4 = (2^3)^4 = 8^4 = 4096.

You are given a vector elements of length num_elements and an integer target_sum. The vector vec_a is given by a_i = 2^b_i, and the expression expr is given by
expr = a_1 ∧ a_2 ∧ a_3 ∧ ... ∧ a_n. You need to find the XOR of the values of all possible unambiguous expressions expr_prime which can be obtained from expr 
and has at least target_sum ∧ symbols used as XOR operations. Since the answer can be very large, you need to find it modulo 2^(2^20). Since this number can also 
be very large, you need to print its binary representation without leading zeroes. If the answer is equal to 0, print 0.

Given an integer target_sum and a vector<int> elements of size num_elements return a binary string without leading zeroes denoting the answer to the problem. 
If the answer is equal to 0, print 0.

Create a C++ function CalculateExprValue that will return a string denoting the expected value.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An Integer denoting target_sum
vector<int> denoting elements

Input Constraints

The length of elements should be at least 1 and at most 2^20 inclusive.
Each value of elements should be in the range [1, 2^20) inclusive.
The values for target_sum should be in the range [0, num_elements) inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <sstream>
#include <cassert>

int ComputeResult(int num_elements, int target_sum) {
    if (target_sum <= 0) return num_elements == 0;
    if (num_elements < target_sum) return 0;
    return ((num_elements - 1) & (target_sum - 1)) == (target_sum - 1);
}

std::string CalculateExprValue(int target_sum, const std::vector<int>& elements) {
   
    int num_elements = elements.size();
    
    if (num_elements <= 0 || num_elements > 1048576) {
        throw std::invalid_argument("Invalid number of elements.");
    }
    if (target_sum < 0 || target_sum >= num_elements) {
        throw std::invalid_argument("Invalid target sum.");
    }
    for (int element : elements) {
        if (element < 1 || element >= 1048576) {
            throw std::invalid_argument("Invalid element value.");
        }
    }
    const int max_elements = (1 << 20) + 5;
    const int mask_value = (1 << 20) - 1;
    
    std::vector<int> results(max_elements, 0);
    int max_index = mask_value;

    for (int i = 0; i < num_elements; i++) {
        for (int j = i, current_sum = 0; j < num_elements; current_sum += elements[++j]) {
            if (current_sum >= 20 || (mask_value >> current_sum) < elements[i]) break;
            int extra_term = (i > 0) + (j < num_elements - 1);
            results[elements[i] << current_sum] ^= ComputeResult(num_elements - 1 - (j - i) - extra_term, target_sum - extra_term);
        }
    }

    while (max_index && !results[max_index]) --max_index;

    std::stringstream result_stream;
    while (~max_index) result_stream << results[max_index--];
    return result_stream.str();
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <sstream>
#include <cassert>

/*
Link: https://codeforces.com/contest/1673/problem/E

Brock has an ambiguous expression expr = a_1 ∧ a_2 ∧ a_3 ∧ ... ∧ a_n. The symbol ∧ can be replaced with either a power operation or an XOR operation to get an
unambiguous expression expr_prime.

The value of this expression expr_prime is determined according to the following rules:

All power operations are performed before any XOR operation. In other words, the power operation takes precedence over the XOR operation. For example, 4 XOR 6 
Power 2 = 4 ⊕ (6^2) = 4 ⊕ 36 = 32.
Consecutive powers are calculated from left to right. For example, 2 Power 3 Power 4 = (2^3)^4 = 8^4 = 4096.

You are given a vector elements of length num_elements and an integer target_sum. The vector vec_a is given by a_i = 2^b_i, and the expression expr is given by
expr = a_1 ∧ a_2 ∧ a_3 ∧ ... ∧ a_n. You need to find the XOR of the values of all possible unambiguous expressions expr_prime which can be obtained from expr 
and has at least target_sum ∧ symbols used as XOR operations. Since the answer can be very large, you need to find it modulo 2^(2^20). Since this number can also 
be very large, you need to print its binary representation without leading zeroes. If the answer is equal to 0, print 0.

Given an integer target_sum and a vector<int> elements of size num_elements return a binary string without leading zeroes denoting the answer to the problem. 
If the answer is equal to 0, print 0.

Create a C++ function CalculateExprValue that will return a string denoting the expected value.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type

An Integer denoting target_sum
vector<int> denoting elements

Input Constraints

The length of elements should be at least 1 and at most 2^20 inclusive.
Each value of elements should be in the range [1, 2^20) inclusive.
The values for target_sum should be in the range [0, num_elements) inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <sstream>
#include <cassert>

int ComputeResult(int num_elements, int target_sum) {
    if (target_sum <= 0) return num_elements == 0;
    if (num_elements < target_sum) return 0;
    return ((num_elements - 1) & (target_sum - 1)) == (target_sum - 1);
}

std::string CalculateExprValue(int target_sum, const std::vector<int>& elements) {
   
    int num_elements = elements.size();
    
    if (num_elements <= 0 || num_elements > 1048576) {
        throw std::invalid_argument("Invalid number of elements.");
    }
    if (target_sum < 0 || target_sum >= num_elements) {
        throw std::invalid_argument("Invalid target sum.");
    }
    for (int element : elements) {
        if (element < 1 || element >= 1048576) {
            throw std::invalid_argument("Invalid element value.");
        }
    }
    const int max_elements = (1 << 20) + 5;
    const int mask_value = (1 << 20) - 1;
    
    std::vector<int> results(max_elements, 0);
    int max_index = mask_value;

    for (int i = 0; i < num_elements; i++) {
        for (int j = i, current_sum = 0; j < num_elements; current_sum += elements[++j]) {
            if (current_sum >= 20 || (mask_value >> current_sum) < elements[i]) break;
            int extra_term = (i > 0) + (j < num_elements - 1);
            results[elements[i] << current_sum] ^= ComputeResult(num_elements - 1 - (j - i) - extra_term, target_sum - extra_term);
        }
    }

    while (max_index && !results[max_index]) --max_index;

    std::stringstream result_stream;
    while (~max_index) result_stream << results[max_index--];
    return result_stream.str();
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <sstream>
#include <cassert>
using namespace std;

int main() {

//TEST
std::vector<int> elements_1 = {1,3};
int target_sum_1 = 1;
std::string expected_1 = "1010";
std::string result_1 = CalculateExprValue(target_sum_1, elements_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> elements_2 = {1, 2, 3};
int target_sum_2 = 1;
std::string expected_2 = "10000000000010100";
std::string result_2 = CalculateExprValue(target_sum_2, elements_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> elements_3 = {1,1,1,1,1,1};
int target_sum_3 = 1;
std::string expected_3 = "100000000";
std::string result_3 = CalculateExprValue(target_sum_3, elements_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> elements_4 = {1,1,1};
int target_sum_4 = 1;
std::string expected_4 = "10";
std::string result_4 = CalculateExprValue(target_sum_4, elements_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> elements_5 = {1, 1, 1, 1, 1};
int target_sum_5 = 2;
std::string expected_5 = "10000";
std::string result_5 = CalculateExprValue(target_sum_5, elements_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> elements_6 = {1, 2};
int target_sum_6 = 1;
std::string expected_6 = "110";
std::string result_6 = CalculateExprValue(target_sum_6, elements_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> elements_7 = {1,1,1,1};
int target_sum_7 = 2;
std::string expected_7 = "100";
std::string result_7 = CalculateExprValue(target_sum_7, elements_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> elements_8 = {2,1};
int target_sum_8 = 1;
std::string expected_8 = "110";
std::string result_8 = CalculateExprValue(target_sum_8, elements_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> elements_9 = {1, 2,1,1};
int target_sum_9 = 1;
std::string expected_9 = "10000";
std::string result_9 = CalculateExprValue(target_sum_9, elements_9);
assert(result_9 == expected_9);
//TEST_END



//TEST
std::vector<int> elements_10 = {-1, 2, 3};
int target_sum_10 = 3;
try {
    CalculateExprValue(target_sum_10, elements_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_11(1048577,5);
int target_sum_11 = 3;
try {
    CalculateExprValue(target_sum_11, elements_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_12 = {};
int target_sum_12 = 3;
try {
    CalculateExprValue(target_sum_12, elements_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_13 = {1, 2, 3};
int target_sum_13 = 10;
try {
    CalculateExprValue(target_sum_13, elements_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_14 = {1048576656, 2097152, 4194304};
int target_sum_14 = 6291456;
try {
    CalculateExprValue(target_sum_14, elements_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_15 = {1, 2, 10000000, 4, 5};
int target_sum_15 = 7;
try {
    CalculateExprValue(target_sum_15, elements_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_16 = {1, 2, 3, 4, 5};
int target_sum_16 = 9999;
try {
    CalculateExprValue(target_sum_16, elements_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_17 = {1, -5546942, 3, 4, 5};
int target_sum_17 = 20;
try {
    CalculateExprValue(target_sum_17, elements_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_18 = {1, 2, 3};
int target_sum_18 = -99999;
try {
    CalculateExprValue(target_sum_18, elements_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> elements_19 = {1, 2, 3};
int target_sum_19 = -1;
try {
    CalculateExprValue(target_sum_19, elements_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


    return 0;
}

