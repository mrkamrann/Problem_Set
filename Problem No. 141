/*
Link: https://codeforces.com/contest/1733/problem/E

Hemant has a conveyor with 120 rows and 120 columns. Each row and column is numbered from 0 to 119, and the cell in the i-th row and j-th column is denoted as
(i, j). The top leftmost cell is (0, 0). Each cell has a belt, and all belts are initially facing to the right.

Initially, a slime ball is on the belt of (0, 0), and other belts are empty. Every second, the state of the conveyor changes as follows:

All slime balls on the conveyor move one cell in the direction of the belt at the same time. If there is no cell in the moved position, the slime gets out of 
the conveyor, and if two slime balls move to the same cell, they merge into one. All belts with slime ball in the previous second change direction at the same 
time: belts facing to the right become facing to the down, and vice versa. A new slime ball is placed on cell (0, 0).
There three integers time, x_coord, and y_coord. You have to find out if there is a slime at the cell (x_coord, y_coord) after time seconds from the start.

Create a C++ Function CheckSlimePosition that will return a boolean true if there is a slime ball in the cell (x_coord, y_coord) after time seconds 
from the initial state, otherwise return false.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

An Integers denoting time
An Integers denoting x_coord
An Integers denoting y_coord

Input Constraints

Each value of time should be in the range [0, 10^18] inclusive.
Each value of x_coord and y_coord should be in the range [0, 119] inclusive.

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

long long Solve(long long time, int x_coord, int y_coord) {
  

    const int max_size = 130;
    std::vector<std::vector<long long>> grid(max_size, std::vector<long long>(max_size, 0));
    grid[1][1] = std::max(time - x_coord - y_coord + 1, 0ll);
    x_coord++;
    y_coord++;
    for (int i = 1; i <= x_coord; i++) {
        for (int j = 1; j <= y_coord; j++) {
            if (i != 1 || j != 1) {
                grid[i][j] = grid[i - 1][j] / 2 + (grid[i][j - 1] + 1) / 2;
            }
        }
    }
    return grid[x_coord][y_coord];
}

bool CheckSlimePosition(long long time, int x_coord, int y_coord) {
  
    if (time < 0 || time > 1000000000000000000LL) {
        throw std::invalid_argument("time must be in the range 0 ≤ time ≤ 10^18");
    }
    if (x_coord < 0 || x_coord >= 120) {
        throw std::invalid_argument("x_coord must be in the range 0 ≤ x_coord < 120");
    }
    if (y_coord < 0 || y_coord >= 120) {
        throw std::invalid_argument("y_coord must be in the range 0 ≤ y_coord < 120");
    }
  
    if (Solve(time, x_coord, y_coord) != Solve(time - 1, x_coord, y_coord)) {
       return true;
    } 
     else {
        return false;
    }
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
   
  // TEST
    long long time_1 = 0;
    int x_coord_1 = 0;
    int y_coord_1 = 0;
    bool expected_1 = true;
    bool result_1 = CheckSlimePosition(time_1, x_coord_1, y_coord_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    long long time_2 = 1000000000000000000;
    int x_coord_2 = 119;
    int y_coord_2 = 119;
    bool expected_2 = false;
    bool result_2 = CheckSlimePosition(time_2, x_coord_2, y_coord_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    long long time_3 = 5;
    int x_coord_3 = 60;
    int y_coord_3 = 60;
    bool expected_3 = false;
    bool result_3 = CheckSlimePosition(time_3, x_coord_3, y_coord_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    long long time_4 = 5;
    int x_coord_4 = 1;
    int y_coord_4 = 3;
    bool expected_4 = true;
    bool result_4 = CheckSlimePosition(time_4, x_coord_4, y_coord_4);
    assert(result_4 == expected_4);
    // TEST_END

    // TEST
    long long time_5 = 0;
    int x_coord_5 = 0;
    int y_coord_5 = 0;
    bool expected_5 = true;
    bool result_5 = CheckSlimePosition(time_5, x_coord_5, y_coord_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    long long time_6 = 0;
    int x_coord_6 = 119;
    int y_coord_6 = 0;
    bool expected_6 = false;
    bool result_6 = CheckSlimePosition(time_6, x_coord_6, y_coord_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    long long time_7 = 2;
    int x_coord_7 = 0;
    int y_coord_7 = 2;
    bool expected_7 = true;
    bool result_7 = CheckSlimePosition(time_7, x_coord_7, y_coord_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    long long time_8 = 50000;
    int x_coord_8 = 100;
    int y_coord_8 = 50;
    bool expected_8 = false;
    bool result_8 = CheckSlimePosition(time_8, x_coord_8, y_coord_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    long long time_9 = 1547748756;
    int x_coord_9 = 100;
    int y_coord_9 = 111;
    bool expected_9 = true;
    bool result_9 = CheckSlimePosition(time_9, x_coord_9, y_coord_9);
    assert(result_9 == expected_9);
    // TEST_END

    // TEST
    long long time_10 = -1;
    int x_coord_10 = 50;
    int y_coord_10 = 50;
    try {
        CheckSlimePosition(time_10, x_coord_10, y_coord_10);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    long long time_11 = 1000000000000000001LL;
    int x_coord_11 = 50;
    int y_coord_11 = 50;
    try {
        CheckSlimePosition(time_11, x_coord_11, y_coord_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    long long time_12 = 0;
    int x_coord_12 = -1;
    int y_coord_12 = 50;
    try {
        CheckSlimePosition(time_12, x_coord_12, y_coord_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    long long time_13 = 0;
    int x_coord_13 = 120;
    int y_coord_13 = 50;
    try {
        CheckSlimePosition(time_13, x_coord_13, y_coord_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    long long time_14 = 0;
    int x_coord_14 = 50;
    int y_coord_14 = -1;
    try {
        CheckSlimePosition(time_14, x_coord_14, y_coord_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    long long time_15 = 0;
    int x_coord_15 = 50;
    int y_coord_15 = 120;
    try {
        CheckSlimePosition(time_15, x_coord_15, y_coord_15);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    long long time_16 = -1;
    int x_coord_16 = -1;
    int y_coord_16 = -1;
    try {
        CheckSlimePosition(time_16, x_coord_16, y_coord_16);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

   
   
    return 0;
}
