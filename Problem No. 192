/*
Link: https://codeforces.com/contest/1305/problem/F

Kavish is very angry at the other setters for using him as a theme! As a punishment, he forced them to solve the following problem:

You have a vector elements consisting of num_elements positive integers. An operation consists of choosing an element and either adding 1 to it or subtracting 1 
from it, such that the element remains positive. We say the vector is good if the greatest common divisor of all its elements is not 1. Find the minimum number of
operations needed to make the vector good.

Unable to match Kavish's intellect, the setters failed to solve the problem. Help them escape from Kavish's punishment!

Return a single integer — the minimum number of operations required to make the vector good.

Create a C++ function MakeVectorGood that will return an integer denoting the minimum number of operations required to make the vector good.

Use appropriate error handling using the stdexcept library for the invalid test cases.

Input Type:

A vector<long long> denoting elements.

Input Constraints:

The length of elements(num_elements) should be in the range [2, 2⋅10^5] inclusive.
The value of elements[i] should be in the range [1, 10^12] inclusive.
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <cassert>
#include <stdexcept>

void Check(long long value, long long num_elements, std::vector<long long>& elements, long long& result) {
  
    long long count;
  
    for (long long divisor = 2; divisor * divisor <= value; ++divisor) {
        if (value % divisor == 0) {
            while (value % divisor == 0) value /= divisor;
            count = 0;
            for (int index = 0; index < num_elements; ++index) {
                if (elements[index] < divisor) {
                    count += divisor - elements[index];
                } else {
                    count += std::min(elements[index] % divisor, divisor - elements[index] % divisor);
                }
            }
            result = std::min(result, count);
        }
    }
    if (value > 1) {
        long long divisor = value;
        count = 0;
        for (long long index = 0; index < num_elements; ++index) {
            if (elements[index] < divisor) {
                count += divisor - elements[index];
            } else {
                count += std::min(elements[index] % divisor, divisor - elements[index] % divisor);
            }
        }
        result = std::min(result, count);
    }
}

long long CalculateMinOperations(std::vector<long long>& elements) {
  
    long long num_elements = elements.size();
  
    if (num_elements < 2 || num_elements > 200000) {
        throw std::invalid_argument("Number of elements out of range (2 ≤ num_elements ≤ 200000).");
    }
  
    for (int index = 0; index < num_elements; ++index) {
    
        if (elements[index] < 1 || elements[index] > 1e12) {
            throw std::invalid_argument("Element value out of range (1 ≤ element ≤ 1e12).");
        }
    }

    long long result = 1e18;

    std::srand(20091207);
    std::random_shuffle(elements.begin(), elements.end());

    for (long long index = std::min(num_elements, 50LL); index > 0; --index) {
        Check(elements[index - 1] - 1, num_elements, elements, result);
        Check(elements[index - 1], num_elements, elements, result);
        Check(elements[index - 1] + 1, num_elements, elements, result);
    }

    assert(result <= num_elements);
    return result;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <random>
#include <cassert>
#include <stdexcept>

int main() {
  
//TEST
std::vector<long long> elements_1 = {1, 2, 3, 4, 5};
long long expected_1 = 3; 
long long result_1 = CalculateMinOperations(elements_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<long long> elements_2 = {1000000000000, 999999999999, 999999999998};
long long expected_2 = 1; 
long long result_2 = CalculateMinOperations(elements_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<long long> elements_3 = {2, 2, 2, 2, 2};
long long expected_3 = 0;
long long result_3 = CalculateMinOperations(elements_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<long long> elements_4 = {1, 1000000000000};
long long expected_4 = 1; 
long long result_4 = CalculateMinOperations(elements_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<long long> elements_5 = {100, 1000, 10000, 100000};
long long expected_5 = 0; 
long long result_5 = CalculateMinOperations(elements_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<long long> elements_6 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
long long expected_6 = 10; 
long long result_6 = CalculateMinOperations(elements_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<long long> elements_7 = {1, 100, 1000, 10000, 100000, 1000000};
long long expected_7 = 1; 
long long result_7 = CalculateMinOperations(elements_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<long long> elements_8 = {1, 2};
long long expected_8 = 1;
long long result_8 = CalculateMinOperations(elements_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<long long> elements_9 = {1000000000000, 999999999999, 1, 2, 3, 4, 5};
long long expected_9 = 4; 
long long result_9 = CalculateMinOperations(elements_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<long long> elements_10 = {1, 1000000000001};
try {
    CalculateMinOperations(elements_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_11 = {1, 0};
try {
    CalculateMinOperations(elements_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_12 = {1};
try {
    CalculateMinOperations(elements_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_13 = {1000000000000};
try {
    CalculateMinOperations(elements_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_14 = {1, -1};
try {
    CalculateMinOperations(elements_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_15 = {-1, -1, -1};
try {
    CalculateMinOperations(elements_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_16 = {};
try {
    CalculateMinOperations(elements_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<long long> elements_17(700000, 1);
try {
    CalculateMinOperations(elements_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
  
    return 0;
}
