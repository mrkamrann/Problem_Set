/*
Link: https://codeforces.com/contest/53/problem/E

Julie lives in Bertown, where life has become difficult due to an excess of roads. The city has num_junctions junctions and num_roads two-way roads, 
allowing one to travel between any two junctions. The government spends a significant amount of resources maintaining these roads. To address this, the mayor
wants to close some roads so that only num_junctions - 1 roads remain, ensuring it's still possible to travel between any two junctions. Moreover, the mayor wants
exactly num_dead_ends dead ends, where a dead end is defined as a junction connected by only one road. Your task is to count the number of ways to close the roads
such that the following conditions are met:

There are exactly num_junctions - 1 roads left.

It is possible to travel between any two junctions.

There are exactly num_dead_ends dead ends in the resulting map.

Two ways are considered different if there is at least one road that is closed in the first way but open in the second.

Return the number of ways to close the roads under the given conditions.

Create a C++ function CountRoadClosures that will return an integer denoting the number of different ways of closing the roads. 

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

An integer denoting num_junctions
An integer denoting num_dead_ends
A vector<pair<int,int>> denoting roads

Input Constraints

The values for num_junctions should be in the range [3, 10] inclusive.
The length of roads(num_roads) should be at least num_junctions - 1 and at most num_junctions * (num_junctions - 1) / 2 inclusive.
The values for num_dead_ends should be in the range [2, num_junctions - 1] inclusive.
Each value of roads[i][0] and roads[i][1] should be in the range [1, num_junctions] inclusive.
roads[i][0] should not be equal to roads[i][1]

*/


#include <iostream>
#include <vector>
#include <stdexcept>
#include <cassert>


 int CountBits(int value) {
        int result = 0;
        while (value) {
            result += (value % 2);
            value /= 2;
        }
        return result;
    }

   long long CountRoadClosures(int num_junctions, int num_dead_ends, const std::vector<std::pair<int, int>>& roads) {

        int num_roads = roads.size();

        if (num_junctions < 3 || num_junctions > 10) throw std::invalid_argument("Invalid number of junctions");

        if (num_roads < num_junctions - 1 || num_roads > num_junctions * (num_junctions - 1) / 2) throw std::invalid_argument("Invalid number of roads");

        if (num_dead_ends < 2 || num_dead_ends > num_junctions - 1) throw std::invalid_argument("Invalid number of dead ends");

        for (int i = 0; i < num_roads; ++i) {
            if (roads[i].first == roads[i].second || roads[i].first < 1 || roads[i].first > num_junctions || roads[i].second < 1 || roads[i].second > num_junctions) {
                throw std::invalid_argument("Invalid values in roads");
            }
        }

        int limit = 1 << num_junctions;
        std::vector<std::vector<long long>> dp_table(1024, std::vector<long long>(1024, 0));
        std::vector<std::vector<int>> connections(10, std::vector<int>(10, 0));
        
        for (int i = 0; i < roads.size(); ++i) {
            int u_val = roads[i].first - 1;
            int v_val = roads[i].second - 1;
            connections[u_val][v_val] = connections[v_val][u_val] = dp_table[(1 << u_val) | (1 << v_val)][(1 << u_val) | (1 << v_val)] = 1;
        }
        
        for (int s = 0; s < limit; ++s) {
            for (int t = s; t; t = (t - 1) & s) {
                if (dp_table[s][t]) {
                    for (int i = 0; i < num_junctions; ++i) {
                        if (s >> i & 1) {
                            for (int j = 0; j < num_junctions; ++j) {
                                if (!(s >> j & 1) && connections[i][j]) {
                                    int result = (t & (limit - 1 - (1 << i))) | (1 << j);
                                    if (1 << j == (result & -result)) {
                                        dp_table[s | (1 << j)][result] += dp_table[s][t];
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        long long answer = 0;
        for (int i = 0; i < limit; ++i) {
            if (CountBits(i) == num_dead_ends) {
                answer += dp_table[limit - 1][i];
            }
        }
        
        return answer;
    }


int main() {
    
   // TEST
int num_junctions_1 = 3;
int num_dead_ends_1 = 2;
std::vector<std::pair<int, int>> roads_1 = {{1, 2}, {2, 3}};
long long expected_1 = 1;
long long result_1 = CountRoadClosures(num_junctions_1, num_dead_ends_1, roads_1);
assert(result_1 == expected_1);
// TEST_END

// TEST
int num_junctions_2 = 4;
int num_dead_ends_2 = 2;
std::vector<std::pair<int, int>> roads_2 = {{1, 2}, {2, 3}, {3, 4}};
long long expected_2 = 1;
long long result_2 = CountRoadClosures(num_junctions_2, num_dead_ends_2, roads_2);
assert(result_2 == expected_2);
// TEST_END

// TEST
int num_junctions_3 = 5;
int num_dead_ends_3 = 3;
std::vector<std::pair<int, int>> roads_3 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}};
long long expected_3 = 0;
long long result_3 = CountRoadClosures(num_junctions_3, num_dead_ends_3, roads_3);
assert(result_3 == expected_3);
// TEST_END

// TEST
int num_junctions_4 = 3;
int num_dead_ends_4 = 2;
std::vector<std::pair<int, int>> roads_4 = {{1, 2}, {2, 3}, {1, 3}};
long long expected_4 = 3;
long long result_4 = CountRoadClosures(num_junctions_4, num_dead_ends_4, roads_4);
assert(result_4 == expected_4);
// TEST_END

// TEST
int num_junctions_5 = 4;
int num_dead_ends_5 = 2;
std::vector<std::pair<int, int>> roads_5 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
long long expected_5 = 12;
long long result_5 = CountRoadClosures(num_junctions_5, num_dead_ends_5, roads_5);
assert(result_5 == expected_5);
// TEST_END

// TEST
int num_junctions_6 = 8;
int num_dead_ends_6 = 5;
std::vector<std::pair<int, int>> roads_6 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}};
long long expected_6 = 0;
long long result_6 = CountRoadClosures(num_junctions_6, num_dead_ends_6, roads_6);
assert(result_6 == expected_6);
// TEST_END

// TEST
int num_junctions_7 = 4;
int num_dead_ends_7 = 2;
std::vector<std::pair<int, int>> roads_7 =  {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
long long expected_7 = 12;
long long result_7 = CountRoadClosures(num_junctions_7, num_dead_ends_7, roads_7);
assert(result_7 == expected_7);
// TEST_END

// TEST
int num_junctions_8 = 10;
int num_dead_ends_8 = 7;
std::vector<std::pair<int, int>> roads_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
long long expected_8 = 0;
long long result_8 = CountRoadClosures(num_junctions_8, num_dead_ends_8, roads_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
int num_junctions_9 = 4;
int num_dead_ends_9 = 3;
std::vector<std::pair<int, int>> roads_9 =  {{1, 2}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
long long expected_9 = 4;
long long result_9 = CountRoadClosures(num_junctions_9, num_dead_ends_9, roads_9);
assert(result_9 == expected_9);
// TEST_END

// TEST
int num_junctions_10 = 2;
int num_dead_ends_10 = 1;
std::vector<std::pair<int, int>> roads_10 = {{1, 2}};
try {
    CountRoadClosures(num_junctions_10, num_dead_ends_10, roads_10);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_11 = 10;
int num_dead_ends_11 = 11;
std::vector<std::pair<int, int>> roads_11 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_11, num_dead_ends_11, roads_11);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_12 = 11;
int num_dead_ends_12 = 8;
std::vector<std::pair<int, int>> roads_12 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_12, num_dead_ends_12, roads_12);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_13 = 3;
int num_dead_ends_13 = 2;
std::vector<std::pair<int, int>> roads_13 = {{1, 1}, {2, 3}};
try {
    CountRoadClosures(num_junctions_13, num_dead_ends_13, roads_13);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_14 = 10;
int num_dead_ends_14 = 8;
std::vector<std::pair<int, int>> roads_14 = {{-999, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_14, num_dead_ends_14, roads_14);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_15 = 10;
int num_dead_ends_15 = 8;
std::vector<std::pair<int, int>> roads_15 = {{1, 2}, {2, 11}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_15, num_dead_ends_15, roads_15);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
  
// TEST
int num_junctions_16 = 10;
int num_dead_ends_16 = 11;
std::vector<std::pair<int, int>> roads_16 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_16, num_dead_ends_16, roads_16);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_17 = 10;
int num_dead_ends_17 = -8;
std::vector<std::pair<int, int>> roads_17 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_17, num_dead_ends_17, roads_17);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_18 = 3;
int num_dead_ends_18 = 2;
std::vector<std::pair<int, int>> roads_18 = {{1, 1}, {2, 3}};
try {
    CountRoadClosures(num_junctions_18, num_dead_ends_18, roads_18);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_19 = 10;
int num_dead_ends_19 = 8;
std::vector<std::pair<int, int>> roads_19 = {{0, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_19, num_dead_ends_19, roads_19);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_20 = 10;
int num_dead_ends_20 = 8;
std::vector<std::pair<int, int>> roads_20 = {{1, 2}, {2, 11}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 8}, {8, 9}, {9, 10}};
try {
    CountRoadClosures(num_junctions_20, num_dead_ends_20, roads_20);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_21 = -3;
int num_dead_ends_21 = 2;
std::vector<std::pair<int, int>> roads_21(1e6,{1,2});
try {
    CountRoadClosures(num_junctions_21, num_dead_ends_21, roads_21);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_22 = 5;
int num_dead_ends_22 = -1;
std::vector<std::pair<int, int>> roads_22 = {};
try {
    CountRoadClosures(num_junctions_22, num_dead_ends_22, roads_22);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_23 = 6;
int num_dead_ends_23 = 2;
std::vector<std::pair<int, int>> roads_23 = {{1, -999992}, {2, 3}, {3, 4}, {4, 5}, {5, 6}};
try {
    CountRoadClosures(num_junctions_23, num_dead_ends_23, roads_23);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST
int num_junctions_24 = 4;
int num_dead_ends_24 = 3;
std::vector<std::pair<int, int>> roads_24 = {{1, 999999}, {2, 3}, {3, 4}, {4, 1}, {1, 3}, {2, 4}};
try {
    CountRoadClosures(num_junctions_24, num_dead_ends_24, roads_24);
    assert(false);
} catch (const std::invalid_argument& e) {
    assert(true);
}
// TEST_END
    return 0;
}
