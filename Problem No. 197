/*
Link: https://codeforces.com/problemset/problem/1656/F

Jessie is analyzing a series of graphs to understand their properties better. For each graph, she considers num_elements integers elements[0], elements[1], ..., 
elements[num_elements-1]. For any real number t, she constructs the complete weighted graph on num_elements vertices, denoted as Kn(t), with the weight of the 
edge between vertices i and j equal to wij(t) = elements[i] * elements[j] + t * (elements[i] + elements[j]).

Jessie is interested in the cost function f(t), which is the cost of the minimum spanning tree of Kn(t). She wants to determine whether f(t) is bounded above and,
if so, find the maximum value it attains.

Create a C++ function FindMaxSpanningTreeCost that will return a string denoting the maximum value of f(t) or the string "INF" if f(t) is not bounded above.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

A vector<long long> elements representing the weights associated with each vertex

Input Constraints

The value of num_elements should be in the range [2, 2 * 10^5] inclusive.
The sum of num_elements for all test cases should not exceed 2 * 10^5.
Each value in elements should be in the range [-10^6, 10^6] inclusive.
*/

#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>


std::string FindMaxSpanningTreeCost(std::vector<long long>& elements) {
  
    int num_elements = elements.size();
    if (num_elements < 2 || num_elements > 200000) {
        throw std::invalid_argument("num_elements must be between 2 and 200000 inclusive.");
    }

    for (int i = 0; i < num_elements; ++i) {
        if (elements[i] < -1000000 || elements[i] > 1000000) {
            throw std::invalid_argument("Each element must be between -1000000 and 1000000 inclusive.");
        }
    }
    long long const inf = 2e18;
    std::vector<long long> prefix_sum(num_elements + 1, 0);
    std::sort(elements.begin(), elements.end());
    for (int i = 1; i <= num_elements; ++i) {
        prefix_sum[i] = prefix_sum[i - 1] + elements[i - 1];
    }

    if (elements[0] * (num_elements - 2) + prefix_sum[num_elements] > 0 || elements[num_elements - 1] * (num_elements - 2) + prefix_sum[num_elements] < 0) {
        return "INF";
    }

    long long max_result = -inf;
    for (int i = 1; i <= num_elements; ++i) {
        long long value = -elements[i - 1];
        long long temp_result = (elements[num_elements - 1] + value) * (prefix_sum[i] + i * value) + 
                                (elements[0] + value) * ((prefix_sum[num_elements - 1] - prefix_sum[i]) + (num_elements - 1 - i) * value) - 
                                (num_elements - 1) * value * value;
        max_result = std::max(max_result, temp_result);
    }

    return std::to_string(max_result);
}

#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

int main() {
    
  
   //TEST
    std::vector<long long> elements_1 = {3,-1,-2};
    std::string expected_1 = "-6";
    std::string result_1 = FindMaxSpanningTreeCost(elements_1);
    assert(result_1 == expected_1);
    //TEST_END

    //TEST
    std::vector<long long> elements_2 = {-1000000, 1000000};
    std::string expected_2 = "-1000000000000";
    std::string result_2 = FindMaxSpanningTreeCost(elements_2);
    assert(result_2 == expected_2);
    //TEST_END

    //TEST
    std::vector<long long> elements_3 = {100, 200, 300, 400, 500};
    std::string expected_3 = "INF";
    std::string result_3 = FindMaxSpanningTreeCost(elements_3);
    assert(result_3 == expected_3);
    //TEST_END

    //TEST
    std::vector<long long> elements_4 = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
    std::string expected_4 = "INF";
    std::string result_4 = FindMaxSpanningTreeCost(elements_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    std::vector<long long> elements_5 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    std::string expected_5 = "INF";
    std::string result_5 = FindMaxSpanningTreeCost(elements_5);
    assert(result_5 == expected_5);
    //TEST_END

    //TEST
    std::vector<long long> elements_6 = {-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};
    std::string expected_6 = "INF";
    std::string result_6 = FindMaxSpanningTreeCost(elements_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    std::vector<long long> elements_7 = {123456, 234567, 345678, 456789, 567890};
    std::string expected_7 = "INF";
    std::string result_7 = FindMaxSpanningTreeCost(elements_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    std::vector<long long> elements_8 = {10, -20, 30, -40, 50};
    std::string expected_8 = "-4600";
    std::string result_8 = FindMaxSpanningTreeCost(elements_8);
    assert(result_8 == expected_8);
    //TEST_END

    //TEST
    std::vector<long long> elements_9 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
    std::string expected_9 = "0";
    std::string result_9 = FindMaxSpanningTreeCost(elements_9);
    assert(result_9 == expected_9);
    //TEST_END



    //TEST
    std::vector<long long> elements_10 = {};
    try {
        FindMaxSpanningTreeCost(elements_10);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> elements_11(2 * 100000 + 1, 1);
    try {
        FindMaxSpanningTreeCost(elements_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> elements_12 = {1000001, 2};
    try {
        FindMaxSpanningTreeCost(elements_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> elements_13 = {-1000001, 2};
    try {
        FindMaxSpanningTreeCost(elements_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> elements_14(1e6,1);
    try {
        FindMaxSpanningTreeCost(elements_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> elements_15 = {-1};
    try {
        FindMaxSpanningTreeCost(elements_15);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    return 0;
}

