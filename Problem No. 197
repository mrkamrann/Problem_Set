/*
Link: https://codeforces.com/problemset/problem/1656/F
*/

#include <bits/stdc++.h>
#include <stdexcept>
#include <cassert>


std::string ComputeAnswer(std::vector<long long>& elements) {
  
    int num_elements = elements.size();
    if (num_elements < 2 || num_elements > 200000) {
        throw std::invalid_argument("num_elements must be between 2 and 200000 inclusive.");
    }

    for (int i = 0; i < num_elements; ++i) {
        if (elements[i] < -1000000 || elements[i] > 1000000) {
            throw std::invalid_argument("Each element must be between -1000000 and 1000000 inclusive.");
        }
    }
    long long const inf = 2e18;
    std::vector<long long> prefix_sum(num_elements + 1, 0);
    std::sort(elements.begin(), elements.end());
    for (int i = 1; i <= num_elements; ++i) {
        prefix_sum[i] = prefix_sum[i - 1] + elements[i - 1];
    }

    if (elements[0] * (num_elements - 2) + prefix_sum[num_elements] > 0 || elements[num_elements - 1] * (num_elements - 2) + prefix_sum[num_elements] < 0) {
        return "INF";
    }

    long long max_result = -inf;
    for (int i = 1; i <= num_elements; ++i) {
        long long value = -elements[i - 1];
        long long temp_result = (elements[num_elements - 1] + value) * (prefix_sum[i] + i * value) + 
                                (elements[0] + value) * ((prefix_sum[num_elements - 1] - prefix_sum[i]) + (num_elements - 1 - i) * value) - 
                                (num_elements - 1) * value * value;
        max_result = std::max(max_result, temp_result);
    }

    return std::to_string(max_result);
}

#include <bits/stdc++.h>
#include <stdexcept>
#include <cassert> 

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    long long test_cases;
    std::cin >> test_cases;

    if (test_cases < 1) {
        throw std::invalid_argument("test_cases should be at least 1.");
    }

    for (long long t = 0; t < test_cases; ++t) {
        int num_elements;
        std::cin >> num_elements;

        std::vector<long long> elements(num_elements);
        for (int i = 0; i < num_elements; ++i) {
            std::cin >> elements[i];
        }

        try {
            std::string result = ComputeAnswer(elements);
            std::cout << result << std::endl;
        } catch (const std::invalid_argument& e) {
            std::cerr << "Invalid input: " << e.what() << std::endl;
            return 1;
        }
    }

    return 0;
}

