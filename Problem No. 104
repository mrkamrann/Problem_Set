/*
Link : https://codeforces.com/contest/60/problem/D

Julie decided to help Pasha and Akim be friends again. She had a cunning plan — to destroy all the laughy mushrooms. She knows that the laughy mushrooms 
can easily burst when they laugh. Mushrooms grow on the lawns. There are mushroom_counts[i] mushrooms on ith lawn.

Julie knows that the lawns where the mushrooms grow have a unique ability. A lawn (say, i) can transfer laugh to another lawn (say, j) if there exists an 
integer (say, b) such that some permutation of numbers mushroom_counts[i], mushroom_counts[j], and b forms a beautiful triple (i ≠ j). A beautiful triple is 
such three pairwise coprime numbers x, y, z, which satisfy the following condition: x^2 + y^2 = z^2.

Julie wants to know on which minimal number of lawns she should laugh for all the laughy mushrooms to burst.

Create a C++ function MinimumLawnsToLaugh that will return an integer denoting the minimal number of lawns Julie should laugh on.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

vector<int> denoting mushroom_counts

Input Constraints:

The length of mushroom_counts should be in the range [1, 10^6] inclusive.
Each value in mushroom_counts should be in the range [1, 10^6] inclusive 
All values in mushroom_counts are distinct.

*/

#include <algorithm>
#include <cstdio>
#include <cmath>
#include <vector>
#include <numeric>
#include <iostream>
#include <cstring>
#include <cstdlib>
#include <unordered_set>
#include <stdexcept>
#include <cassert>


    int FindRoot(int element, std::vector<int>& parent) {
        return parent[element] == element ? element : (parent[element] = FindRoot(parent[element], parent));
    }

    int ProcessNumbers(int count, std::vector<int>& arr) {
        std::vector<int> parent(count + 1);
        std::iota(parent.begin(), parent.end(), 0);

        int limit = int(std::sqrt(1000010 - 1));
        for (int i = 1; i <= limit; ++i) {
            for (int j = i + 1; j <= 1000010 / 2 / i; ++j) {
                int triplet[3] = {2 * i * j, j * j - i * i, j * j + i * i};
                if (j > limit && triplet[1] > 1000010) break;
                if (std::__gcd(triplet[0], triplet[1]) > 1) continue;
                for (int k = 0; k < 3; ++k) {
                    if (triplet[k] < 1000010 && arr[triplet[k]]) {
                        for (int u = k + 1; u < 3; ++u) {
                            if (triplet[u] < 1000010 && arr[triplet[u]]) {
                                int val_1 = arr[triplet[k]], val_2 = arr[triplet[u]];
                                if (FindRoot(val_1, parent) != FindRoot(val_2, parent)) {
                                    parent[FindRoot(val_1, parent)] = FindRoot(val_2, parent);
                                    count--;
                                }
                            }
                        }
                    }
                }
            }
        }
        return count;
    }

    int MinimumLawnsToLaugh(std::vector<int>& mushroom_counts) {
       
         
        if (mushroom_counts.size() < 1 || mushroom_counts.size() > 1000000) {
            throw std::invalid_argument("Invalid number of lawns");
        }
      
        std::unordered_set<int> seen;
        
        for (int &val : mushroom_counts) {
          
            if (val < 1 || val > 1000000) {
                throw std::invalid_argument("Invalid number of mushrooms on a lawn");
            }
          
            if (seen.count(val)) {
                throw std::invalid_argument("Mushroom counts must be unique");
            }
            seen.insert(val);
        }
      
        std::vector<int> vec(1000010, 0);

        for (int index = 0; index < mushroom_counts.size(); ++index) {
            vec[mushroom_counts[index]] = index + 1;
        }

        int lawn_count = mushroom_counts.size();
        return ProcessNumbers(lawn_count, vec);
    }


int main() {

  //TEST

std::vector<int> mushroom_counts_1 = {1};
int expected_1 = 1;
int result_1 = MinimumLawnsToLaugh(mushroom_counts_1);
assert(result_1 == expected_1);
//TEST_END

//TEST

std::vector<int> mushroom_counts_2 = {100, 200, 300, 400, 500};
int expected_2 = 5;
int result_2 = MinimumLawnsToLaugh(mushroom_counts_2);
assert(result_2 == expected_2);
//TEST_END

//TEST

std::vector<int> mushroom_counts_3 = {1959, 999, 994, 7};
int expected_3 = 4;
int result_3 = MinimumLawnsToLaugh(mushroom_counts_3);
assert(result_3 == expected_3);
//TEST_END

//TEST

std::vector<int> mushroom_counts_4 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int expected_4 = 8;
int result_4 = MinimumLawnsToLaugh(mushroom_counts_4);
assert(result_4 == expected_4);
//TEST_END

//TEST

std::vector<int> mushroom_counts_5 = {123, 2347, 3456, 4567, 567};
int expected_5 = 5;
int result_5 = MinimumLawnsToLaugh(mushroom_counts_5);
assert(result_5 == expected_5);
//TEST_END

//TEST

std::vector<int> mushroom_counts_6 = {10, 200, 300, 4000, 500, 480};
int expected_6 = 6;
int result_6 = MinimumLawnsToLaugh(mushroom_counts_6);
assert(result_6 == expected_6);
//TEST_END

//TEST

std::vector<int> mushroom_counts_7 = {1, 100000};
int expected_7 = 2;
int result_7 = MinimumLawnsToLaugh(mushroom_counts_7);
assert(result_7 == expected_7);
//TEST_END

//TEST

std::vector<int> mushroom_counts_8 = {500, 1000, 1500, 2000};
int expected_8 = 4;
int result_8 = MinimumLawnsToLaugh(mushroom_counts_8);
assert(result_8 == expected_8);
//TEST_END

//TEST

std::vector<int> mushroom_counts_9 = {876, 987, 1098, 127, 138, 149};
int expected_9 = 6;
int result_9 = MinimumLawnsToLaugh(mushroom_counts_9);
assert(result_9 == expected_9);
//TEST_END

//TEST

std::vector<int> mushroom_counts_10 = {};
try {
    MinimumLawnsToLaugh(mushroom_counts_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> mushroom_counts_11 = {1000001};
try {
    MinimumLawnsToLaugh(mushroom_counts_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> mushroom_counts_12 = {1, 2, 3, 1};
try {
    MinimumLawnsToLaugh(mushroom_counts_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST

std::vector<int> mushroom_counts_13 = {-999, 2, 3, 4};
try {
    MinimumLawnsToLaugh(mushroom_counts_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST

std::vector<int> mushroom_counts_14(1000001,1);
try {
    MinimumLawnsToLaugh(mushroom_counts_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
 

    return 0;
}

