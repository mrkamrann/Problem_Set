/*

Link: https://leetcode.com/problems/minimum-moves-to-pick-k-ones/

Julie is given a binary vector nums of length len_n, a positive integer len_k, and a non-negative integer max_changes.

Julie plays a game where the goal is to pick up len_k ones from nums using the minimum number of moves. When the game starts, Julie picks any index julie_index
in the range [0, len_n - 1] and stands there. If nums[julie_index] == 1, Julie picks up the one and nums[julie_index] becomes 0 (this does not count as a move). 
After this, Julie can make any number of moves (including zero) where in each move Julie must perform exactly one of the following actions:

Select any index j != julie_index such that nums[j] == 0 and set nums[j] = 1. This action can be performed at most max_changes times.

Select any two adjacent indices x and y (|x - y| == 1) such that nums[x] == 1 and nums[y] == 0, then swap their values (set nums[y] = 1 and nums[x] = 0).

If y == julie_index, Julie picks up the one after this move and nums[y] becomes 0.

Return the minimum number of moves required by Julie to pick exactly len_k ones.

Create a C++ Function MinimumMoves that will return a long long denoting the minimum number of moves required by Julie to pick exactly len_k ones.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

A vector<int> denoting nums
An integer denoting len_k
An integer denoting max_changes

Input Constraints

The length of nums (len_n) should be in the range [2, 100,000] inclusive.
Each value of nums should be either 0 or 1.
The value of len_k should be in the range [1, 100,000] inclusive.
The value of max_changes should be in the range [0, 100,000] inclusive.
The sum of nums should satisfy the condition: max_changes + sum(nums) >= len_k.

*/


#include <vector>
#include <map>
#include <algorithm>
#include <stdexcept>
#include <climits>
#include <numeric>
#include <iostream>


    std::vector<long long> FindMinimumMovesForXNearest(const std::vector<int>& nums, int nearest_x) {
        int left_index = 0, right_index = 0;
        std::vector<long long> nearest_distances(nums.size(), 0);

        for (int index = 0; index < nums.size(); ++index) {
            if (nums[index] == 1) {
                left_index = index;
                break;
            }
        }

        long long move_sum = 0;
        int count_ones = 0;
        for (int index = left_index; index < nums.size(); ++index) {
            if (nums[index] == 1) {
                move_sum += index;
                count_ones++;
            }
            if (count_ones == nearest_x) {
                right_index = index;
                break;
            }
        }

        long long count_pass_ones = 0;
        int next_right = right_index + 1;

        while (next_right < nums.size()) {
            if (nums[next_right] == 1) {
                break;
            }
            next_right++;
        }

        nearest_distances[0] = move_sum;
        count_pass_ones = (nums[0] == 1) ? 1 : 0;

        for (int index = 1; index < nums.size(); ++index) {
            nearest_distances[index] = nearest_distances[index - 1] + count_pass_ones - (nearest_x - count_pass_ones);

            if (next_right < nums.size() && std::abs(index - left_index) > std::abs(index - next_right)) {
                int next_left = left_index + 1;
                while (next_left < nums.size()) {
                    if (nums[next_left] == 1) {
                        break;
                    }
                    next_left++;
                }

                nearest_distances[index] -= std::abs(index - left_index);
                nearest_distances[index] += std::abs(index - next_right);

                if (left_index < index && next_right > index) {
                    count_pass_ones--;
                }

                next_right++;
                while (next_right < nums.size()) {
                    if (nums[next_right] == 1) {
                        break;
                    }
                    next_right++;
                }
                left_index = next_left;
            }

            if (nums[index] == 1) {
                count_pass_ones++;
            }
        }

        return nearest_distances;
    }

    long long MinimumMoves(std::vector<int>& nums, int len_k, int max_changes) {
        int len_n = nums.size();
        
        if (len_k < 1 || len_k > 100000 || max_changes < 0 || max_changes > 100000 || 
            len_n < 2 || len_n > 100000 || 
            std::any_of(nums.begin(), nums.end(), [](int num) { return num != 0 && num != 1; }) ||
            max_changes + std::accumulate(nums.begin(), nums.end(), 0) < len_k) {
            throw std::invalid_argument("Input constraints not satisfied.");
        }

        long long result = LLONG_MAX;
        std::map<int, std::vector<long long>> minimum_steps_map;
        std::vector<std::vector<long long>> nearest_distances(4);

        if (len_k > max_changes) {
            for (int index = 0; index <= 3; ++index) {
                nearest_distances[index] = FindMinimumMovesForXNearest(nums, len_k - max_changes + index);
            }
        }

        int total_ones = std::count(nums.begin(), nums.end(), 1);

        for (int index = 0; index < nums.size(); ++index) {
            long long current_steps = 0;
            if (len_k > max_changes) {
                int ones_in_range = 0;
                if (index > 0 && nums[index - 1] == 1) ones_in_range++;
                if (nums[index] == 1) ones_in_range++;
                if (index < nums.size() - 1 && nums[index + 1] == 1) ones_in_range++;
                int used_nearest = std::min(max_changes, ones_in_range);
                long long minimum_steps = LLONG_MAX;

                for (long long un = 0; un <= used_nearest; ++un) {
                    if (len_k - max_changes + un > total_ones) continue;
                    long long steps = 0;
                    steps += (max_changes - un) * 2;
                    steps += nearest_distances[un][index];
                    minimum_steps = std::min(minimum_steps, steps);
                }
                current_steps = minimum_steps;

            } else {
                int needed_ones = len_k;
                if (nums[index] == 1) {
                    needed_ones--;
                }
                if (needed_ones == 0) return 0;
                if (index > 0 && nums[index - 1] == 1) {
                    needed_ones--;
                    current_steps++;
                }
                if (needed_ones == 0) {
                    result = std::min(result, current_steps);
                    continue;
                }
                if (index < nums.size() - 1 && nums[index + 1] == 1) {
                    needed_ones--;
                    current_steps++;
                }
                if (needed_ones == 0) {
                    result = std::min(result, current_steps);
                    continue;
                }
                current_steps += needed_ones * 2;
            }

            result = std::min(result, current_steps);
        }

        return result;
    }


int main() {
  // TEST 
std::vector<int> nums_1 = {0, 1, 0, 1, 1};
int len_k_1 = 3;
int max_changes_1 = 1;
long long expected_1 = 3;
long long result_1 = MinimumMoves(nums_1, len_k_1, max_changes_1);
assert(result_1 == expected_1);
// TEST_END

// TEST 
std::vector<int> nums_2 = {1, 1, 1, 1, 1};
int len_k_2 = 4;
int max_changes_2 = 0;
long long expected_2 = 4;
long long result_2 = MinimumMoves(nums_2, len_k_2, max_changes_2);
assert(result_2 == expected_2);
// TEST_END

// TEST 
std::vector<int> nums_3 = {0, 0, 0, 0, 0};
int len_k_3 = 5;
int max_changes_3 = 5;
long long expected_3 = 10;
long long result_3 = MinimumMoves(nums_3, len_k_3, max_changes_3);
assert(result_3 == expected_3);
// TEST_END

// TEST 
std::vector<int> nums_4 = {1, 0, 1, 0, 0};
int len_k_4 = 3;
int max_changes_4 = 2;
long long expected_4 = 4;
long long result_4 = MinimumMoves(nums_4, len_k_4, max_changes_4);
assert(result_4 == expected_4);
// TEST_END

// TEST 
std::vector<int> nums_5 = {0, 1, 1, 0, 1};
int len_k_5 = 4;
int max_changes_5 = 2;
long long expected_5 = 5;
long long result_5 = MinimumMoves(nums_5, len_k_5, max_changes_5);
assert(result_5 == expected_5);
// TEST_END

// TEST 
std::vector<int> nums_6 = {0, 0, 0, 1, 0, 1, 0, 0};
int len_k_6 = 4;
int max_changes_6 = 3;
long long expected_6 = 6;
long long result_6 = MinimumMoves(nums_6, len_k_6, max_changes_6);
assert(result_6 == expected_6);
// TEST_END

// TEST 
std::vector<int> nums_7 = {1, 0, 1, 0, 1, 0, 1, 0};
int len_k_7 = 5;
int max_changes_7 = 2;
long long expected_7 = 8;
long long result_7 = MinimumMoves(nums_7, len_k_7, max_changes_7);
assert(result_7 == expected_7);
// TEST_END

// TEST 
std::vector<int> nums_8 = {1, 0, 0, 0, 0, 0, 1, 1};
int len_k_8 = 6;
int max_changes_8 = 3;
long long expected_8 = 13;
long long result_8 = MinimumMoves(nums_8, len_k_8, max_changes_8);
assert(result_8 == expected_8);
// TEST_END

// TEST
std::vector<int> nums_9 = {0, 1, 1, 0, 0, 0, 1, 0};
int len_k_9 = 5;
int max_changes_9 = 4;
long long expected_9 = 7;
long long result_9 = MinimumMoves(nums_9, len_k_9, max_changes_9);
assert(result_9 == expected_9);
// TEST_END

// TEST 
std::vector<int> nums_10 = {1, 0, 0, 0, 1};
int len_k_10 = -2;
int max_changes_10 = 2;
try {
    MinimumMoves(nums_10, len_k_10, max_changes_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_11 = {1, 0, 0, 0, 1};
int len_k_11 = 2;
int max_changes_11 = -2;
try {
    MinimumMoves(nums_11, len_k_11, max_changes_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_12 = {1, 0, 0, 0, 1};
int len_k_12 = 2;
int max_changes_12 = 2;
std::vector<int> nums_invalid_12 = {1, 2, 0, 0, 1};
try {
    MinimumMoves(nums_invalid_12, len_k_12, max_changes_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_13 = {1, 1, 1, 1, 1};
int len_k_13 = 6;
int max_changes_13 = 0;
try {
    MinimumMoves(nums_13, len_k_13, max_changes_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_14 = {1, 1, 1, 1, 1};
int len_k_14 = -999;
int max_changes_14 = 0;
try {
    MinimumMoves(nums_14, len_k_14, max_changes_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_15 = {0, 0, 0, 0, 0};
int len_k_15 = 50;
int max_changes_15 = 2;
try {
    MinimumMoves(nums_15, len_k_15, max_changes_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_16 = {0, 0, 1, 1, 1};
int len_k_16 = 5;
int max_changes_16 = 0;
try {
    MinimumMoves(nums_16, len_k_16, max_changes_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_17 = {1, 0, 1, 0, 1};
int len_k_17 = 4;
int max_changes_17 = -9999;
try {
    MinimumMoves(nums_17, len_k_17, max_changes_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_18 = {1, 0, 1, 0, 1};
int len_k_18 = -9999;
int max_changes_18 = 2;
try {
    MinimumMoves(nums_18, len_k_18, max_changes_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_19 = {1, 0, 1, 0, 1};
int len_k_19 = 2;
int max_changes_19 = -1;
try {
    MinimumMoves(nums_19, len_k_19, max_changes_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

// TEST 
std::vector<int> nums_20 = {1, 0, 1, 0, 1};
int len_k_20 = -2;
int max_changes_20 = -1;
try {
    MinimumMoves(nums_20, len_k_20, max_changes_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
// TEST_END

    return 0;
}
