/*

Link: https://leetcode.com/problems/allocate-mailboxes/

Jimmy was a young programmer, always eager to solve new challenges. One day, he encountered an intriguing problem involving houses and mailboxes on a street.

Jimmy was given a vector houses where houses[i] is the location of the ith house along a street, and an integer counter, representing the number of mailboxes to 
be allocated on the street.

His task was to find the minimum total distance between each house and its nearest mailbox.

Jimmy knew that the test cases were designed so that the answer would fit in a 32-bit integer. He was ready to tackle this problem and find the optimal placement
of the mailboxes.

Create a C++ Function MinDistance that will return an integer denoting the minimum total distance between each house and its nearest mailbox.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type:

A vector<int> denoting houses.
An integer denoting counter.


Input Constraints:

The value of counter should be between 1 and the length of houses inclusive.
The length of houses should be between 1 and 100 inclusive.
Each element in houses should be between 1 and 10^4 inclusive.
All the integers in houses are unique.

*/



#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>
#include <climits>
#include <cmath>
#include <set>


    int GetCost(std::vector<int>& houses, int start, int end) {
        int length = end - start + 1;
        int median = 0;
        if (length % 2 == 0) {
            int index = start + (end - start) / 2;
            median = (houses[index] + houses[index + 1]) / 2;
        } else {
            int index = start + (end - start) / 2;
            median = houses[index];
        }
        int costing = 0;
        for (int i = start; i <= end; ++i) {
            costing += std::abs(houses[i] - median);
        }
        return costing;
    }

    int Memoize(std::vector<int>& houses, int start, int counter, std::vector<std::vector<int>>& dp_arr) {
        if (counter == 0 || start >= houses.size()) {
            return 0;
        }

        if (dp_arr[start][counter] != -1) {
            return dp_arr[start][counter];
        }

        int answer = INT_MAX, temp = 0;

        for (int cnt = start; cnt < houses.size(); cnt++) {
            if (counter != 1 || cnt == houses.size() - 1) {
                temp = GetCost(houses, start, cnt);
                answer = std::min(answer, temp + Memoize(houses, cnt + 1, counter - 1, dp_arr));
            }
        }
        return dp_arr[start][counter] = answer;
    }

    int MinDistance(std::vector<int>& houses, int counter) {
        if (houses.size() < 1 || houses.size() > 100) {
            throw std::invalid_argument("The length of houses should be between 1 and 100 inclusive.");
        }
        if (counter < 1 || counter > houses.size()) {
            throw std::invalid_argument("The value of counter should be between 1 and the length of houses inclusive.");
        }
        std::set<int>vis;
        for (int house : houses) {
            if (house < 1 || house > 10000) {
                throw std::invalid_argument("Each element in houses should be between 1 and 10^4 inclusive.");
            }
            if(vis.count(house))
            {
              throw std::invalid_argument("Each element in houses should be unique");
            }
            vis.insert(house);
        }

        std::sort(houses.begin(), houses.end());

        if (counter == houses.size()) {
            return 0;
        }

        int len = houses.size();

        std::vector<std::vector<int>> dp_arr(len + 1, std::vector<int>(counter + 1, -1));

        return Memoize(houses, 0, counter, dp_arr);
    }




int main(){
  
//TEST
  
std::vector<int> houses_1 = {1, 2, 3, 4, 5};
int counter_1 = 2;
int expected_1 = 3; 
int result_1 = MinDistance(houses_1, counter_1);
assert(result_1 == expected_1);

//TEST_END

//TEST

std::vector<int> houses_2 = {1, 3, 6, 10};
int counter_2 = 3;
int expected_2 = 2;
int result_2 = MinDistance(houses_2, counter_2);
assert(result_2 == expected_2);

//TEST_END

//TEST

std::vector<int> houses_3 = {1, 5, 9, 13};
int counter_3 = 4;
int expected_3 = 0;
int result_3 = MinDistance(houses_3, counter_3);
assert(result_3 == expected_3);

//TEST_END

//TEST

std::vector<int> houses_4 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
int counter_4 = 5;
int expected_4 = 50;
int result_4 = MinDistance(houses_4, counter_4);
assert(result_4 == expected_4);

//TEST_END

//TEST

std::vector<int> houses_5 = {5};
int counter_5 = 1;
int expected_5 = 0;
int result_5 = MinDistance(houses_5, counter_5);
assert(result_5 == expected_5);

//TEST_END

//TEST

std::vector<int> houses_6 = {1, 10000};
int counter_6 = 1;
int expected_6 = 9999;
int result_6 = MinDistance(houses_6, counter_6);
assert(result_6 == expected_6);

//TEST_END

//TEST

std::vector<int> houses_7 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
int counter_7 = 5;
int expected_7 = 5;
int result_7 = MinDistance(houses_7, counter_7);
assert(result_7 == expected_7);

//TEST_END

//TEST

std::vector<int> houses_8 = {1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
int counter_8 = 2;
int expected_8 = 149;
int result_8 = MinDistance(houses_8, counter_8);
assert(result_8 == expected_8);

//TEST_END

//TEST

std::vector<int> houses_9 = {1, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
int counter_9 = 3;
int expected_9 = 999;
int result_9 = MinDistance(houses_9, counter_9);
assert(result_9 == expected_9);

//TEST_END

//TEST
std::vector<int> houses_10 = {1, 2, 3, 4, 5};
int counter_10 = 0;
try {
    MinDistance(houses_10, counter_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> houses_11 = {1, 2, 3};
int counter_11 = 4;
try {
    MinDistance(houses_11, counter_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> houses_12 = {};
int counter_12 = 1;
try {
    MinDistance(houses_12, counter_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> houses_13 = {1, -5, 3};
int counter_13 = 2;
try {
    MinDistance(houses_13, counter_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> houses_14 = {1, 10001, 3};
int counter_14 = 2;
try {
    MinDistance(houses_14, counter_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> houses_15(10000,2);
int counter_15 = 2;
try {
    MinDistance(houses_15, counter_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

  return 0;
}
