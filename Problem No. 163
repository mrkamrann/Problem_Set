/*
Link: https://codeforces.com/contest/736/problem/D

Ashley is concerned that people are forgetting she is the Great Combinator. To demonstrate her combinatorial prowess, she studies permutations of length node_count.
She has a list of edge_count valid pairs, where pair edges[i][0] and edges[i][1] means that she is allowed to place integer edges[i][1] at position edges[i][0].

She knows that the number of permutations that use only valid pairs is odd. For each pair, she wants to determine if the number of valid permutations will remain 
odd if she removes this pair (and only this pair) from the list.

Return a true or false for each valid pair. Return a vector<bool> The i-th line should contain "true" if after Ashley removes the i-th pair (and only it), 
the remaining number of valid permutations is odd. Otherwise, return "false".

Create a C++ Function FindOddPermutations that will return a vector of boolean, each boolean being either "true" or "false" for each pair.

Use appropriate Error Handling using the stdexcept library for invalid test cases.

Input Type

A vector<vector<int>> denoting edges
An integer node_count


Input Constraints

The length of edges should be at least 1 and at most 500000 inclusive.
Each value of edges[i][0] should be in the range [1, node_count] inclusive.
Each value of edges[i][1] should be in the range [1, node_count] inclusive.
The values for node_count and edge_count should be in the range [1, 2000] inclusive.

*/


#include <cstdio>
#include <bitset>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

std::vector<bool> FindOddPermutations(int node_count, std::vector<std::vector<int>>& edges) {
    
  if (node_count < 1 || node_count > 2000) {
        throw std::invalid_argument("Node count must be between 1 and 2000.");
    }
   int edge_count = edges.size();

    if (edge_count < node_count || edge_count > std::min(node_count * node_count, 500000)) {
        throw std::invalid_argument("Edge count must be between node_count and min(node_count^2, 500000).");
    }
    for (const std::vector<int>& edge : edges) {
        if (edge.size() != 2 || edge[0] < 1 || edge[0] > node_count || edge[1] < 1 || edge[1] > node_count) {
            throw std::invalid_argument("Edges must be valid pairs within the node count.");
        }
    }
  
  
   
std::set<std::pair<int, int>> unique_edges;

for (const std::vector<int>& edge : edges) {
    unique_edges.insert({edge[0], edge[1]});
}
  
if (unique_edges.size() != edges.size()) {
    throw std::invalid_argument("Duplicate edges are not allowed.");
}

    std::vector<std::bitset<4005>> bitset_matrix(node_count + 1);

    for (std::vector<int>& edge : edges) {
        edge[0]--; 
        edge[1]--; 
    }

    for (const std::vector<int>& edge : edges) {
        bitset_matrix[edge[0] + 1][edge[1] + 1] = 1;
    }
    for (int index = 1; index <= node_count; index++) {
        bitset_matrix[index][index + node_count] = 1;
    }

    for (int index = 1; index <= node_count; index++) {
        int swap_index = 0;
        for (int x_index = index; x_index <= node_count; x_index++) {
            if (bitset_matrix[x_index][index]) {
                swap_index = x_index;
                break;
            }
        }
        std::swap(bitset_matrix[index], bitset_matrix[swap_index]);
        for (int x_index = 1; x_index <= node_count; x_index++) {
            if (x_index != index && bitset_matrix[x_index][index]) {
                bitset_matrix[x_index] = bitset_matrix[x_index] ^ bitset_matrix[index];
            }
        }
    }

    std::vector<bool> results;
    for (const std::vector<int>& edge : edges) {
        if (bitset_matrix[edge[1] + 1][edge[0] + 1 + node_count]) {
            results.push_back(0);
        } else {
            results.push_back(1);
        }
    }

    return results;
}

#include <cstdio>
#include <bitset>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

int main() {
   
  //TEST
std::vector<std::vector<int>> edges_1 = {{1, 1}};
int node_count_1 = 1;
std::vector<bool> expected_1 = {false};
std::vector<bool> result_1 = FindOddPermutations(node_count_1, edges_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_2 = {{1, 2}, {2, 3}, {3, 1}};
int node_count_2 = 3;
std::vector<bool> expected_2 = {false, false,false};
std::vector<bool> result_2 = FindOddPermutations(node_count_2, edges_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_3 = {{1, 2}, {2, 3}, {3, 4}, {4, 1}};
int node_count_3 = 4;
std::vector<bool> expected_3 = {false, false,false,false};
std::vector<bool> result_3 = FindOddPermutations(node_count_3, edges_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_4 = {{1, 2}, {2, 3}, {3, 1}, {1, 4}};
int node_count_4 = 4;
std::vector<bool> expected_4 = {false, false,false,true};
std::vector<bool> result_4 = FindOddPermutations(node_count_4, edges_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_5 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 1}};
int node_count_5 = 5;
std::vector<bool> expected_5 = {false, false,false,false, false};
std::vector<bool> result_5 = FindOddPermutations(node_count_5, edges_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_6 = {{1, 2}, {1, 3}, {1, 4}, {2, 4}};
int node_count_6 = 4;
std::vector<bool> expected_6 = {false, true,true,true};
std::vector<bool> result_6 = FindOddPermutations(node_count_6, edges_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_7 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 1}};
int node_count_7 = 6;
std::vector<bool> expected_7 = {false, false,false, false,false, false};
std::vector<bool> result_7 = FindOddPermutations(node_count_7, edges_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_8 = {{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {7, 1}};
int node_count_8 = 7;
std::vector<bool> expected_8 = {false, false,false, false,false, false,false,};
std::vector<bool> result_8 = FindOddPermutations(node_count_8, edges_8);
assert(result_8 == expected_8);
//TEST_END
  
//TEST
std::vector<std::vector<int>> edges_9 = {{7, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 6}, {6, 7}, {3,1}};
int node_count_9 = 7;
std::vector<bool> expected_9 = {false, false, true, false, false,false, false};
std::vector<bool> result_9 = FindOddPermutations(node_count_9, edges_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<std::vector<int>> edges_10 = {{1, 2}, {2, 3}, {3, 4}};
int node_count_10 = -9999;
try {
    FindOddPermutations(node_count_10, edges_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> edges_11 = {{1, 2}, {2, 3}, {3, 4}};
int node_count_11 = 2001;
try {
    FindOddPermutations(node_count_11, edges_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> edges_12 = {{1, 4}, {2, 3}, {3, 4}};
int node_count_12 = 3;
try {
    FindOddPermutations(node_count_12, edges_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> edges_13 = {{1, 2}, {2, 3}};
int node_count_13 = 3;
try {
    FindOddPermutations(node_count_13, edges_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> edges_14 = {{1, 2, 1}, {2, 3}, {3, 4}};
int node_count_14 = 3;
try {
    FindOddPermutations(node_count_14, edges_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<std::vector<int>> edges_15 = {{1, 2}, {2, -3}, {3, 4}};
int node_count_15 = 3;
try {
    FindOddPermutations(node_count_15, edges_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
    return 0;
}
