/*
Link: https://codeforces.com/contest/1987/problem/F2

*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <climits>
#include <cassert>

int MaximumRemovals(std::vector<int>& nums) {
    int len = nums.size();

    if (len < 1 || len > 800) {
        throw std::invalid_argument("Invalid length of nums");
    }

    for (int i = 1; i <= len; ++i) {
        if (nums[i-1] < 1 || nums[i-1] > len) {
            throw std::invalid_argument("Invalid value in nums");
        }
    }

    std::vector<std::vector<int>> dp_table(len + 2, std::vector<int>(len + 2, INT_MAX));
    std::vector<int> max_possible_value(len + 1, 0);

    for (int i = 1; i <= len + 1; ++i) {
        dp_table[i][i - 1] = 0;
    }

    for (int length = 2; length <= len; length += 2) {
        for (int left = 1; left + length - 1 <= len; ++left) {
            if (left - nums[left-1] < 0 || (left - nums[left-1]) % 2 != 0) {
                continue;
            }
            int right = left + length - 1;
            for (int mid = left + 1; mid <= right; mid += 2) {
                if (dp_table[left + 1][mid - 1] <= (left - nums[left-1]) / 2) {
                    dp_table[left][right] = std::min(dp_table[left][right], std::max((left - nums[left-1]) / 2, dp_table[mid + 1][right] - (mid - left + 1) / 2));
                }
            }
        }
    }

    for (int i = 1; i <= len; ++i) {
        max_possible_value[i] = max_possible_value[i - 1];
        for (int j = i - 1; j >= 1; j -= 2) {
            if (max_possible_value[j - 1] >= dp_table[j][i]) {
                max_possible_value[i] = std::max(max_possible_value[i], max_possible_value[j - 1] + (i - j + 1) / 2);
            }
        }
    }

    return max_possible_value[len];
}


int main() {
    
// TEST 
std::vector<int> nums_1 = {1,2,4,3};
int expected_1 = 2;
int result_1 = MaximumRemovals(nums_1);
assert(result_1 == expected_1);

//TEST_END
  
// TEST 
std::vector<int> nums_2 = {10,1,2,9,6,4,3,8,5,7,12,9,11};
int expected_2 = 1;
int result_2 = MaximumRemovals(nums_2);
assert(result_2 == expected_2);
  
//TEST_END

// TEST 
std::vector<int> nums_3 = {2, 1};
int expected_3 = 0;
int result_3 = MaximumRemovals(nums_3);
assert(result_3 == expected_3);

//TEST_END
  
// TEST 
std::vector<int> nums_4 = {2, 1, 3, 4, 5, 6, 7, 8};
int expected_4 = 3;
int result_4 = MaximumRemovals(nums_4);
assert(result_4 == expected_4);
  
//TEST_END
  
// TEST 
std::vector<int> nums_5 = {1, 2, 3, 4, 5};
int expected_5 = 2;
int result_5 = MaximumRemovals(nums_5);
assert(result_5 == expected_5);

// TEST 
std::vector<int> nums_6 = {5, 4, 3, 2, 1};
int expected_6 = 1;
int result_6 = MaximumRemovals(nums_6);
assert(result_6 == expected_6);
//TEST_END

// TEST 
std::vector<int> nums_7 = {3, 1, 4, 2, 5, 6, 8, 7};
int expected_7 = 2;
int result_7 = MaximumRemovals(nums_7);
assert(result_7 == expected_7);
//TEST_END
  
// TEST 
std::vector<int> nums_8 = {1, 3, 2, 4};
int expected_8 = 1;
int result_8 = MaximumRemovals(nums_8);
 assert(result_8 == expected_8);
//TEST_END
  
// TEST 
std::vector<int> nums_9 = {4, 3, 2, 1};
int expected_9 = 0;
int result_9 = MaximumRemovals(nums_9);
assert(result_9 == expected_9);
//TEST_END
  
// TEST
std::vector<int> nums_10 = {};
try {
    MaximumRemovals(nums_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<int> nums_11(801, 1);
try {
    MaximumRemovals(nums_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<int> nums_12 = {0, 1, 2, 3};
try {
    MaximumRemovals(nums_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST
std::vector<int> nums_13 = {-9999,3, 5};
try {
    MaximumRemovals(nums_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<int> nums_14 = {-1, 1, 2};
try {
    MaximumRemovals(nums_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST 
std::vector<int> nums_15 = {1, 465468, 2};
try {
    MaximumRemovals(nums_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END   
    return 0;
}
