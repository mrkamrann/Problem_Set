/*
Link : https://leetcode.com/problems/find-the-maximum-length-of-a-good-subsequence-ii/description/

Jimmy has got a new homework today, the topic is subsequence. He is given a vector of integers nums and a non-negative integer counter. A sequence of integers seq is termed good if there are at most counter indices 
i in the range [0, seq.length - 2] such that seq[i] != seq[i + 1].

A subsequence of a vector or sequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements. In simpler terms, 
for an subsequence nums, a subsequence is obtained by selecting elements from nums in such a way that the order of elements is preserved.

Help Jimmy create a C++ function MaximumLength that will return an integer the maximum possible length of a good subsequence of nums.

Use appropriate Error Handling using the stdexcept library for the invalid test case

Input Type:

vector<int> denoting the vector nums
An integer denoting counter

Input Constraints:

1.The length of nums should be at least 1 and at most 5 * 10^3.
2.Each element in nums should be within the range from 1 to 10^9.
3.counter should be within the range from 0 to the minimum of 50 and the length of nums.


*/

#include <vector>
#include <unordered_map>
#include <algorithm>
#include <cassert>
#include <stdexcept>

    struct SegmentTree {
        int size;
        std::vector<int> tree;
        SegmentTree(int len) : size(len), tree(2 * len, 0) {}
        
        void Build() {
            for (int i = size - 1; i > 0; i--) {
                tree[i] = std::max(tree[i << 1], tree[i << 1 | 1]);
            }
        }
        
        void Modify(int position, int value) {
            for (tree[position += size] = value; position > 1; position >>= 1) {
                tree[position >> 1] = std::max(tree[position], tree[position ^ 1]);
            }
        }
        
        int MaxQuery(int left, int right) {
            int result = 0;
            for (left += size, right += size; left < right; left >>= 1, right >>= 1) {
                if (left & 1) {
                    result = std::max(result, tree[left]);
                    left++;
                }
                if (right & 1) {
                    right--;
                    result = std::max(result, tree[right]);  
                } 
            }
            return result;
        }
    };

    struct DpArray {
        int dp_vec[5001][51] = {0};
    };
    
    int MaximumLength(std::vector<int>& nums, int counter) {
        int len = nums.size();
        
        if (len < 1 || len > 5000) {
            throw std::invalid_argument("The length of nums should be at least 1 and at most 5 * 10^3.");
        }

        for (int i = 0; i < len; ++i) {
            if (nums[i] < 1 || nums[i] > 1000000000) {
                throw std::invalid_argument("Each element in nums should be within the range from 1 to 10^9.");
            }
        }

        if (counter < 0 || counter > std::min(50, len)) {
            throw std::invalid_argument("Counter should be within the range from 0 to the minimum of 50 and the length of nums.");
        }

        int max_length = 1;
        std::vector<SegmentTree> seg_tree(counter + 1, SegmentTree(len));
        std::unordered_map<int, int> num_dp;
        DpArray dp_arr;
        
        for (int j = 0; j <= counter; j++) {
            num_dp.clear();  
            for (int i = 0; i < len; i++) {
                dp_arr.dp_vec[i][j] = std::max(dp_arr.dp_vec[i][j], 1 + num_dp[nums[i]]);
                if (j > 0) {
                    dp_arr.dp_vec[i][j] = std::max(dp_arr.dp_vec[i][j], 1 + seg_tree[j - 1].MaxQuery(0, i));
                }
                num_dp[nums[i]] = std::max(num_dp[nums[i]], dp_arr.dp_vec[i][j]);
                seg_tree[j].Modify(i, dp_arr.dp_vec[i][j]);
                max_length = std::max(max_length, dp_arr.dp_vec[i][j]);
            }
        }
        return max_length;
    }


int main(){
  
 //TEST
    std::vector<int> nums_1 = {3,4,1};
    int counter_1 = 3;
    int expected_1 = 3;
    int result_1 = MaximumLength(nums_1, counter_1);
    assert(result_1 == expected_1);
  //TEST_END

     //TEST
    std::vector<int> nums_2 = {1,2,4,3};
    int counter_2 = 2;
    int expected_2 = 3;
    int result_2 = MaximumLength(nums_2, counter_2);
    assert(result_2 == expected_2);
  //TEST_END

     //TEST
    std::vector<int> nums_3 = {1,2,3};
    int counter_3 = 1;
    int expected_3 = 2;
    int result_3 = MaximumLength(nums_3, counter_3);
    assert(result_3 == expected_3);
  //TEST_END

     //TEST
    std::vector<int> nums_4 = {1,66,7,9,63,2,1,45,8,6,99,1223,14};
    int counter_4 = 5;
    int expected_4 = 7;
    int result_4 = MaximumLength(nums_4, counter_4);
    assert(result_4 == expected_4);
  //TEST_END

     //TEST
    std::vector<int> nums_5 = {455,1,2,1800,2,99};
    int counter_5 = 4;
    int expected_5 = 5;
    int result_5 = MaximumLength(nums_5, counter_5);
    assert(result_5 == expected_5);
  //TEST_END

     //TEST
    std::vector<int> nums_6 = {2,8,6,7,2,1,200};
    int counter_6 = 3;
    int expected_6 = 4;
    int result_6 = MaximumLength(nums_6, counter_6);
    assert(result_6 == expected_6);
  //TEST_END

     //TEST
    std::vector<int> nums_7 = {99,88,66,22,11,10,78,8};
    int counter_7 = 6;
    int expected_7 = 7;
    int result_7 = MaximumLength(nums_7, counter_7);
    assert(result_7 == expected_7);
  //TEST_END

    //TEST
    std::vector<int> nums_8 = {1};
    int counter_8 = 1;
    int expected_8 = 1;
    int result_8 = MaximumLength(nums_8, counter_8);
    assert(result_8 == expected_8);
  //TEST_END

     //TEST
    std::vector<int> nums_9 = {};
    int counter_9 = 0;
    try {
        MaximumLength(nums_9, counter_9);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
  //TEST_END

     //TEST
    std::vector<int> nums_10(1e6,1);
    int counter_10 = 2;
    try {
        MaximumLength(nums_10, counter_10);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
  
  //TEST_END

     //TEST
    std::vector<int> nums_11 = {1000000005};
    int counter_11 = 1;
    try {
        MaximumLength(nums_11, counter_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
  
   //TEST_END

     //TEST
    std::vector<int> nums_12 = {-1000000009,0, 1000000006};
    int counter_12 = 2;
    try {
        MaximumLength(nums_12, counter_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }

    //TEST_END
  
       //TEST
    std::vector<int> nums_13 = {1,2,3,4};
    int counter_13 = -5;
    try {
        MaximumLength(nums_13, counter_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }

    //TEST_END
  
       //TEST
    std::vector<int> nums_14 = {1,2,3};
    int counter_14 = 100;
    try {
        MaximumLength(nums_14, counter_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }

    //TEST_END

}
 
