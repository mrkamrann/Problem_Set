/*
Link : https://codeforces.com/contest/493/problem/E

Martin is studying in the last class of school and soon he will take exams. He decided to study polynomials. A polynomial is a function 
P(x) = a_0 + a_1x^1 + ... + a_nx^n. Numbers ai are called coefficients of a polynomial, and the non-negative integer n is called the degree of a polynomial.

Martin has made a bet with his friends that he can solve any problem with polynomials. They suggested him the problem: "Determine how many polynomials P(x) exist
with integer non-negative coefficients such that P(t_val) = a_val, P(P(t_val)) = b_val where a_val and b_val are given positive integers"

Martin does not like losing bets, but he has no idea how to solve this task, so please help him solve the problem.

Create a C++ function CountPolynomials that will return an integer denoting the number of polynomials satisfying the conditions or -1 if the number is infinite. 

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting t_val
An integer denoting a_val
An integer denoting b_val

Input Constraints:

The values of t_val, a_val and b_val should be positive integers between 1 and 10^18 both inclusive.

*/

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int find(ll a, ll b, ll x, ll y) {
    if (!x || !y) return 0;
    ll v = y % b;
    return ((x - v) % a ? 0 : find(a, b, (x - v) / a, (y - v) / b)) + (x == y);
}

int func(ll a, ll b, ll c){
  
   if (a == 1 && b == 1) {
        if (c > 1) {
            return 0;
        } else {
            return -1;
        }
    } 
  
    return find(a, b, b, c); 
}


int main() {
    ll a, b, c;
    scanf("%lld %lld %lld", &a, &b, &c);
    
   cout<<func(a,b,c)<<endl;

    return 0;
}
