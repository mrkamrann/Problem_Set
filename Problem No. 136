/*
Link : https://codeforces.com/contest/493/problem/E

Martin is studying in the last class of school and soon he will take exams. He decided to study polynomials. A polynomial is a function 
P(x) = a_0 + a_1x^1 + ... + a_nx^n. Numbers ai are called coefficients of a polynomial, and the non-negative integer n is called the degree of a polynomial.

Martin has made a bet with his friends that he can solve any problem with polynomials. They suggested him the problem: "Determine how many polynomials P(x) exist
with integer non-negative coefficients such that P(t_val) = a_val, P(P(t_val)) = b_val where a_val and b_val are given positive integers"

Martin does not like losing bets, but he has no idea how to solve this task, so please help him solve the problem.

Create a C++ function CountPolynomials that will return an integer denoting the number of polynomials satisfying the conditions or -1 if the number is infinite. 

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer denoting t_val
An integer denoting a_val
An integer denoting b_val

Input Constraints:

The values of t_val, a_val and b_val should be positive integers between 1 and 10^18 both inclusive.

*/

#include <iostream>
#include <stdexcept>
#include <cassert>

long long Find(long long t_val, long long a_val, long long x_val, long long y_val) {

    if (!x_val || !y_val) {
        return 0;
    }

    long long v_val = y_val % a_val;

    return ((x_val - v_val) % t_val ? 0 : Find(t_val, a_val, (x_val - v_val) / t_val, (y_val - v_val) / a_val)) + (x_val == y_val);
}

long long CountPolynomials(long long t_val, long long a_val, long long b_val) {

    if (t_val <= 0 || a_val <= 0 || b_val <= 0 || t_val > 1000000000000000000LL || a_val > 1000000000000000000LL || b_val > 1000000000000000000LL) {

        throw std::invalid_argument("Input values must be positive integers between 1 and 10^18 inclusive.");
    }
    
    if (t_val == 1 && a_val == 1) {
        if (b_val > 1) {
            return 0;
        } 
        else{
            return -1;
        }
    }
    return Find(t_val, a_val, a_val, b_val);
}

#include <iostream>
#include <stdexcept>
#include <cassert>

int main() {
    

    return 0;
}
