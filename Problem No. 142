/*
Link: https://codeforces.com/contest/1761/problem/F1

Ishan has a vector nums of odd length 2*m+1 (with m ≥ 1). The vector is considered bad if the element nums[m+1] is equal to the median of this vector. 
In other words, the vector is bad if, after sorting it, the element at the m+1-st position remains the same.

Ishan is also given a permutation nums of integers from 1 to len. It is guaranteed that if for some i ≠ j holds nums[i] ≠ -1 and nums[j] ≠ -1, then nums[i] ≠ nums[j]`.
A permutation nums is called anti-median if every subvector of odd length ≥ 3 is not bad.

Ishan knows the values of some elements of the permutation. He needs to find the number of ways to set the unknown values to obtain an anti-median permutation. 
As this number can be very large, he needs to find it modulo 10^9 + 7.

Create a C++ Function FindAntiMedianPermutations that will return an integer denoting the number of ways to set unknown values to obtain an anti-median permutation.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

vector<int> denoting the vector nums.

Input Constraints

The value of len should be in the range [2, 1000] inclusive.
Each value of nums[i] should be in the range [1, len] or equal to -1.
Apart from -1 no number should repeat as nums is a permutation

*/

#include <iostream>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>



bool Check(int x_val, int y_val, const std::vector<int>& nums) {
    return nums[x_val - 1] == -1 || nums[x_val - 1] == y_val;
}

int FindAntiMedianPermutations(const std::vector<int>& nums) {

  int len = nums.size();

    if (len < 2 || len > 1000) {
        throw std::invalid_argument("Invalid length");
    }
    std::set<int> elements;

    for (int val : nums) {

        if(val == -1) continue;

        if (val < -1 || val > len) {
            throw std::invalid_argument("Invalid permutation value");
        }
         if (val < -1 || val > len || !elements.insert(val).second){

            throw std::invalid_argument("nums is not a permutation");
         }
    }

    const int mod = 1e9 + 7;
    std::vector<std::vector<int>> dp_table(len + 1, std::vector<int>(len + 1, 0));
    std::vector<std::vector<bool>> vis(len + 1, std::vector<bool>(len + 1, false));
    std::vector<int> seq(len + 1);
    int count = 0;

    for (int i = 1; i <= len; i += 2) {
        seq[++count] = i;
    }
    for (int i = len; i >= 1; i--) {
        if (i % 2 == 0) seq[++count] = i;
    }

    for (int i = 1; i <= len; i++) {
        int j = i, min_val = seq[j], max_val = seq[j];
        for (int k = 0; k < len; k++) {
            max_val = std::max(max_val, seq[j]);
            min_val = std::min(min_val, seq[j]);
            if (max_val - min_val == k && (min_val == 1 || max_val == len)) {
                vis[i][j] = true;
            }
            j = j % len + 1;
        }
    }

    for (int i = 1; i <= len; i++) {
        if (nums[seq[i] - 1] < 2) dp_table[i][i] = 1;
    }

    for (int l = 1; l < len - 1; l++) {
        for (int i = 1; i <= len; i++) {
            int j = (i + l - 2) % len + 1;
            if (dp_table[i][j]) {
                if (Check(seq[(i + len - 2) % len + 1], l + 1, nums) && (!vis[i][j] || !vis[(i + len - 2) % len + 1][j])) {
                    dp_table[(i + len - 2) % len + 1][j] = (dp_table[(i + len - 2) % len + 1][j] + dp_table[i][j]) % mod;
                }
                if (Check(seq[j % len + 1], l + 1, nums) && (!vis[i][j] || !vis[i][j % len + 1])) {
                    dp_table[i][j % len + 1] = (dp_table[i][j % len + 1] + dp_table[i][j]) % mod;
                }
            }
        }
    }

    int result = 0;
    for (int i = 1; i <= len; i++) {
        if (Check(seq[i], len, nums)) result = (result + dp_table[i % len + 1][(i + len - 2) % len + 1]) % mod;
    }

    return result;
}

#include <iostream>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

int main() {
    
   // TEST
    std::vector<int> nums_1 = {1, 2, 3, 4, 5};
    int expected_1 = 0;
    int result_1 = FindAntiMedianPermutations(nums_1);
    assert(result_1 == expected_1);
    // TEST_END

    // TEST
    std::vector<int> nums_2 = {1,-1,2,4};
    int expected_2 = 1;
    int result_2 = FindAntiMedianPermutations(nums_2);
    assert(result_2 == expected_2);
    // TEST_END

    // TEST
    std::vector<int> nums_3 = {-1, -1, -1, -1, -1, -1};
    int expected_3 = 58;
    int result_3 = FindAntiMedianPermutations(nums_3);
    assert(result_3 == expected_3);
    // TEST_END

    // TEST
    std::vector<int> nums_4 = {2, 4, 6, -1, -1,-1};
    int expected_4 = 0;
    int result_4 = FindAntiMedianPermutations(nums_4);
     assert(result_4 == expected_4);
    // TEST_END

    // TEST
    std::vector<int> nums_5 = {-1, -1, -1, -1, -1};
    int expected_5 = 24;
    int result_5 = FindAntiMedianPermutations(nums_5);
    assert(result_5 == expected_5);
    // TEST_END

    // TEST
    std::vector<int> nums_6 = {-1,1};
    int expected_6 = 1;
    int result_6 = FindAntiMedianPermutations(nums_6);
    assert(result_6 == expected_6);
    // TEST_END

    // TEST
    std::vector<int> nums_7 = {1, -1, 3, -1, 5, -1};
    int expected_7 = 0;
    int result_7 = FindAntiMedianPermutations(nums_7);
    assert(result_7 == expected_7);
    // TEST_END

    // TEST
    std::vector<int> nums_8 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    int expected_8 = 0;
    int result_8 = FindAntiMedianPermutations(nums_8);
    assert(result_8 == expected_8);
    // TEST_END

    // TEST
    std::vector<int> nums_9 = {-1, -1, -1, 4, -1, -1, -1, -1, -1, -1};
    int expected_9 = 120;
    int result_9 = FindAntiMedianPermutations(nums_9);
    assert(result_9 == expected_9);
    // TEST_END

   
    // TEST
    std::vector<int> nums_10 = {};
    try {
        FindAntiMedianPermutations(nums_10);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_11(1001, 1);
    try {
        FindAntiMedianPermutations(nums_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_12 = {1, 2, 3, 4, 1001};
    try {
        FindAntiMedianPermutations(nums_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_13 = {1, 2, 3, 4, -9999};
    try {
        FindAntiMedianPermutations(nums_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    // TEST
    std::vector<int> nums_14 = {1};
    try {
        FindAntiMedianPermutations(nums_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    // TEST_END

    return 0;
}

