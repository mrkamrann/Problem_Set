/*
Link : https://codeforces.com/problemset/problem/196/D

Alice needs to find a string with certain properties. The problem authors were reluctant to waste time thinking of a name for this string, so they called it good. 
A string is good if it doesn't have palindrome substrings longer than or equal to count.

Alice is given a string str, consisting only of lowercase English letters. Find a good string t with length |str|, consisting of lowercase English letters,
which is lexicographically larger than str. Of all such strings, t must be lexicographically minimum.

We will call a non-empty string str[a ... b] = str[a]str[a + 1]... str[b] (1 ≤ a ≤ b ≤ |str|) a substring of string str = str[1]str[2]... str[|str|].

A non-empty string str = str[1]str[2]... str[n] is called a palindrome if for all i from 1 to n the following fulfills: str[i] = str[n - i + 1]. In other words, 
a palindrome reads the same in both directions.

String x = x[1]x[2]... x[|x|] is lexicographically larger than string y = y[1]y[2]... y[|y|], if either |x| > |y| and x[1] = y[1], x[2] = y[2], ... , x[|y|] = y[|y|], 
or there exists such number r (r < |x|, r < |y|), that x[1] = y[1], x[2] = y[2], ... , x[r] = y[r] and x[r + 1] > y[r + 1]. Characters in such strings are 
compared like their ASCII codes.


Return the good string that lexicographically follows str, has the same length, and consists of only lowercase English letters. 
If such a string does not exist, return "Impossible" (without the quotes).

Create a C++ Function FindGoodString that will return a string denoting the lexicographically smallest good string larger than str. If such a string does 
not exist, return "Impossible"

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An Integer denoting count
A String denoting str

Input Constraints:

The length of str should be at least 1 and at most 400,000 inclusive.
The value of count should be in the range [1, |str|] inclusive.
The string str consists only of lowercase English letters.

*/

#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>
#include <cassert>

bool IsValid(int index, int length, const std::vector<long long>& power, const std::vector<long long>& hash_val, const std::vector<long long>& rev_hash) {
    if (++index < length) return true;
    return ((rev_hash[index] - rev_hash[index - length] * power[length]) * power[index - length]) != (hash_val[index] - hash_val[index - length]);
}

bool GenerateString(int depth, int flag, int str_len, int count, const std::string& str, std::vector<char>& result, std::vector<long long>& power, std::vector<long long>& hash_val, std::vector<long long>& rev_hash) {
    if (depth == str_len) {
        return true;
    }
    for (result[depth] = (flag ? str[depth] : 'a'); result[depth] <= 'z'; result[depth]++) {
        hash_val[depth + 1] = hash_val[depth] + result[depth] * power[depth];
        rev_hash[depth + 1] = rev_hash[depth] * 7 + result[depth];
        if (IsValid(depth, count, power, hash_val, rev_hash) && IsValid(depth, count + 1, power, hash_val, rev_hash) && GenerateString(depth + 1, flag && (result[depth] == str[depth]), str_len, count, str, result, power, hash_val, rev_hash))
            return true;
    }
    return false;
}

std::string FindGoodString(int count, const std::string& str) {
  
    if (count <= 0 || count > static_cast<int>(str.length())) {
        throw std::invalid_argument("Count must be a positive integer less than or equal to the length of the string.");
    }
    
    if (str.length() > 400000) {
        throw std::invalid_argument("The length of the string must be no more than 4·10^5 characters.");
    }

    for (char character : str) {
        if (character < 'a' || character > 'z') {
            throw std::invalid_argument("The string must consist of lowercase English letters.");
        }
    }

    int str_len = static_cast<int>(str.length());
    std::vector<char> result(str_len + 1);
    std::vector<long long> power(str_len + 1), hash_val(str_len + 1), rev_hash(str_len + 1);

    std::string mutable_str = str;
    int index = str_len - 1;
    for (; index >= 0 && mutable_str[index] == 'z'; index--) 
        mutable_str[index] = 'a';
    
    if (index < 0) 
        return "Impossible";

    mutable_str[index]++;
    power[0] = 1;
    for (int i = 1; i <= str_len; i++) 
        power[i] =  power[i - 1] * 7;

    if (GenerateString(0, 1, str_len, count, mutable_str, result, power, hash_val, rev_hash))
        return std::string(result.begin(), result.begin() + str_len);
    
    return "Impossible";
}

#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
    
//TEST
int count_1 = 1;
std::string str_1 = "a";
std::string expected_1 = "Impossible";
std::string result_1 = FindGoodString(count_1, str_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int count_2 = 2;
std::string str_2 = "ab";
std::string expected_2 = "ac";
std::string result_2 = FindGoodString(count_2, str_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int count_3 = 1;
std::string str_3 = "zxy";
std::string expected_3 = "Impossible";
std::string result_3 = FindGoodString(count_3, str_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
int count_4 = 4;
std::string str_4 = "abcdefgh";
std::string expected_4 = "abcdefgi";
std::string result_4 = FindGoodString(count_4, str_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int count_5 = 2;
std::string str_5 = "bac";
std::string expected_5 = "bad";
std::string result_5 = FindGoodString(count_5, str_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int count_6 = 5;
std::string str_6 = "zzzzz";
std::string expected_6 = "Impossible";
std::string result_6 = FindGoodString(count_6, str_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int count_7 = 3;
std::string str_7 = "baaa";
std::string expected_7 = "baac";
std::string result_7 = FindGoodString(count_7, str_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int count_8 = 6;
std::string str_8 = "abcdefabcdef";
std::string expected_8 = "abcdefabcdeg";
std::string result_8 = FindGoodString(count_8, str_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int count_9 = 8;
std::string str_9 = "zzzyyyxx";
std::string expected_9 = "zzzyyyxy";
std::string result_9 = FindGoodString(count_9, str_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
int count_10 = 0;
std::string str_10 = "a";
try {
    FindGoodString(count_10, str_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_11 = 1;
std::string str_11 = "";
try {
    FindGoodString(count_11, str_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_12 = 401;
std::string str_12 = "a";
try {
    FindGoodString(count_12, str_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END



//TEST
int count_13 = 1;
std::string str_13 = "";
try {
    FindGoodString(count_13, str_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_14 = 401;
std::string str_14 = "a";
try {
    FindGoodString(count_14, str_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_15 = -1;
std::string str_15 = "a";
try {
    FindGoodString(count_15, str_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_16 = 1;
std::string str_16 = "";
try {
    FindGoodString(count_16, str_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_17 = 400001;
std::string str_17 = "a";
try {
    FindGoodString(count_17, str_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int count_18 = -1;
std::string str_18 = "abcdef";
try {
    FindGoodString(count_18, str_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END


    return 0;
}
