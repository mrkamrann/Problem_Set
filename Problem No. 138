/*
Link : https://codeforces.com/problemset/problem/196/D
*/

#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>
#include <cassert>

bool IsValid(int index, int length, const std::vector<long long>& power, const std::vector<long long>& hash_val, const std::vector<long long>& rev_hash) {
    if (++index < length) return true;
    return ((rev_hash[index] - rev_hash[index - length] * power[length]) * power[index - length]) != (hash_val[index] - hash_val[index - length]);
}

bool GenerateString(int depth, int flag, int str_len, int count, const std::string& str, std::vector<char>& result, std::vector<long long>& power, std::vector<long long>& hash_val, std::vector<long long>& rev_hash) {
    if (depth == str_len) {
        return true;
    }
    for (result[depth] = (flag ? str[depth] : 'a'); result[depth] <= 'z'; result[depth]++) {
        hash_val[depth + 1] = hash_val[depth] + result[depth] * power[depth];
        rev_hash[depth + 1] = rev_hash[depth] * 1000000007 + result[depth];
        if (IsValid(depth, count, power, hash_val, rev_hash) && IsValid(depth, count + 1, power, hash_val, rev_hash) && GenerateString(depth + 1, flag && (result[depth] == str[depth]), str_len, count, str, result, power, hash_val, rev_hash))
            return true;
    }
    return false;
}

std::string Solve(int count, const std::string& str) {
  
    if (count <= 0 || count > static_cast<int>(str.length())) {
        throw std::invalid_argument("Count must be a positive integer less than or equal to the length of the string.");
    }
    
    if (str.length() > 400000) {
        throw std::invalid_argument("The length of the string must be no more than 4Â·10^5 characters.");
    }

    for (char character : str) {
        if (character < 'a' || character > 'z') {
            throw std::invalid_argument("The string must consist of lowercase English letters.");
        }
    }

    int str_len = static_cast<int>(str.length());
    std::vector<char> result(str_len + 1);
    std::vector<long long> power(str_len + 1), hash_val(str_len + 1), rev_hash(str_len + 1);

    std::string mutable_str = str;
    int index = str_len - 1;
    for (; index >= 0 && mutable_str[index] == 'z'; index--) 
        mutable_str[index] = 'a';
    
    if (index < 0) 
        return "Impossible";

    mutable_str[index]++;
    power[0] = 1;
    for (int i = 1; i <= str_len; i++) 
        power[i] = power[i - 1] * 1000000007;

    if (GenerateString(0, 1, str_len, count, mutable_str, result, power, hash_val, rev_hash))
        return std::string(result.begin(), result.begin() + str_len);
    
    return "Impossible";
}

#include <iostream>
#include <string>
#include <vector>
#include <stdexcept>
#include <cassert>

int main() {
    
    return 0;
}
