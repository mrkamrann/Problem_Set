/*
Link : https://codeforces.com/problemset/problem/3/D


Julie is faced with yet another problem on regular bracket sequences.

A bracket sequence is called regular if, by inserting "+" and "1" into it, Julie gets a correct mathematical expression. For example, sequences "(())()", "()", and "(()(()))" are regular, 
while ")(", "(()", and "(()))(" are not. Julie has a sequence of a bracket sequence that consists of characters "(", ")", and "?". Julie has to replace each character "?" with a bracket so that
she gets a regular bracket sequence. She has also given a 2D vector costs denoting where costs[i][0] and costs[i][1] is the cost of replacing the ith '?' with an opening or closing bracket.

For each character "?", the cost of its replacement with "(" and ")" is given. Among all the possible variants, Julie should choose the cheapest.

Create a C++ Function LeastCostSequence that will return an integer denoting the minimum cost.

Use appropriate Error Handling using the stdexcept library for invalid test cases.

Input Type:

A string denoting the sequence
A vector<vector<long long>> denoting costs

Input Constraints:

The length of the sequence should be at least 2 and at most 50,000 inclusive.
The sequence's length should be even.
The sequence consists of the characters '(', ')' and '?'.
Each value of costs[i][0] and costs[i][1] should be in the range [1, 1,000,000] inclusive.
The number of costs should be equal to the number of '?' in the sequence.

*/

#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stdexcept>
#include <cassert>

    long long LeastCostSequence(std::string &sequence, std::vector<std::vector<long long>> &costs) {
       
       if (sequence.size() < 2 || sequence.size() > 50000) {
            throw std::invalid_argument("Invalid input: sequence length should be at least 2 and at most 50,000 inclusive");
        }
        if (sequence.size() % 2 != 0) {
            throw std::invalid_argument("Invalid input: sequence length should be even");
        }
        if (std::any_of(sequence.begin(), sequence.end(), [](char c) { return c != '(' && c != ')' && c != '?'; })) {
            throw std::invalid_argument("Invalid input: sequence should only consist of the characters '(', ')' and '?'");
        }
        if (costs.size() != std::count(sequence.begin(), sequence.end(), '?')) {
            throw std::invalid_argument("Invalid input: number of costs should be equal to the number of '?' in the sequence");
        }
        for (const std::vector<long long> &cost_pair : costs) {
            if (cost_pair[0] < 1 || cost_pair[0] > 1000000 || cost_pair[1] < 1 || cost_pair[1] > 1000000) {
                throw std::invalid_argument("Invalid input: each value of costs[i][0] and costs[i][1] should be in the range [1, 1,000,000] inclusive");
            }
        }

        std::priority_queue<std::pair<int, int>> priority_queue;
        long long total_cost = 0;
        int balance = 0;
        int cost_index = 0;

        for (int i = 0; i < sequence.size() && balance >= 0; ++i) {
            if (sequence[i] == '(') {
                balance++;
            } else if (sequence[i] == ')') {
                balance--;
            } else {
                int opening_cost = costs[cost_index][0];
                int closing_cost = costs[cost_index][1];
                cost_index++;
                balance--;
                total_cost += closing_cost;
                priority_queue.push({closing_cost - opening_cost, i});
            }

            while (balance < 0) {
                if (!priority_queue.empty()) {
                    balance += 2;
                    total_cost -= priority_queue.top().first;
                    priority_queue.pop();
                } else {
                    break;
                }
            }
        }

        if (balance != 0) {
            return -1;
        }
        return total_cost;
    }


int main() {
   
  //TEST
std::string sequence_1 = "(?)?";
std::vector<std::vector<long long>> costs_1 = {{1, 1}, {2,1}};
long long expected_1 = 2;
long long result_1 = LeastCostSequence(sequence_1, costs_1);
assert(result_1 == expected_1);

//TEST_END

//TEST
std::string sequence_2 = "(??)";
std::vector<std::vector<long long>> costs_2 = {{1, 2}, {2, 1}};
long long expected_2 = 2;
long long result_2 = LeastCostSequence(sequence_2, costs_2);
assert(result_2 == expected_2);

//TEST_END

//TEST
std::string sequence_3 = "(???)?";
std::vector<std::vector<long long>> costs_3 = {{1, 2}, {2, 2}, {3, 1}, {4,4}};
long long expected_3 = 8;
long long result_3 = LeastCostSequence(sequence_3, costs_3);
assert(result_3 == expected_3);

//TEST_END

//TEST
std::string sequence_4 = "??(??)";
std::vector<std::vector<long long>> costs_4 = {{1, 1}, {2, 2}, {1, 1}, {2, 1}};
long long expected_4 = 5;
long long result_4 = LeastCostSequence(sequence_4, costs_4);
assert(result_4 == expected_4);

//TEST_END

//TEST
std::string sequence_5 = "??(?)?";
std::vector<std::vector<long long>> costs_5 = {{1, 2}, {2, 3}, {3, 2}, {2, 1}};
long long expected_5 = 6;
long long result_5 = LeastCostSequence(sequence_5, costs_5);
assert(result_5 == expected_5);

//TEST_END

//TEST
std::string sequence_6 = "((??))";
std::vector<std::vector<long long>> costs_6 = {{1, 1}, {2, 2}};
long long expected_6 = 3;
long long result_6 = LeastCostSequence(sequence_6, costs_6);
assert(result_6 == expected_6);

//TEST_END

//TEST
std::string sequence_7 = "(??()??)";
std::vector<std::vector<long long>> costs_7 = {{1, 1}, {2, 2}, {2, 1}, {1, 1}};
long long expected_7 = 5;
long long result_7 = LeastCostSequence(sequence_7, costs_7);
assert(result_7 == expected_7);

//TEST_END

//TEST
std::string sequence_8 = "??(??)??";
std::vector<std::vector<long long>> costs_8 = {{1, 1}, {2, 3}, {2, 2}, {1, 1}, {1, 1}, {3,1}};
long long expected_8 = 8;
long long result_8 = LeastCostSequence(sequence_8, costs_8);
assert(result_8 == expected_8);

//TEST_END

//TEST
std::string sequence_9 = "(??(??))";
std::vector<std::vector<long long>> costs_9 = {{1, 8}, {2, 2}, {2, 99}, {1, 1}};
long long expected_9 = 6;
long long result_9 = LeastCostSequence(sequence_9, costs_9);
assert(result_9 == expected_9);

//TEST_END


//TEST
std::string sequence_10 = "(???)";
std::vector<std::vector<long long>> costs_10 = {{1, 1}, {2, 2}};
try {
    LeastCostSequence(sequence_10, costs_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_11 = "((??)";
std::vector<std::vector<long long>> costs_11 = {{1, 1}, {2, 2}};
try {
    LeastCostSequence(sequence_11, costs_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_12 = "";
std::vector<std::vector<long long>> costs_12 = {{1, 1}, {2, 2}, {1, 1}};
try {
    LeastCostSequence(sequence_12, costs_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_13 = "(??a)";
std::vector<std::vector<long long>> costs_13 = {{-1, 1}, {2, 2}, {1, 1}};
try {
    LeastCostSequence(sequence_13, costs_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_14 = "(???)";
std::vector<std::vector<long long>> costs_14 = {{1, 1}, {2, -2}, {1, 1}};
try {
    LeastCostSequence(sequence_14, costs_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_15 = "(??)";
std::vector<std::vector<long long>> costs_15 = {{1, 1}, {-2000000, -999}};
try {
    LeastCostSequence(sequence_15, costs_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_16 = "(???()";
std::vector<std::vector<long long>> costs_16 = {{1, 1}, {2, 2}, {1, 1000001}};
try {
    LeastCostSequence(sequence_16, costs_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST
std::string sequence_17 = "(???)";
std::vector<std::vector<long long>> costs_17 = {{1, 1}, {2, 2}};
try {
    LeastCostSequence(sequence_17, costs_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
    return 0;
}
