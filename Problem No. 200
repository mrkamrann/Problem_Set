/*
Link: https://codeforces.com/contest/1380/problem/G

Chris is creating a level for a video game. The level consists of num_rooms rooms placed in a circle. The rooms are numbered 1 through num_rooms. 
Each room contains exactly one exit: completing the j-th room allows you to go to the (j+1)-th room (and completing the num_rooms-th room allows you to go to the 1-st room).

Chris is given the description of the multiset of num_rooms chests: the i-th chest has a treasure value treasure_values[i].

Each chest can be of one of two types:

Regular chest — when a player enters a room with this chest, they grab the treasure and proceed to the next room.
Mimic chest — when a player enters a room with this chest, the chest eats them alive, and they lose.
The player starts in a random room with each room having an equal probability of being chosen. The player's earnings are equal to the total value of treasure 
chests collected before they lose.

Chris is allowed to choose the order the chests go into the rooms. For each k from 1 to num_rooms, place the chests into the rooms in such a way that:

Each room contains exactly one chest.
Exactly k chests are mimics.
The expected value of the player's earnings is the minimum possible.

It can be shown that the expected value is in the form of P/Q where P and Q are non-negative integers and Q ≠ 0. Report the values of P * Q^(-1) mod 998244353.

Create a C++ function MinimizeEarnings that will return a vector<long long> denoting the minimum possible expected value of the player's earnings for each 
k from 1 to num_rooms.

Use appropriate error handling using the std::invalid_argument for invalid test cases.

Input Type:

A vector<long long> denoting treasure_values.

Input Constraints:

2 ≤ tresure_values.length(num_rooms) ≤ 3⋅10^5
1 ≤ treasure_values[i] ≤ 10^6

*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>


std::vector<long long> MinimizeEarnings(std::vector<long long>& treasure_values) {
  
    int num_rooms = treasure_values.size();
  
    if (num_rooms < 2 || num_rooms > 300000) {
        throw std::invalid_argument("num_rooms must be between 2 and 300000");
    }
    for (long long value : treasure_values) {
        if (value < 1 || value > 1000000) {
            throw std::invalid_argument("treasure_values must be between 1 and 1000000");
        }
    }
    const int p_modulus = 998244353;
    std::vector<long long> inverse_values(num_rooms + 1);
    inverse_values[1] = 1;
    for (int i = 2; i <= num_rooms; i++) {
        inverse_values[i] = (p_modulus - p_modulus / i) * inverse_values[p_modulus % i] % p_modulus;
    }

    std::sort(treasure_values.begin(), treasure_values.begin() + num_rooms);
    for (int i = 1; i < num_rooms; i++) {
        treasure_values[i] = (treasure_values[i] + treasure_values[i - 1]) % p_modulus;
    }

    long long result = 0;
    std::vector<long long> results;
    for (int i = 1; i <= num_rooms; i++) {
        for (int j = num_rooms - i - 1; j >= 0; j -= i) {
            result = (result + treasure_values[j]) % p_modulus;
        }
        results.push_back(inverse_values[num_rooms] * result % p_modulus);
        result = 0;
    }
    return results;
}

#include <iostream>
#include <vector>
#include <algorithm>
#include <stdexcept>
#include <cassert>

int main() {

  //TEST
    std::vector<long long> treasure_values_1 = {1, 2};
    std::vector<long long> expected_1 = {499122177,0};
    std::vector<long long> result_1 = MinimizeEarnings(treasure_values_1);
    assert(result_1 == expected_1);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_2 = {10, 20, 30};
    std::vector<long long> expected_2 = {332748131,332748121,0};
    std::vector<long long> result_2 = MinimizeEarnings(treasure_values_2);
    assert(result_2 == expected_2);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_3 = {100, 200, 300, 400, 500};
    std::vector<long long> expected_3 = {400,140,60,20,0};
    std::vector<long long> result_3 = MinimizeEarnings(treasure_values_3);
    assert(result_3 == expected_3);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_4 = {999999, 1000000, 999999};
    std::vector<long long> expected_4 = {999999,333333,0};
    std::vector<long long> result_4 = MinimizeEarnings(treasure_values_4);
    assert(result_4 == expected_4);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_5 = {1, 1, 1, 1, 1, 1};
    std::vector<long long> expected_5 = {499122179,1,499122177,332748118,166374059,0};
    std::vector<long long> result_5 = MinimizeEarnings(treasure_values_5);
    assert(result_5 == expected_5);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_6 = {500000, 500000, 500000, 500000};
    std::vector<long long> expected_6 = {750000,250000,125000,0};
    std::vector<long long> result_6 = MinimizeEarnings(treasure_values_6);
    assert(result_6 == expected_6);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_7 = {1000000, 1000000};
    std::vector<long long> expected_7 = {500000,0};
    std::vector<long long> result_7 = MinimizeEarnings(treasure_values_7);
    assert(result_7 == expected_7);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_8 = {1, 1000000};
    std::vector<long long> expected_8 = {499122177,0};
    std::vector<long long> result_8 = MinimizeEarnings(treasure_values_8);
    assert(result_8 == expected_8);
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_9 = {100, 200, 300, 400, 500, 600, 700, 800, 900, 1000};
    std::vector<long long> expected_9 = {1650,700,390,240,150,100,60,30,10,0};
    std::vector<long long> result_9 = MinimizeEarnings(treasure_values_9);
    assert(result_9 == expected_9);
    //TEST_END

  

    //TEST
    std::vector<long long> treasure_values_10 = {1};
    try {
        MinimizeEarnings(treasure_values_10);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_11(3 * 100000 + 1, 1);
    try {
        MinimizeEarnings(treasure_values_11);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_12 = {1000001, 2, 3};
    try {
        MinimizeEarnings(treasure_values_12);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_13 = {1, -2, 3};
    try {
        MinimizeEarnings(treasure_values_13);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_14 = {};
    try {
        MinimizeEarnings(treasure_values_14);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END

    //TEST
    std::vector<long long> treasure_values_15 = {-1, -2, -3, -4, -5};
    try {
        MinimizeEarnings(treasure_values_15);
        assert(false);
    } catch(const std::invalid_argument& e) {
        assert(true);
    }
    //TEST_END
    return 0;
}

