/*
Link: https://codeforces.com/contest/1845/problem/F

There is a pool of length len where num_swimmers plan to swim. People start swimming at the same time (at the time moment 0), but you can assume that they take 
different lanes, so they don't interfere with each other.

Each person swims along the following route: they start at point 0 and swim to point len with constant speed (which is equal to speeds[i] units per second for the 
i-th swimmer). After reaching the point len, the swimmer instantly (in negligible time) turns back and starts swimming to the point 0 with the same constant speed.
After returning to the point 0, the swimmer starts swimming to the point len, and so on.

Let's say that some real moment of time is a meeting moment if there are at least two swimmers that are in the same point of the pool at that moment of time 
(that point may be 0 or len as well as any other real point inside the pool).

The pool will be open for duration seconds. You have to calculate the number of meeting moments while the pool is open. 
Since the answer may be very large, print it modulo 1000000007.

You are given two integers len and duration  — the length of the pool and the duration of the process (in seconds).

And a vector speed containing num_swimmers integers speeds[0], speeds[1], …, speeds[num_swimmers-1] , where speeds[i] is the speed of the i-th swimmer.
All speeds are pairwise distinct.

Return one integer — the number of meeting moments (including moment duration if needed and excluding moment 0), taken modulo 1000000007.

Create a C++ Function CalculateMeetingMoments that will return an integer denoting the number of meeting moments modulo 1,000,000,007.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type:

An integer len
An integer duration
A vector<int> speeds

Input Constraints:

The value of len should be at least 1 and at most 10^9 inclusive.
The value of duration should be at least 1 and at most 10^9 inclusive.
The value of num_swimmers should be at least 2 and at most 2×10^5 inclusive.
Each value of speeds[i] should be at least 1 and at most 2×10^5 inclusive.
All speeds are pairwise distinct.

*/

#include <iostream>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

int ModularExponentiation(int base, int exponent, int modulus) {
    int result = 1;
    while (exponent > 0) {
        if (exponent % 2 == 1) {
            result = static_cast<int>(static_cast<long long>(result) * base % modulus);
        }
        base = static_cast<int>(static_cast<long long>(base) * base % modulus);
        exponent /= 2;
    }
    return result;
}

void NumberTheoreticTransform(std::vector<int>& vec, int transform_type) {

    const int modulus = 998244353;
    const int generator = 3;
    const int inverse_generator = 332748118;

    int size = static_cast<int>(vec.size());
    std::vector<int> reverse_indices(size);

    for (int i = 0; i < size; ++i) {
        reverse_indices[i] = (reverse_indices[i >> 1] >> 1) + ((i & 1) * (size >> 1));
    }

    for (int i = 0; i < size; ++i) {
        if (i < reverse_indices[i]) {
            std::swap(vec[i], vec[reverse_indices[i]]);
        }
    }

    for (int t = 0; t < 19; ++t) {
        int root = ModularExponentiation(transform_type == 1 ? generator : inverse_generator, (modulus - 1) >> (t + 1), modulus);
        int segment_length = 1 << t;

        for (int i = 0; i < size; i += segment_length * 2) {
            for (int j = 0, w_val = 1; j < segment_length; ++j, w_val = static_cast<int>(static_cast<long long>(w_val) * root % modulus)) {
                int x_val = vec[i + j];
                int y_val = static_cast<int>(static_cast<long long>(vec[i + segment_length + j]) * w_val % modulus);

                vec[i + j] = x_val + y_val < modulus ? x_val + y_val : x_val + y_val - modulus;
                vec[i + segment_length + j] = x_val - y_val >= 0 ? x_val - y_val : x_val - y_val + modulus;
            }
        }
    }

    if (transform_type == -1) {
        int inverse_size = ModularExponentiation(size, modulus - 2, modulus);
        for (int i = 0; i < size; ++i) {
            vec[i] = static_cast<int>(static_cast<long long>(vec[i]) * inverse_size % modulus);
        }
    }
}

int CalculateMeetingMoments(int len, int duration, const std::vector<int>& speeds) {

int num_swimmers = speeds.size();

if (len < 1 || len > 1000000000) {
    throw std::invalid_argument("Invalid length of the pool: must be between 1 and 1,000,000,000.");
}

if (duration < 1 || duration > 1000000000) {
    throw std::invalid_argument("Invalid duration: must be between 1 and 1,000,000,000 seconds.");
}

if (num_swimmers < 2 || num_swimmers > 200000) {
    throw std::invalid_argument("Invalid number of swimmers: must be between 2 and 200,000.");
}

for (int speed : speeds) {
    if (speed < 1 || speed > 200000) {
        throw std::invalid_argument("Invalid speed value: must be between 1 and 200,000.");
    }
}

std::set<int> unique_speeds(speeds.begin(), speeds.end());

if (unique_speeds.size() != speeds.size()) {
    throw std::invalid_argument("Speed values are not pairwise distinct.");
}


    const int modulus = 998244353;
    const int max_index = 200000;
    const int ntt_size = 1 << 19;

    std::vector<int> a_vec(ntt_size, 0);
    std::vector<int> b_vec(ntt_size, 0);

    for (int speed : speeds) {
        a_vec[speed]++;
        b_vec[max_index - speed]++;
    }

    NumberTheoreticTransform(a_vec, 1);
    NumberTheoreticTransform(b_vec, 1);

    for (int i = 0; i < ntt_size; ++i) {
        b_vec[i] = static_cast<int>(static_cast<long long>(b_vec[i]) * a_vec[i] % modulus);
        a_vec[i] = static_cast<int>(static_cast<long long>(a_vec[i]) * a_vec[i] % modulus);
    }

    NumberTheoreticTransform(a_vec, -1);
    NumberTheoreticTransform(b_vec, -1);

    for (int speed : speeds) {
        a_vec[speed * 2]--;
    }

    std::vector<bool> valid_speed(max_index * 2, false);
    std::vector<int> dp_table(max_index * 2, 0);
    int answer = 0;

    for (int i = 1; i < max_index * 2; ++i) {
        if (a_vec[i]) {
            valid_speed[i] = true;
        }
    }

    for (int i = 1; i < max_index; ++i) {
        if (b_vec[max_index + i]) {
            valid_speed[i] = true;
        }
    }

    for (int i = 1; i < max_index * 2; ++i) {
        for (int j = i + i; j < max_index * 2; j += i) {
            if (valid_speed[j]) {
                valid_speed[i] = true;
            }
        }
    }

    for (int i = 1; i < max_index * 2; ++i) {
        if (valid_speed[i]) {
            if ((dp_table[i] += static_cast<int>((static_cast<long long>(duration) * i / (len * 2) % 1000000007))) >= 1000000007)
                dp_table[i] -= 1000000007;
            for (int j = i + i; j < max_index * 2; j += i) {
                if ((dp_table[j] -= dp_table[i]) < 0)
                    dp_table[j] += 1000000007;
            }
            if ((answer += dp_table[i]) >= 1000000007)
                answer -= 1000000007;
        }
    }

    return answer;
}

#include <iostream>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

int main() {
  
//TEST
int len_1 = 100;
int duration_1 = 10;
std::vector<int> speeds_1 = {2, 3, 5};
int expected_1 = 0;
int result_1 = CalculateMeetingMoments(len_1, duration_1, speeds_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
int len_2 = 50;
int duration_2 = 25;
std::vector<int> speeds_2 = {1, 4, 7, 10};
int expected_2 = 15;
int result_2 = CalculateMeetingMoments(len_2, duration_2, speeds_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
int len_3 = 1000;
int duration_3 = 500;
std::vector<int> speeds_3 = {10, 20, 30, 40, 50};
int expected_3 = 70;
int result_3 = CalculateMeetingMoments(len_3, duration_3, speeds_3);
 assert(result_3 == expected_3);
//TEST_END

//TEST
int len_4 = 200;
int duration_4 = 100;
std::vector<int> speeds_4 = {15, 25, 35, 45};
int expected_4 = 55;
int result_4 = CalculateMeetingMoments(len_4, duration_4, speeds_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
int len_5 = 300;
int duration_5 = 150;
std::vector<int> speeds_5 = {12, 24, 36};
int expected_5 = 30;
int result_5 = CalculateMeetingMoments(len_5, duration_5, speeds_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
int len_6 = 400;
int duration_6 = 200;
std::vector<int> speeds_6 = {9, 18, 27, 36};
int expected_6 = 40;
int result_6 = CalculateMeetingMoments(len_6, duration_6, speeds_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
int len_7 = 500;
int duration_7 = 250;
std::vector<int> speeds_7 = {5, 10, 15, 20, 25};
int expected_7 = 35;
int result_7 = CalculateMeetingMoments(len_7, duration_7, speeds_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
int len_8 = 600;
int duration_8 = 300;
std::vector<int> speeds_8 = {8, 16, 24, 32};
int expected_8 = 36;
int result_8 = CalculateMeetingMoments(len_8, duration_8, speeds_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
int len_9 = 700;
int duration_9 = 350;
std::vector<int> speeds_9 = {7, 14, 21, 28};
int expected_9 = 32;
int result_9 = CalculateMeetingMoments(len_9, duration_9, speeds_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
int len_10 = 0;
int duration_10 = 10;
std::vector<int> speeds_10 = {2, 3, 5};
try {
    CalculateMeetingMoments(len_10, duration_10, speeds_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_11 = 100;
int duration_11 = 0; 
std::vector<int> speeds_11 = {2, 3, 5};
try {
    CalculateMeetingMoments(len_11, duration_11, speeds_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_12 = 100;
int duration_12 = 10;
std::vector<int> speeds_12 = {2};
try {
    CalculateMeetingMoments(len_12, duration_12, speeds_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_13 = 100;
int duration_13 = 10;
std::vector<int> speeds_13 = {200001, 3, 5}; 
try {
    CalculateMeetingMoments(len_13, duration_13, speeds_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_14 = 100;
int duration_14 = 10;
std::vector<int> speeds_14 = {2, 3, 3}; 
try {
    CalculateMeetingMoments(len_14, duration_14, speeds_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_15 = 100;
int duration_15 = 10;
std::vector<int> speeds_15 = {}; 
try {
    CalculateMeetingMoments(len_15, duration_15, speeds_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_16 = 100;
int duration_16 = -10; 
std::vector<int> speeds_16 = {2, 3, 5};
try {
    CalculateMeetingMoments(len_16, duration_16, speeds_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_17 = -100; 
int duration_17 = 10;
std::vector<int> speeds_17 = {2, 3, 5};
try {
    CalculateMeetingMoments(len_17, duration_17, speeds_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_18 = 100;
int duration_18 = 10;
std::vector<int> speeds_18 = {-2, 3, 5}; 
try {
    CalculateMeetingMoments(len_18, duration_18, speeds_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
int len_19 = 100;
int duration_19 = 10;
std::vector<int> speeds_19(1e6 , 1);
try {
    CalculateMeetingMoments(len_19, duration_19, speeds_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

    return 0;
}

