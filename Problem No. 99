/*
Link : https://codeforces.com/contest/997/problem/C
*/

#include <iostream>
#include <stdexcept>
#include <cassert>

class ModularCalculator {
public:
    static const long long modulus = 998244353;

    long long Power(long long base, long long exponent) {
        long long result = 1;
        base = base % modulus;

        while (exponent > 0) {
            if (exponent % 2 == 1) {
                result = (result * base) % modulus;
            }
            exponent = exponent >> 1;
            base = (base * base) % modulus;
        }
        return result;
    }

    long long CalculateResult(long long number) {
        if (number < 0) {
            throw std::invalid_argument("The input number cannot be negative.");
        }

        long long base_power_n_squared = Power(3, number * number);
        long long base_power_n = Power(3, number);
        long long adjusted_base_power = Power(base_power_n - 3 + modulus, number);

        long long answer = base_power_n_squared - adjusted_base_power;
        long long current_term = 1;

        for (long long i = 0; i <= number; ++i) {
            long long base = Power(3, number - i);
            long long current_result = current_term * (Power(base, number) - Power(base - ((i > 0) ? 1 : 3) + modulus, number)) % modulus;

            if (i > 0) {
                current_result = current_result * 3 % modulus;
            }
            
            if (i % 2 == 1) {
                answer -= current_result;
            } else {
                answer += current_result;
            }

            current_term = current_term * (number - i) % modulus * Power(i + 1, modulus - 2) % modulus;
        }

        return (answer % modulus + modulus) % modulus;
    }
};

int main() {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);

    long long input_number;
    std::cin >> input_number;

    ModularCalculator calculator;

    try {
        long long result = calculator.CalculateResult(input_number);
        std::cout << result << std::endl;
    } catch (const std::invalid_argument &error) {
        std::cerr << "Error: " << error.what() << std::endl;
        return 1;
    }

    return 0;
}

