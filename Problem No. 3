/*
In a distant land, there stretches a never-ending road starting from point 0 and extending infinitely towards the positive x-axis.

Julie, a resident of this land, faces an intriguing challenge. You'll receive a list of Commands Julie has, which contains two types of Commands. You need to determine whether each task is achievable or not.

Command Type 1 : Represented as [1, dist]. Build an obstacle at distance dist from the origin. It is guaranteed that there is no obstacle at distance dist when the Command is asked.

Command Type 2 : Represented as [2, dist, block_size]. Julie wants you to check if it is possible to place a block of size block_size anywhere in the range [0, dist] on the line, such that the block entirely lies in the range [0, dist]. A block cannot be placed if it intersects with any obstacle, but it may touch it.

Note that you do not actually place the block. Commands are separate.

If it's possible to accomplish what Julie asked for in a Command, you'll return "true," and if it's not possible, you'll return "false."

Create a C++ function HelpJulieWithCommands to help Julie which will return a vetor<bool> results, where results[i] is true if you can place the block specified in the ith Command Type 2, and false otherwise.

Input types:

A vector<vector<int, int>> representing the Commands. (commands)
If Command is of type 1 - Represented as [1, dist]
If Commands if of type 2 - Represented as [2, dist, block_size]
Input Constraints

The length of the array of commands should be between 1 and 15 * 10^4.

Each command should contain between 2 and 3 elements.

The first element of each command should be either 1 or 2.

The values of dist and block_size in the commands should be between 1 and the minimum of 5 * 10^4 and 3 times the length of the commands array.

The input ensures that there is at least one command of type 2.


*/


//Code

#include <iostream>
#include <vector>
#include <set>
#include <stdexcept>
#include <cassert>

class SegmentTree {
    std::vector<long long> segment_tree;
public:
    SegmentTree(int n, int val) {
        segment_tree.resize(4 * n, val);
    }
    
    void build(std::vector<int>& numbers, int index, int low, int high) {
        if (low == high) {
            segment_tree[index] = numbers[low];
            return;
        }
        int mid = (low + high) / 2;
        build(numbers, 2 * index + 1, low, mid);
        build(numbers, 2 * index + 2, mid + 1, high);
        segment_tree[index] = std::max(segment_tree[2 * index + 1], segment_tree[2 * index + 2]);
    }
    
    long long query(int index, int low, int high, int left, int right) {
        if (left > high || right < low) return 0;
        if (low >= left && high <= right) return segment_tree[index];
        int mid = (low + high) / 2;
        long long left_max = query(2 * index + 1, low, mid, left, right);
        long long right_max = query(2 * index + 2, mid + 1, high, left, right);
        return std::max(left_max, right_max);
    }
    
    void update(int index, int low, int high, int position, int value) {
        if (low == high) {
            segment_tree[index] = value;
            return;
        }
        int mid = (low + high) / 2;
        if (mid >= position) update(2 * index + 1, low, mid, position, value);
        else update(2 * index + 2, mid + 1, high, position, value);
        segment_tree[index] = std::max(segment_tree[2 * index + 1], segment_tree[2 * index + 2]);
    }
};

std::vector<bool> HelpJulieWithCommands(std::vector<std::vector<int>>& commands) {
   
int command_size = commands.size();
if (command_size < 1 || command_size > 15 * 10000) {
    throw std::invalid_argument("Invalid number of commands");
}

std::vector<int> lengths(1e5, 0);
std::set<int> obstacles;
obstacles.insert(0);
obstacles.insert(1e5 - 1);
lengths[1e5 - 1] = 1e5 - 1;
SegmentTree seg_tree(1e5, 0);
seg_tree.build(lengths, 0, 0, 1e5 - 1);
std::vector<bool> results;

bool type_2_present = false;
for (const std::vector<int> command : commands) {
    
    if (command.size() < 2 || command.size() > 3) {
        throw std::invalid_argument("Invalid command");
    }

    if (command[0] != 1 && command[0] != 2) {
        throw std::invalid_argument("Invalid command type");
    }
    if (command[0] == 2) {
        type_2_present = true;
    }
    if (command[0] == 1) {
        int dist = command[1];
        if (dist < 1 || dist > std::min(5 * 10000, 3 * command_size)) {
            throw std::invalid_argument("Invalid distance");
        }
        std::set<int>::iterator iterator_pointer = obstacles.lower_bound(dist);
        int upper = *iterator_pointer;
        iterator_pointer--;
        int lower = *iterator_pointer;
        lengths[upper] = upper - dist;
        lengths[dist] = dist - lower;
        obstacles.insert(dist);
        seg_tree.update(0, 0, 1e5 - 1, upper, lengths[upper]);
        seg_tree.update(0, 0, 1e5 - 1, dist, lengths[dist]);
        
    } else {
        int dist = command[1];
        int block_size = command[2];
        if (dist < 1 || dist > std::min(5 * 10000, 3 * command_size) || block_size < 1 || block_size > std::min(5 * 10000, 3 * command_size)) {
            throw std::invalid_argument("Invalid distance or block size");
        }
        std::set<int>::iterator iterator_pointer = obstacles.lower_bound(dist);
        iterator_pointer--;
        if (dist - (*iterator_pointer) >= block_size) {
            results.push_back(true);
            continue;
        }
        int end = *iterator_pointer;
        int maximum = seg_tree.query(0, 0, 1e5 - 1, 0, end);
        if (maximum >= block_size) {
            results.push_back(true);
        } else {
            results.push_back(false);
        }
    }
    
}
if (!type_2_present) {
    throw std::invalid_argument("At least one command of type 2 must be present");
}
return results;
}


int main() {
  
    //Test 1
  
    std::vector<std::vector<int>> commands_1 = {{1,2},{2,3,3},{2,3,1},{2,2,2}};
    std::vector<bool> expected_1 = {0,1,1}; 
    std::vector<bool> result_1 = HelpJulieWithCommands(commands_1);
    assert(result_1 == expected_1);
  
    //TestEnd
  
  // Test 2
    std::vector<std::vector<int>> commands_2 = {{1,7},{2,7,6},{1,2},{2,7,5},{2,7,6}};
    std::vector<bool> expected_2 = {1,1,0}; 
    std::vector<bool> result_2 = HelpJulieWithCommands(commands_2);
    assert(result_2 == expected_2);

  //TestEnd
  
  
    // Test 3
  
    std::vector<std::vector<int>> commands_3 = {{1,1},{2,5,4},{1,3},{2,6,3}};
    std::vector<bool> expected_3 = {1,1}; 
    std::vector<bool> result_3 = HelpJulieWithCommands(commands_3);
    assert(result_3 == expected_3);
  
  //TestEnd

    // Test 4
    std::vector<std::vector<int>> commands_4 = {{1,2},{2,1,2},{2,5,4}};
    std::vector<bool> expected_4 = {0,0}; 
    std::vector<bool> result_4 = HelpJulieWithCommands(commands_4);
    assert(result_4 == expected_4);
  
  //TestEnd

    // Test 5
    std::vector<std::vector<int>> commands_5 = {{2,3,2},{2,1,1},{2,5,3}};
    std::vector<bool> expected_5 = {1,1,1}; 
    std::vector<bool> result_5 = HelpJulieWithCommands(commands_5);
    assert(result_5 == expected_5);
  
  //TestEnd
  
  
  //Test 6
  
  
    std::vector<std::vector<int>> commands_6 = {{1, 2}, {1, 3}, {1, 4}};
    try {
      HelpJulieWithCommands(commands_6);
      assert(false);
} 
  catch (const std::invalid_argument& e) {
    assert(true);
}
  
  //TestEnd
  
  
  // Test 7:

    std::vector<std::vector<int>> commands_7 = {};
  
    try {
      
    HelpJulieWithCommands(commands_7);
    assert(false); 
} 
  catch (const std::invalid_argument& e) {
    assert(true);
}
  
// TestEnd
  
  
  // Test 8
    
        std::vector<std::vector<int>> commands_8 = {{1}};
        try {
          HelpJulieWithCommands(commands_8);
        assert(false); 
    } 
   catch (const std::invalid_argument& e) {
        assert(true);
    }
  
   //TestEnd

    // Test 9
    
        std::vector<std::vector<int>> commands_9 = {{1, 2, 3, 4}};
       try {
         HelpJulieWithCommands(commands_9);
        assert(false); 
    } 
  
    catch (const std::invalid_argument& e) {
        assert(true);
    }
  
   //TestEnd

    // Test 10:
    
        std::vector<std::vector<int>> commands_10 = {{3, 2}, {2, 4, 3}};
        try {
          
        HelpJulieWithCommands(commands_10);
        assert(false); 
    } 
  catch (const std::invalid_argument& e) {
        assert(true);
    }
  
  
   //TestEnd

    // Test 11
    
        std::vector<std::vector<int>> commands_11 = {{1, 0}, {1, 100001}};
      try {
        HelpJulieWithCommands(commands_11);
        assert(false);
    } 
  catch (const std::invalid_argument& e) {
        assert(true);
    }
  
   //TestEnd

    // Test 12
    
        std::vector<std::vector<int>> commands_12 = {{2, 0, 2}, {2, -100001, 3}, {2, -5, 0}};
       try {
         HelpJulieWithCommands(commands_12);
        assert(false); 
    } 
  catch (const std::invalid_argument& e) {
        assert(true);
    }
  
  
  //TestEnd
  
  
  
  
  
  
  
    return 0;
}
