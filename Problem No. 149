
/*
Link: https://codeforces.com/contest/1808/problem/E2

Roger is a minibus driver on Venus.

To ride on Roger's minibus, you need a ticket. Each ticket has a number consisting of num_digits digits. However, as we know, the residents of Venus use a numeral 
system with base_system, rather than the decimal system. Therefore, the ticket number can be considered as a sequence of num_digits integers from 0 to 
base_system-1, inclusive.

The residents of Venus consider a ticket to be lucky if there is a digit on it that is equal to the sum of the remaining digits, modulo base_system. 
For example, if base_system=10, then the ticket 7135 is lucky because 7+1+5≡3(mod10). On the other hand, the ticket 7136 is not lucky because no digit is equal to the sum of the others modulo 10.

Once, while on a trip, Roger wondered: how many lucky tickets exist? At the same time, Roger understands that this number can be very large, so he is interested 
only in the answer modulo some prime number mod.


You are given three integers num_digits, base_system, and mod  — the number of digits on the ticket, the base of the numeral system on Venus, and the module 
for answer calculation.

Return one long long number — the number of lucky tickets modulo mod, i.e., the remainder after dividing the answer by mod.

Create a C++ Function NumberOfTickets that will return a long long denoting the number of lucky tickets modulo mod.

Use appropriate Error Handling using the stdexcept library for the invalid test cases.

Input Type

A long long integer denoting num_digits
A long long integer denoting base_system
A long long integer denoting mod

Input Constraints

The value of num_digits should be at least 1 and at most 10^18 inclusive.
The value of base_system should be at least 1 and at most 100 inclusive.
The value of mod should be at least 999990011 and at most 10^9+7 inclusive, and it should be a prime number.

*/

#include <iostream>
#include <stdexcept>
#include <cassert>
#include <algorithm>
#include <numeric>
#include <set>

std::vector<long long> SimpleSieve(long long limit) {
    std::vector<bool> is_prime(limit + 1, true);
    std::vector<long long> primes;
    is_prime[0] = is_prime[1] = false;
    for (long long p = 2; p * p <= limit; ++p) {
        if (is_prime[p]) {
            for (long long i = p * p; i <= limit; i += p) {
                is_prime[i] = false;
            }
        }
    }
    for (long long p = 2; p <= limit; ++p) {
        if (is_prime[p]) {
            primes.push_back(p);
        }
    }
    return primes;
}


std::set<long long> SegmentedSieve(long long low, long long high) {
    long long limit = std::sqrt(high) + 1;
    std::vector<long long> primes = SimpleSieve(limit);
    long long len = high - low + 1;
    std::vector<bool> is_prime(len, true);

    for (long long prime : primes) {
        long long start = std::max(prime * prime, (low + prime - 1) / prime * prime);
        for (long long j = start; j <= high; j += prime) {
            is_prime[j - low] = false;
        }
    }

    std::set<long long> result;
    for (long long i = 0; i < len; ++i) {
        if (is_prime[i]) {
            result.insert(i + low);
        }
    }
    return result;
}


long long Power(long long base, long long exponent, long long mod) {
    long long result = 1;
    for (exponent %= (mod - 1); exponent; base = base * base % mod, exponent >>= 1) {
        if (exponent & 1) result = result * base % mod;
    }
    return result;
}

long long NumberOfTickets(long long num_digits, long long base_system, long long mod) {

    if (num_digits < 1 || num_digits > 1000000000000000000LL || base_system < 1 || base_system > 100 || mod < 999990011 || mod > 1000000007) {
        throw std::invalid_argument("Invalid input arguments.");
    }
  
   std::set<long long> checker = SegmentedSieve(999990011, 1000000007);
  
   if(!checker.count(mod))
   {
     throw std::invalid_argument("mod should be a prime number");
   }

    if (num_digits == 1) {
        return 1;
    }

    long long gcd_value, result;
    if (base_system & 1) {
        gcd_value = std::gcd(num_digits - 2, base_system);
        result = Power(base_system, num_digits, mod);
        result = (result - Power(base_system - 1, num_digits, mod) + mod) % mod;
        if (num_digits & 1) result = (result + gcd_value - 1) % mod;
        else result = (result - gcd_value + 1 + mod) % mod;
    } else {
        gcd_value = std::gcd(num_digits - 2, base_system >> 1);
        result = Power(base_system, num_digits, mod);
        result = (result - Power(base_system - 2, num_digits, mod) + mod) % mod;
        result = (result + Power(mod - 2, num_digits, mod)) % mod;
        if (result & 1) result = (result + mod) >> 1;
        else result >>= 1;
        if (num_digits & 1) result = (result + Power(2, num_digits - 1, mod) * gcd_value % mod) % mod;
        else result = (result - Power(2, num_digits - 1, mod) * gcd_value % mod + mod) % mod;
    }
    return result;
}

#include <iostream>
#include <stdexcept>
#include <cassert>
#include <algorithm>
#include <numeric>

int main() {
  
//TEST
long long num_digits_1 = 1;
long long base_system_1 = 1;
long long mod_1 = 1000000007;
long long expected_1 = 1;
long long result_1 = NumberOfTickets(num_digits_1, base_system_1, mod_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
long long num_digits_2 = 10;
long long base_system_2 = 10;
long long mod_2 = 999990289;
long long expected_2 = 463167932;
long long result_2 = NumberOfTickets(num_digits_2, base_system_2, mod_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
long long num_digits_3 = 100;
long long base_system_3 = 2;
long long mod_3 = 1000000007;
long long expected_3 = 988185646;
long long result_3 = NumberOfTickets(num_digits_3, base_system_3, mod_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
long long num_digits_4 = 1000;
long long base_system_4 = 16;
long long mod_4 = 999991327;
long long expected_4 = 890389098; 
long long result_4 = NumberOfTickets(num_digits_4, base_system_4, mod_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
long long num_digits_5 = 10000;
long long base_system_5 = 5;
long long mod_5 = 1000000007;
long long expected_5 = 763892216; 
long long result_5 = NumberOfTickets(num_digits_5, base_system_5, mod_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
long long num_digits_6 = 100000;
long long base_system_6 = 3;
long long mod_6 = 999992057;
long long expected_6 = 125966337; 
long long result_6 = NumberOfTickets(num_digits_6, base_system_6, mod_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
long long num_digits_7 = 1000000;
long long base_system_7 = 8;
long long mod_7 = 1000000007;
long long expected_7 = 633588152; 
long long result_7 = NumberOfTickets(num_digits_7, base_system_7, mod_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
long long num_digits_8 = 10000000;
long long base_system_8 = 6;
long long mod_8 = 999993061;
long long expected_8 = 816659751; 
long long result_8 = NumberOfTickets(num_digits_8, base_system_8, mod_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
long long num_digits_9 = 100000000;
long long base_system_9 = 4;
long long mod_9 = 1000000007;
long long expected_9 = 935645725; 
long long result_9 = NumberOfTickets(num_digits_9, base_system_9, mod_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
long long num_digits_10 = 0; 
long long base_system_10 = 1;
long long mod_10 = 1000000007;
try {
    NumberOfTickets(num_digits_10, base_system_10, mod_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_11 = 1;
long long base_system_11 = 0; 
long long mod_11 = 1000000007;
try {
    NumberOfTickets(num_digits_11, base_system_11, mod_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_12 = 1;
long long base_system_12 = 1;
long long mod_12 = 100000000; 
try {
    NumberOfTickets(num_digits_12, base_system_12, mod_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_13 = 1000000000000000008LL; 
long long base_system_13 = 1;
long long mod_13 = 1000000007;
try {
     NumberOfTickets(num_digits_13, base_system_13, mod_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_14 = 1;
long long base_system_14 = 101; 
long long mod_14 = 1000000007;
try {
     NumberOfTickets(num_digits_14, base_system_14, mod_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_15 = 1;
long long base_system_15 = 1;
long long mod_15 = 10000000008; 
try {
     NumberOfTickets(num_digits_15, base_system_15, mod_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_16 = -4546518; 
long long base_system_16 = 1;
long long mod_16 = 1000000007;
try {
    long long result_16 = NumberOfTickets(num_digits_16, base_system_16, mod_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_17 = 1;
long long base_system_17 = -999999; 
long long mod_17 = 1000000007;
try {
    NumberOfTickets(num_digits_17, base_system_17, mod_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
long long num_digits_18 = 1;
long long base_system_18 = 1;
long long mod_18 = -89465; 
try {
    NumberOfTickets(num_digits_18, base_system_18, mod_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
//TEST
long long num_digits_19 = 1;
long long base_system_19 = 1;
long long mod_19 = 999993062; 
try {
    NumberOfTickets(num_digits_19, base_system_19, mod_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
