/*
Link: https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls/description/


Jimmy was a young programmer, always eager to solve new challenges. One day, he came across a fascinating problem involving colorful balls.

Jimmy was given 2*len balls of count distinct colors. He was provided with a vector called balls of size count where balls[i] is the number of balls of color i.

All the balls would be shuffled uniformly at random, and then the first len balls would be distributed to the first box, and the remaining len balls to 
the second box.

Jimmy knew that the two boxes are considered different. For example, if there are two balls of colors color_a and color_b, and two boxes [] and (),
then the distribution [color_a] (color_b) is considered different from the distribution [color_b] (color_a).

His task was to find the probability that the two boxes have the same number of distinct balls. Answers within 10-5 of the actual value would be accepted as correct.


Create a C++ Function GetProbability that will return a double denoting the probability that the two boxes have the same number of distinct balls.

Use appropriate Error Handling using the stdexcept library for the invalid test cases


Input Type

A vector<int> denoting balls

Input Constraints:

1.The length of the vector balls (denoted as len) should be between 1 and 8 inclusive.
2.Each balls[i] should be between 1 and 6 inclusive.
3.The sum of the elements in balls is even.

*/

#include <vector>
#include <numeric>
#include <stdexcept>
#include <cassert>


    int BallsCount(const std::vector<int>& balls){
        return std::accumulate(balls.begin(), balls.end(), 0);
    }

    int ColorCount(const std::vector<int>& balls)  {
        return std::accumulate(balls.begin(), balls.end(), 0, [&](int sum, int color) {
            return sum + (color > 0);
        });
    }

    double ShufflesCount(const std::vector<int>& balls) {
        double ans = 1, last = 0;
        for (int color : balls) {
            for (int i = 1; i <= color; i++) {
                last++;
                ans *= last;
                ans /= i;
            }
        }
        return ans;
    }

    double Probability(int color_idx, std::vector<int>& vec_a, std::vector<int>& vec_b, const std::vector<int>& balls) {
        if (color_idx == balls.size()) {
            if (BallsCount(vec_a) == BallsCount(vec_b) && ColorCount(vec_a) == ColorCount(vec_b)) {
                return ShufflesCount(vec_a) * ShufflesCount(vec_b) / ShufflesCount(balls);
            }
            return 0;
        }
        double ans = 0;
        for (int i = 0; i <= balls[color_idx]; i++) {
            vec_a[color_idx] = i;
            vec_b[color_idx] = balls[color_idx] - i;
            ans += Probability(color_idx + 1, vec_a, vec_b, balls);
            vec_a[color_idx] = 0;
            vec_b[color_idx] = 0;
        }
        return ans;
    }

     double GetProbability(std::vector<int>& balls) {
        int len = balls.size();
        if (len < 1 || len > 8) {
            throw std::invalid_argument("The length of the vector balls should be between 1 and 8 inclusive");
        }
        
        for (int ball_count : balls) {
            if (ball_count < 1 || ball_count > 6) {
                throw std::invalid_argument("Each balls[i] should be between 1 and 6 inclusive");
            }
        }
        
        if (std::accumulate(balls.begin(), balls.end(), 0) % 2 != 0) {
            throw std::invalid_argument("The sum of the elements in balls must be even");
        }

        std::vector<int> vec_a(balls.size(), 0);
        std::vector<int> vec_b(balls.size(), 0);
        return Probability(0, vec_a, vec_b, balls);
    }



int main(){
  
//TEST
std::vector<int> balls_1 = {1, 2, 3};
double expected_1 = 0.3; 
double result_1 = GetProbability(balls_1);
assert(std::abs(result_1 - expected_1) < 1e-6);

//TEST_END

//TEST

std::vector<int> balls_2 = {2, 2, 2};
double expected_2 = 1.0;
double result_2 = GetProbability(balls_2);
assert(std::abs(result_2 - expected_2) < 1e-6);

//TEST_END

//TEST

std::vector<int> balls_3 = {1, 1, 1, 1};
double expected_3 = 1.0;
double result_3 = GetProbability(balls_3);
assert(std::abs(result_3 - expected_3) < 1e-6);

//TEST_END

//TEST

std::vector<int> balls_4 = {3, 1, 2};
double expected_4 = 0.3;
double result_4 = GetProbability(balls_4);
assert(std::abs(result_4 - expected_4) < 1e-6);

//TEST_END

//TEST


std::vector<int> balls_5 = {1, 2, 3, 4};
double expected_5 = 0.309524;
double result_5 = GetProbability(balls_5);
assert(std::abs(result_5 - expected_5) < 1e-6);

//TEST_END

//TEST

std::vector<int> balls_6 = {2, 2, 2, 2};
double expected_6 = 1.0;
double result_6 = GetProbability(balls_6);
assert(std::abs(result_6 - expected_6) < 1e-6);

//TEST_END

//TEST


std::vector<int> balls_7 = {1, 1, 2, 2};
double expected_7 = 0.6;
double result_7 = GetProbability(balls_7);
assert(std::abs(result_7 - expected_7) < 1e-6);

//TEST_END

//TEST

std::vector<int> balls_8 = {1, 2, 2, 3};
double expected_8 = 0.371429;
double result_8 = GetProbability(balls_8);
assert(std::abs(result_8 - expected_8) < 1e-6);

//TEST_END

//TEST


std::vector<int> balls_9 = {1, 1, 1, 1};
double expected_9 = 1.0;
double result_9 = GetProbability(balls_9);
assert(std::abs(result_9 - expected_9) < 1e-6);

//TEST_END

//TEST
  
std::vector<int> balls_10 = {};
try {
    GetProbability(balls_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST


std::vector<int> balls_11 = {1, 2, 3, 4, 5, 6, 6, 6, 6};
try {
    GetProbability(balls_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> balls_12 = {1, 2, 3, -4};
try {
    GetProbability(balls_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> balls_13 = {1, 2, 3, 7};
try {
    GetProbability(balls_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> balls_14 = {1, 2, 3, -4};
try {
    GetProbability(balls_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END

//TEST

std::vector<int> balls_15 = {2,1};
try {
    GetProbability(balls_15);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END
  
  
//TEST

std::vector<int> balls_16 = {};
try {
    GetProbability(balls_16);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
  
  //TEST_END

// TEST
std::vector<int> balls_17 = {1, 2, 3, 4, 5, 6, 1, 2, 3};
try {
    GetProbability(balls_17);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
  
  //TEST_END

// TEST
std::vector<int> balls_18 = {1, -2, 3};
try {
    GetProbability(balls_18);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST
std::vector<int> balls_19 = {1, 2, 7};
try {
    GetProbability(balls_19);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST
std::vector<int> balls_20 = {1, 2, -6};
try {
    GetProbability(balls_20);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
  
// TEST
std::vector<int> balls_21 = {-2, -4, -6};
try {
    GetProbability(balls_21);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}

//TEST_END


  return 0;
}



