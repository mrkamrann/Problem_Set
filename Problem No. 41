/*
Link: https://leetcode.com/problems/find-beautiful-indices-in-the-given-array-ii/description/ 


Jimmy faced a challenging task involving a 0-indexed string str, and two target substrings target_a and target_b, along with an integer diff. His goal was to identify 
and sort all "beautiful" indices where conditions involving these substrings were met.

An index i was considered beautiful if:

str[i..(i + target_a.length - 1)] == target_a
There existed an index j such that:
str[j..(j + target_b.length - 1)] == target_b
|j - i| <= diff

To solve this problem, Jimmy needed to meticulously check each substring in str to verify these conditions. It required careful handling of string 
indices and comparisons to ensure all beautiful indices were identified and returned in sorted order.

Create a C++ Function BeautifulIndices that will return the vector that contains beautiful indices in sorted order from smallest to largest.

Use appropriate Error Handling using the stdexcept library for the invalid test cases

Input Type

A string denoting str
A string denoting target_a
A string denoting target_b
An integer denoting diff



Input Constraints:

1.The length of str should be at least 1 and at most 5 * 10^5 inclusive.
2.diff should be greater than equal to 1 and less than equal to length of str
3.The lengths of target_a and target_b should each be at least 1 and at most 5 * 10^5 inclusive.
4.str, target_a, and target_b contain only lowercase English letters.


*/

#include <vector>
#include <string>
#include <stdexcept>
#include <cassert>

    std::vector<int> ComputeLpsArray(std::string pattern) {
        int pattern_length = pattern.length();
        std::vector<int> lps(pattern_length, 0);
        int length = 0;
        lps[0] = 0;
        int index = 1;
        
        while (index < pattern_length) {
            if (pattern[index] == pattern[length]) {
                length++;
                lps[index] = length;
                index++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[index] = 0;
                    index++;
                }
            }
        }
        
        return lps;
    }
    
    std::vector<int> KmpSearch(std::string str, std::string pattern) {
        int pattern_length = pattern.length();
        int str_length = str.length();
        
        std::vector<int> lps = ComputeLpsArray(pattern);
        std::vector<int> result(str_length, 0);
        int str_index = 0, pattern_index = 0;
        
        while ((str_length - str_index) >= (pattern_length - pattern_index)) {
            if (pattern[pattern_index] == str[str_index]) {
                pattern_index++;
                str_index++;
            }

            if (pattern_index == pattern_length) {
                result[str_index - pattern_index] = 1;
                pattern_index = lps[pattern_index - 1];
            } else if (str_index < str_length && pattern[pattern_index] != str[str_index]) {
                if (pattern_index != 0) {
                    pattern_index = lps[pattern_index - 1];
                } else {
                    str_index = str_index + 1;
                }
            }
        }
        
        return result;
    }
    
    std::vector<int> BeautifulIndices(std::string str, std::string target_a, std::string target_b, int diff) {
        if (str.length() < 1 || str.length() > 500000) {
            throw std::invalid_argument("The length of str should be at least 1 and at most 5 * 10^5 inclusive.");
        }

         if (diff < 1 || diff > str.length()) {
            throw std::invalid_argument("diff should be greater than equal to 1 and less than equal to length of str");
        }

        if (target_a.length() < 1 || target_a.length() > 500000) {
            throw std::invalid_argument("The length of target_a should be at least 1 and at most 5 * 10^5 inclusive.");
        }
        if (target_b.length() < 1 || target_b.length() > 500000) {
            throw std::invalid_argument("The length of target_b should be at least 1 and at most 5 * 10^5 inclusive.");
        }
        for (char c : str) {
            if (c < 'a' || c > 'z') {
                throw std::invalid_argument("str contains invalid characters. It should contain only lowercase English letters.");
            }
        }
        for (char c : target_a) {
            if (c < 'a' || c > 'z') {
                throw std::invalid_argument("target_a contains invalid characters. It should contain only lowercase English letters.");
            }
        }
        for (char c : target_b) {
            if (c < 'a' || c > 'z') {
                throw std::invalid_argument("target_b contains invalid characters. It should contain only lowercase English letters.");
            }
        }

        std::vector<int> found_a = KmpSearch(str, target_a);
        std::vector<int> found_b = KmpSearch(str, target_b);
        
        int str_length = str.length();
        int target_a_length = target_a.length();
        int target_b_length = target_b.length();
        std::vector<int> forward(str_length), backward(str_length);
        
        int count = 0;
        for (int index = 0; index < str_length; index++) {
            count += found_b[index];
            forward[index] = count;
        }
        
        count = 0;
        for (int index = str_length - 1; index >= 0; index--) {
            count += found_b[index];
            backward[index] = count;
        }
        
        count = 0;
        std::vector<int> result;
        for (int index = 0; index < str_length; index++) {
            int diff_forward = forward[index] - (index - diff - 1 >= 0 ? forward[index - diff - 1] : 0);
            int diff_backward = backward[index] - (index + diff + 1 < str_length ? backward[index + diff + 1] : 0);
            if (found_a[index] == 1 && (diff_forward + diff_backward > 0)) result.push_back(index);
        }
        
        return result;
    }

int main(){
  
  //TEST
  
  std::string str_1 = "isawsquirrelnearmysquirrelhouseohmy";
  std::string target_a_1 = "my";
  std::string target_b_1 = "squirrel"; 
  int diff_1 = 15;
  std::vector<int>expected_1 = {16,33};
  std::vector<int>result_1 =  BeautifulIndices(str_1,target_a_1,target_b_1,diff_1);
  assert(expected_1 == result_1);
  
  //TEST_END
  
  //TEST

std::string str_2 = "thequickbrownfoxjumpsoverthelazydog";
std::string target_a_2 = "thequick";
std::string target_b_2 = "fox"; 
int diff_2 = 16;
std::vector<int>expected_2 = {0};
std::vector<int>result_2 = BeautifulIndices(str_2, target_a_2, target_b_2, diff_2);
assert(expected_2 == result_2);

//TEST_END

//TEST

std::string str_3 = "aabbccddeeffgghhiijj";
std::string target_a_3 = "aabc";
std::string target_b_3 = "jjkl"; 
int diff_3 = 11;
std::vector<int>expected_3 = {};
std::vector<int>result_3 = BeautifulIndices(str_3, target_a_3, target_b_3, diff_3);
assert(expected_3 == result_3);

//TEST_END

//TEST

std::string str_4 = "abracadabra";
std::string target_a_4 = "abrac";
std::string target_b_4 = "abra"; 
int diff_4 = 2;
std::vector<int>expected_4 = {0};
std::vector<int>result_4 = BeautifulIndices(str_4, target_a_4, target_b_4, diff_4);
assert(expected_4 == result_4);

//TEST_END

//TEST

std::string str_5 = "hellomynameisgptandilovechatting";
std::string target_a_5 = "hello";
std::string target_b_5 = "chat"; 
int diff_5 = 26;
std::vector<int>expected_5 = {0};
std::vector<int>result_5 = BeautifulIndices(str_5, target_a_5, target_b_5, diff_5);
assert(expected_5 == result_5);

//TEST_END

//TEST

std::string str_6 = "abcdefgabcdefgabcdefg";
std::string target_a_6 = "a";
std::string target_b_6 = "e"; 
int diff_6 = 12;
std::vector<int>expected_6 = {0, 7,14};
std::vector<int>result_6 = BeautifulIndices(str_6, target_a_6, target_b_6, diff_6);
assert(expected_6 == result_6);

//TEST_END

//TEST

std::string str_7 = "thisisaverylongstringthatcontainsmanysubstrings";
std::string target_a_7 = "this";
std::string target_b_7 = "averylongstringthat"; 
int diff_7 = 14;
std::vector<int>expected_7 = {0};
std::vector<int>result_7 = BeautifulIndices(str_7, target_a_7, target_b_7, diff_7);
assert(expected_7 == result_7);

//TEST_END

//TEST

std::string str_8 = "xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyz";
std::string target_a_8 = "xyz";
std::string target_b_8 = "xyz"; 
int diff_8 = 3;
std::vector<int>expected_8 = {0,3,6,9,12,15,18,21,24,27,30};
std::vector<int>result_8 = BeautifulIndices(str_8, target_a_8, target_b_8, diff_8);
assert(expected_8 == result_8);

//TEST_END
  
//TEST

std::string str_9 = ""; 
std::string target_a_9 = "a";
std::string target_b_9 = "b"; 
int diff_9 = 1;
try{
  BeautifulIndices(str_9, target_a_9, target_b_9, diff_9);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_10 = std::string(500001, 'a');
std::string target_a_10 = "a";
std::string target_b_10 = "b"; 
int diff_10 = 1;
try{
  BeautifulIndices(str_10, target_a_10, target_b_10, diff_10);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_11 = "abcde";
std::string target_a_11 = "a";
std::string target_b_11 = "e"; 
int diff_11 = 6; 
try{
  BeautifulIndices(str_11, target_a_11, target_b_11, diff_11);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_12 = "abcde";
std::string target_a_12 = "a";
std::string target_b_12 = "e"; 
int diff_12 = 0;
try{
  BeautifulIndices(str_12, target_a_12, target_b_12, diff_12);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_13 = "abcde";
std::string target_a_13 = "";
std::string target_b_13 = "e"; 
int diff_13 = 1;
try{
  BeautifulIndices(str_13, target_a_13, target_b_13, diff_13);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_14 = "abcde";
std::string target_a_14 = "a";
std::string target_b_14 = ""; 
int diff_14 = 1;
try{
  BeautifulIndices(str_14, target_a_14, target_b_14, diff_14);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_15 = "abcde";
std::string target_a_15 = std::string(500001, 'a'); 
std::string target_b_15 = "e"; 
int diff_15 = 1;
try{
  BeautifulIndices(str_15, target_a_15, target_b_15, diff_15);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_16 = "abcde";
std::string target_a_16 = "a";
std::string target_b_16 = std::string(500001, 'e');
int diff_16 = 1;
try{
  BeautifulIndices(str_16, target_a_16, target_b_16, diff_16);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_17 = "abcde";
std::string target_a_17 = "a";
std::string target_b_17 = "e1"; 
int diff_17 = 1;
try{
  BeautifulIndices(str_17, target_a_17, target_b_17, diff_17);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

//TEST

std::string str_18 = "abc1de"; 
std::string target_a_18 = "a";
std::string target_b_18 = "e"; 
int diff_18 = 1;
try{
  BeautifulIndices(str_18, target_a_18, target_b_18, diff_18);
  assert(false);
}
catch(const std::invalid_argument& e){
  assert(true);
}

//TEST_END

  
  
  return 0;
}
