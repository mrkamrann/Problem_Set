/*
Link: https://codeforces.com/contest/792/problem/E

Gilchrist has length boxes with colored balls on the table. Colors are numbered from 1 to length. The i-th box contains values_i balls, all of which have color i. 
You have to write a program that will divide all balls into sets such that:

Each ball belongs to exactly one of the sets.
There are no empty sets.
There is no set containing two (or more) balls of different colors (each set contains only balls of one color).
There are no two sets such that the difference between their sizes is greater than 1.

You are given length integers represented by vector called values - denoting boxes 

Return one long long â€” the minimum possible number of sets.

Create a C++ function CalculateMinSets that will return a long long denoting the minimum number of sets required.

Use appropriate error handling using the stdexcept library for invalid test cases.

Input Type

vector<int> denoting values

Input Constraints

The value of length should be at least 1 and at most 500 inclusive.
Each value of values_i should be at least 1 and at most 10^9 inclusive.
*/

#include <iostream>
#include <vector>
#include <stdexcept>
#include <algorithm>

long long CalculateDivision(int divisor, int length, const std::vector<int>& values) {
    long long result = 0;
    for (int i = 0; i < length; ++i) {
        if (values[i] % divisor == 0) {
            result += values[i] / divisor;
        } else if (values[i] / divisor + values[i] % divisor >= divisor - 1) {
            result += values[i] / divisor + 1;
        } else {
            return -1;
        }
    }
    return result;
}

long long CalculateMinSets(const std::vector<int>& values) {

  int length = values.size();

    if (length < 1 || length > 500) {
        throw std::invalid_argument("Invalid length.");
    }
    for (int value : values) {
        if (value < 1 || value > 1000000000) {
            throw std::invalid_argument("Invalid value in values.");
        }
    }

    int min_value = *std::min_element(values.begin(), values.end());
    for (int i = 1; i <= min_value; ++i) {
        long long result_1 = CalculateDivision(min_value / i + 1, length, values);
        long long result_2 = CalculateDivision(min_value / i, length, values);
        if (result_1 != -1) return result_1;
        else if (result_2 != -1) return result_2;
    }
    return -1;
}

#include <iostream>
#include <vector>
#include <stdexcept>
#include <algorithm>

int main() {
   
  //TEST
std::vector<int> values_1 = {1};
long long expected_1 = 1;
long long result_1 = CalculateMinSets(values_1);
assert(result_1 == expected_1);
//TEST_END

//TEST
std::vector<int> values_2 = {2, 2};
long long expected_2 = 2;
long long result_2 = CalculateMinSets(values_2);
assert(result_2 == expected_2);
//TEST_END

//TEST
std::vector<int> values_3 = {3, 3, 3};
long long expected_3 = 3; 
long long result_3 = CalculateMinSets(values_3);
assert(result_3 == expected_3);
//TEST_END

//TEST
std::vector<int> values_4 = {1, 2, 3, 4};
long long expected_4 = 6; 
long long result_4 = CalculateMinSets(values_4);
assert(result_4 == expected_4);
//TEST_END

//TEST
std::vector<int> values_5 = {5, 5, 5, 5, 5};
long long expected_5 = 5; 
long long result_5 = CalculateMinSets(values_5);
assert(result_5 == expected_5);
//TEST_END

//TEST
std::vector<int> values_6 = {1, 1, 1, 1, 1, 1};
long long expected_6 = 6; 
long long result_6 = CalculateMinSets(values_6);
assert(result_6 == expected_6);
//TEST_END

//TEST
std::vector<int> values_7 = {1, 2, 3, 4, 5, 6, 7};
long long expected_7 = 16;
long long result_7 = CalculateMinSets(values_7);
assert(result_7 == expected_7);
//TEST_END

//TEST
std::vector<int> values_8 = {8, 8, 8, 8, 8, 8, 8, 8};
long long expected_8 = 8; 
long long result_8 = CalculateMinSets(values_8);
assert(result_8 == expected_8);
//TEST_END

//TEST
std::vector<int> values_9 = {1, 2, 3, 4, 5, 6, 7, 8, 9};
long long expected_9 = 25; 
long long result_9 = CalculateMinSets(values_9);
assert(result_9 == expected_9);
//TEST_END

//TEST
std::vector<int> values_10 = {0}; 
try {
    CalculateMinSets(values_10);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> values_11 = {1000000001}; 
try {
    CalculateMinSets(values_11);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> values_12 = std::vector<int>(501, 1);
try {
    CalculateMinSets(values_12);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> values_13 = {};
try {
    CalculateMinSets(values_13);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END

//TEST
std::vector<int> values_14 = {1, 2, -3}; 
try {
    CalculateMinSets(values_14);
    assert(false);
} catch(const std::invalid_argument& e) {
    assert(true);
}
//TEST_END
    return 0;
}
